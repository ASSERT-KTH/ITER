bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Validate.isTrue(foundDescriptions.size()  >  fmtCount);  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  [BUGGY]  Validate.isTrue(foundDescriptions.size()  >  fmtCount);  [BUGGY]  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Validate.isTrue(foundDescriptions.size()  >  fmtCount);	Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  	non-compiled	[CE]  ';'  expected	47	None	replace
2	[BUG]  [BUGGY]  Validate.isTrue(foundDescriptions.size()  ==  0);  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  [BUGGY]  Validate.isTrue(foundDescriptions.size()  ==  0);  [BUGGY]  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Validate.isTrue(foundDescriptions.size()  ==  0);	Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  	non-compiled	[CE]  ';'  expected	47	None	replace
3	[BUG]  [BUGGY]  Validate.isTrue(foundFormats.size()  ==  0);  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  [BUGGY]  Validate.isTrue(foundFormats.size()  ==  0);  [BUGGY]  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Validate.isTrue(foundFormats.size()  ==  0);	Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  	non-compiled	[CE]  ';'  expected	47	None	replace
4	[BUG]  [BUGGY]  Validate.isTrue(foundDescriptions.size()  ==  1);  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry  [CONTEXT]  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  [BUGGY]  Validate.isTrue(foundDescriptions.size()  ==  1);  [BUGGY]  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Validate.isTrue(foundDescriptions.size()  ==  1);	Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  	non-compiled	[CE]  ';'  expected	47	None	replace
5	[BUG]  [BUGGY]    [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry  [CONTEXT]  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  [BUGGY]    [BUGGY]  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	  	Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  	non-compiled	[CE]  ';'  expected	47	None	replace
6	[BUG]  [BUGGY]    int  fmtCount  =  foundDescriptions.size();  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  [BUGGY]    int  fmtCount  =  foundDescriptions.size();  [BUGGY]  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	    int  fmtCount  =  foundDescriptions.size();		non-compiled	[CE]  ';'  expected	48	None	add
7	[BUG]  [BUGGY]    int  fmtCount  =  foundFormats.size();  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  [BUGGY]    int  fmtCount  =  foundFormats.size();  [BUGGY]  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	    int  fmtCount  =  foundFormats.size();		non-compiled	[CE]  ';'  expected	48	None	add
8	[BUG]  [BUGGY]    int  fmtCount  =  findFormats.size();  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  [BUGGY]    int  fmtCount  =  findFormats.size();  [BUGGY]  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	    int  fmtCount  =  findFormats.size();		non-compiled	[CE]  ';'  expected	48	None	add
9	[BUG]  [BUGGY]    int  fmtCount  =  findFormats.size();  foundDescriptions.add(format);  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry  [CONTEXT]  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  [BUGGY]    int  fmtCount  =  findFormats.size();  foundDescriptions.add(format);  [BUGGY]  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	    int  fmtCount  =  findFormats.size();  foundDescriptions.add(format);		non-compiled	[CE]  ';'  expected	48	None	add
10	[BUG]  [BUGGY]    int  fmtCount  =  findFormat(pattern,  next(pos));  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry  [CONTEXT]  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  [BUGGY]    int  fmtCount  =  findFormat(pattern,  next(pos));  [BUGGY]  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	    int  fmtCount  =  findFormat(pattern,  next(pos));		non-compiled	[CE]  ';'  expected	48	None	add
11	[BUG]  [BUGGY]    if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  [BUGGY]    if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	    if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }		non-compiled	[CE]  ';'  expected	48	None	add
12	[BUG]  [BUGGY]    if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  [BUGGY]    if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	    if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }		non-compiled	[CE]  ';'  expected	48	None	add
13	[BUG]  [BUGGY]    if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  [BUGGY]    if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }  [BUGGY]  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	    if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }		non-compiled	[CE]  ';'  expected	48	None	add
14	[BUG]  [BUGGY]    if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry  [CONTEXT]  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  [BUGGY]    if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }  [BUGGY]  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	    if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }		non-compiled	[CE]  ';'  expected	48	None	add
15	[BUG]  [BUGGY]    if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(QUOTE);  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry  [CONTEXT]  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  [BUGGY]    if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(QUOTE);  }  [BUGGY]  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	    if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(QUOTE);  }		non-compiled	[CE]  ';'  expected	48	None	add
16	[BUG]  [BUGGY]  Validate.isTrue(foundDescriptions.size()  >  0);  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  [BUGGY]  Validate.isTrue(foundDescriptions.size()  >  0);  [BUGGY]  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Validate.isTrue(foundDescriptions.size()  >  0);	Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  	non-compiled	[CE]  ';'  expected	47	None	replace
17	[BUG]  [BUGGY]  Validate.isTrue(foundFormats.size()  >  0);  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  [BUGGY]  Validate.isTrue(foundFormats.size()  >  0);  [BUGGY]  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Validate.isTrue(foundFormats.size()  >  0);	Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  	non-compiled	[CE]  ';'  expected	47	None	replace
18	[BUG]  [BUGGY]    int  fmtCount  =  parseFormatDescription(pattern,  next(pos));  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  [BUGGY]    int  fmtCount  =  parseFormatDescription(pattern,  next(pos));  [BUGGY]  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	    int  fmtCount  =  parseFormatDescription(pattern,  next(pos));		non-compiled	[CE]  ';'  expected	48	None	add
19	[BUG]  [BUGGY]    if(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  [BUGGY]    if(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	    if(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }		non-compiled	[CE]  ';'  expected	48	None	add
20	[BUG]  [BUGGY]    if(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  [BUGGY]    if(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }  [BUGGY]  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	    if(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }		non-compiled	[CE]  ';'  expected	48	None	add
21	[BUG]  [BUGGY]    if(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry  [CONTEXT]  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  [BUGGY]    if(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [BUGGY]  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	    if(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }		non-compiled	[CE]  ';'  expected	48	None	add
22	[BUG]  [BUGGY]    if(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry  [CONTEXT]  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  [BUGGY]    if(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	    if(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }		non-compiled	[CE]  ';'  expected	48	None	add
