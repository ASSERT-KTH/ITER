bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Validate.isTrue(foundFormats.size()  ==  fmtCount);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  Validate.isTrue(foundFormats.size()  ==  fmtCount);  [BUGGY]    if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Validate.isTrue(foundFormats.size()  ==  fmtCount);	  Validate.isTrue(foundFormats.size()    ==    0);    	non-compiled	[CE]  ';'  expected	3	None	replace
2	[BUG]  [BUGGY]  Validate.isTrue(foundFormats.size()!=  fmtCount);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  Validate.isTrue(foundFormats.size()!=  fmtCount);  [BUGGY]    if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Validate.isTrue(foundFormats.size()!=  fmtCount);	  Validate.isTrue(foundFormats.size()    ==    0);    	non-compiled	[CE]  ';'  expected	3	None	replace
3	[BUG]  [BUGGY]  Validate.isTrue(foundFormats.size()  >=  fmtCount);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  Validate.isTrue(foundFormats.size()  >=  fmtCount);  [BUGGY]    if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Validate.isTrue(foundFormats.size()  >=  fmtCount);	  Validate.isTrue(foundFormats.size()    ==    0);    	non-compiled	[CE]  ';'  expected	3	None	replace
4	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }	      if(format!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
5	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT).append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT).append(DUMMY_PATTERN);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT).append(DUMMY_PATTERN);  }	      if(format!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
6	[BUG]  [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }	      if(format!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
7	[BUG]  [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT).append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT).append(DUMMY_PATTERN);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT).append(DUMMY_PATTERN);  }	      if(format!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
8	[BUG]  [BUGGY]  int  fmtCount  =  parseFormatDescription(pattern,  next(pos  +  1));  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  int  fmtCount  =  parseFormatDescription(pattern,  next(pos  +  1));  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	int  fmtCount  =  parseFormatDescription(pattern,  next(pos  +  1));	      int    fmtCount    =    parseFormatDescription(pattern,    next(pos));    	non-compiled	[CE]  ';'  expected	18	None	replace
9	[BUG]  [BUGGY]  int  fmtCount  =  parseFormatDescription(pattern,  next(0));  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  int  fmtCount  =  parseFormatDescription(pattern,  next(0));  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	int  fmtCount  =  parseFormatDescription(pattern,  next(0));	      int    fmtCount    =    parseFormatDescription(pattern,    next(pos));    	non-compiled	[CE]  ';'  expected	18	None	replace
10	[BUG]  [BUGGY]  char  fmtCount  =  parseFormatDescription(pattern,  next(pos));  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  char  fmtCount  =  parseFormatDescription(pattern,  next(pos));  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  fmtCount  =  parseFormatDescription(pattern,  next(pos));	      int    fmtCount    =    parseFormatDescription(pattern,    next(pos));    	non-compiled	[CE]  ';'  expected	18	None	replace
11	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray();  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  char[]  c  =  pattern.toCharArray();  [BUGGY]    if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char[]  c  =  pattern.toCharArray();	      	non-compiled	[CE]  ';'  expected	5	None	replace
12	[BUG]  [BUGGY]  char  c  =  pattern.charAt(pos);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  char  c  =  pattern.charAt(pos);  [BUGGY]    if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  c  =  pattern.charAt(pos);	      	non-compiled	[CE]  ';'  expected	5	None	replace
13	[BUG]  [BUGGY]  char[]  c  =  pattern.split( ", ");  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  char[]  c  =  pattern.split( ", ");  [BUGGY]    if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char[]  c  =  pattern.split( ", ");	      	non-compiled	[CE]  ';'  expected	5	None	replace
14	[BUG]  [BUGGY]  char  c  =  pattern.charAt(i);  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  char  c  =  pattern.charAt(i);  [BUGGY]    if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  c  =  pattern.charAt(i);	      	non-compiled	[CE]  ';'  expected	5	None	replace
15	[BUG]  [BUGGY]  if(pos.getIndex()  ==  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(pos.getIndex()  ==  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  ==  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }	      if(pos.getIndex()    <    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FMT);    }    	non-compiled	[CE]  ';'  expected	21	None	replace
16	[BUG]  [BUGGY]  if(pos.getIndex()  >=  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(pos.getIndex()  >=  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  >=  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }	      if(pos.getIndex()    <    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FMT);    }    	non-compiled	[CE]  ';'  expected	21	None	replace
17	[BUG]  [BUGGY]  if(pos.getIndex()  ==  fmtCount)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(pos.getIndex()  ==  fmtCount)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  ==  fmtCount)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }	      if(pos.getIndex()    <    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FMT);    }    	non-compiled	[CE]  ';'  expected	21	None	replace
18	[BUG]  [BUGGY]  char  fmtCount  =  findFormats.size();  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  char  fmtCount  =  findFormats.size();  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  fmtCount  =  findFormats.size();	      int    fmtCount    =    findFormats.size();    	non-compiled	[CE]  ';'  expected	8	None	replace
19	[BUG]  [BUGGY]  Integer  fmtCount  =  foundFormats.size();  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  Integer  fmtCount  =  foundFormats.size();  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Integer  fmtCount  =  foundFormats.size();	      int    fmtCount    =    findFormats.size();    	non-compiled	[CE]  ';'  expected	8	None	replace
20	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }	      if(format!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	12	None	replace
21	[BUG]  [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }	      if(format!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	12	None	replace
22	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(QUOTE);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(QUOTE);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(QUOTE);  }	      if(format    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN).append(QUOTE);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
23	[BUG]  [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(QUOTE);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(QUOTE);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(QUOTE);  }	      if(format    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN).append(QUOTE);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
24	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(QUOTE);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(QUOTE);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(QUOTE);  }	      if(format    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN).append(QUOTE);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
25	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.size()  -  1;  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  int  fmtCount  =  foundDescriptions.size()  -  1;  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	int  fmtCount  =  foundDescriptions.size()  -  1;	      int    fmtCount    =    foundDescriptions.size();    	non-compiled	[CE]  ';'  expected	6	None	replace
26	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.size()  +  1;  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  int  fmtCount  =  foundDescriptions.size()  +  1;  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	int  fmtCount  =  foundDescriptions.size()  +  1;	      int    fmtCount    =    foundDescriptions.size();    	non-compiled	[CE]  ';'  expected	6	None	replace
27	[BUG]  [BUGGY]  char  fmtCount  =  foundDescriptions.size();  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  char  fmtCount  =  foundDescriptions.size();  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  fmtCount  =  foundDescriptions.size();	      int    fmtCount    =    foundDescriptions.size();    	non-compiled	[CE]  ';'  expected	6	None	replace
28	[BUG]  [BUGGY]  if(pos.getIndex()  ==  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(pos.getIndex()  ==  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  ==  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }	      if(pos.getIndex()    <    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(START_FMT);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
29	[BUG]  [BUGGY]  if(pos.getIndex()  >=  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(pos.getIndex()  >=  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  >=  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }	      if(pos.getIndex()    <    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(START_FMT);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
30	[BUG]  [BUGGY]  int  fmtCount  =  findFormat(pattern,  next(pos  +  1));  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  int  fmtCount  =  findFormat(pattern,  next(pos  +  1));  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	int  fmtCount  =  findFormat(pattern,  next(pos  +  1));	      int    fmtCount    =    findFormat(pattern,    next(pos));    	non-compiled	[CE]  ';'  expected	10	None	replace
31	[BUG]  [BUGGY]  int  fmtCount  =  findFormat(c,  next(pos));  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  int  fmtCount  =  findFormat(c,  next(pos));  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	int  fmtCount  =  findFormat(c,  next(pos));	      int    fmtCount    =    findFormat(pattern,    next(pos));    	non-compiled	[CE]  ';'  expected	10	None	replace
32	[BUG]  [BUGGY]  char  fmtCount  =  findFormat(pattern,  next(pos));  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  char  fmtCount  =  findFormat(pattern,  next(pos));  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  fmtCount  =  findFormat(pattern,  next(pos));	      int    fmtCount    =    findFormat(pattern,    next(pos));    	non-compiled	[CE]  ';'  expected	10	None	replace
33	[BUG]  [BUGGY]  char  fmtCount  =  foundFormats.size();  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  char  fmtCount  =  foundFormats.size();  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  fmtCount  =  foundFormats.size();	      int    fmtCount    =    foundFormats.size();    	non-compiled	[CE]  ';'  expected	7	None	replace
34	[BUG]  [BUGGY]  int  fmtCount  =  foundFormats.size()  -  1;  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  int  fmtCount  =  foundFormats.size()  -  1;  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	int  fmtCount  =  foundFormats.size()  -  1;	      int    fmtCount    =    foundFormats.size();    	non-compiled	[CE]  ';'  expected	7	None	replace
35	[BUG]  [BUGGY]  Validate.isTrue(foundDescriptions.size()  >=  fmtCount);  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  Validate.isTrue(foundDescriptions.size()  >=  fmtCount);  [BUGGY]    if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Validate.isTrue(foundDescriptions.size()  >=  fmtCount);	  Validate.isTrue(foundDescriptions.size()    >    fmtCount);    	non-compiled	[CE]  ';'  expected	1	None	replace
36	[BUG]  [BUGGY]  if(pos.getIndex()  ==  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(pos.getIndex()  ==  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  ==  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	      if(pos.getIndex()    <    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
37	[BUG]  [BUGGY]  if(pos.getIndex()  >=  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(pos.getIndex()  >=  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  >=  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	      if(pos.getIndex()    <    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
38	[BUG]  [BUGGY]  if(pos.getIndex()  ==  fmtCount)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(pos.getIndex()  ==  fmtCount)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  ==  fmtCount)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	      if(pos.getIndex()    <    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
39	[BUG]  [BUGGY]  Validate.isTrue(foundFormats.size()  ==  1);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  Validate.isTrue(foundFormats.size()  ==  1);  [BUGGY]    if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Validate.isTrue(foundFormats.size()  ==  1);	  Validate.isTrue(foundDescriptions.size()    ==    1);    	non-compiled	[CE]  ';'  expected	4	None	replace
40	[BUG]  [BUGGY]  char  fmtCount  =  findFormats.size();  foundDescriptions.add(format);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  char  fmtCount  =  findFormats.size();  foundDescriptions.add(format);  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  fmtCount  =  findFormats.size();  foundDescriptions.add(format);	      int    fmtCount    =    findFormats.size();    foundDescriptions.add(format);    	non-compiled	[CE]  ';'  expected	9	None	replace
41	[BUG]  [BUGGY]  int  fmtCount  =  origFormats.size();  foundDescriptions.add(format);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  int  fmtCount  =  origFormats.size();  foundDescriptions.add(format);  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	int  fmtCount  =  origFormats.size();  foundDescriptions.add(format);	      int    fmtCount    =    findFormats.size();    foundDescriptions.add(format);    	non-compiled	[CE]  ';'  expected	9	None	replace
42	[BUG]  [BUGGY]  int  fmtCount  =  foundFormats.size();  foundDescriptions.add(format);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  int  fmtCount  =  foundFormats.size();  foundDescriptions.add(format);  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	int  fmtCount  =  foundFormats.size();  foundDescriptions.add(format);	      int    fmtCount    =    findFormats.size();    foundDescriptions.add(format);    	non-compiled	[CE]  ';'  expected	9	None	replace
43	[BUG]  [BUGGY]  if(pos.getIndex()  ==  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(pos.getIndex()  ==  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  ==  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }	      if(pos.getIndex()    <    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
44	[BUG]  [BUGGY]  Validate.isTrue(foundDescriptions.size()!=  fmtCount);  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  Validate.isTrue(foundDescriptions.size()!=  fmtCount);  [BUGGY]    if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Validate.isTrue(foundDescriptions.size()!=  fmtCount);	  Validate.isTrue(foundDescriptions.size()    ==    0);    	non-compiled	[CE]  ';'  expected	2	None	replace
45	[BUG]  [BUGGY]  Validate.isTrue(foundFormats.size()  >=  0);  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  Validate.isTrue(foundFormats.size()  >=  0);  [BUGGY]    if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Validate.isTrue(foundFormats.size()  >=  0);	  Validate.isTrue(foundFormats.size()    >    0);    	non-compiled	[CE]  ';'  expected	17	None	replace
46	[BUG]  [BUGGY]  Validate.isTrue(foundFormats.size()!=  0);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  Validate.isTrue(foundFormats.size()!=  0);  [BUGGY]    if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Validate.isTrue(foundFormats.size()!=  0);	  Validate.isTrue(foundFormats.size()    >    0);    	non-compiled	[CE]  ';'  expected	17	None	replace
47	[BUG]  [BUGGY]  int  fmtCount  =  findFormats.size()  -  1;  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  int  fmtCount  =  findFormats.size()  -  1;  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	int  fmtCount  =  findFormats.size()  -  1;	      int    fmtCount    =    findFormats.size();    	non-compiled	[CE]  ';'  expected	8	None	replace
48	[BUG]  [BUGGY]  Validate.isTrue(foundDescriptions.size()  >=  0);  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  Validate.isTrue(foundDescriptions.size()  >=  0);  [BUGGY]    if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Validate.isTrue(foundDescriptions.size()  >=  0);	  Validate.isTrue(foundDescriptions.size()    >    0);    	non-compiled	[CE]  ';'  expected	16	None	replace
49	[BUG]  [BUGGY]  Validate.isTrue(foundDescriptions.size()!=  0);  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  Validate.isTrue(foundDescriptions.size()!=  0);  [BUGGY]    if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Validate.isTrue(foundDescriptions.size()!=  0);	  Validate.isTrue(foundDescriptions.size()    >    0);    	non-compiled	[CE]  ';'  expected	16	None	replace
50	[BUG]  [BUGGY]  if(pos.getIndex()  >=  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(pos.getIndex()  >=  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  >=  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }	      if(pos.getIndex()    <    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
51	[BUG]  [BUGGY]  if(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FE);  }	      if(pos.getIndex()    <    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
52	[BUG]  [BUGGY]  int  fmtCount  =  findFormat(pattern,  next(pos)+  1);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  int  fmtCount  =  findFormat(pattern,  next(pos)+  1);  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	int  fmtCount  =  findFormat(pattern,  next(pos)+  1);	      int    fmtCount    =    findFormat(pattern,    next(pos));    	non-compiled	[CE]  ';'  expected	10	None	replace
53	[BUG]  [BUGGY]  if(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FMT);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FMT);  }	      if(pos.getIndex()    <    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FMT);    }    	non-compiled	[CE]  ';'  expected	21	None	replace
54	[BUG]  [BUGGY]  int  fmtCount  =  foundFormats.size()  +  1;  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  int  fmtCount  =  foundFormats.size()  +  1;  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	int  fmtCount  =  foundFormats.size()  +  1;	      int    fmtCount    =    foundFormats.size();    	non-compiled	[CE]  ';'  expected	7	None	replace
55	[BUG]  [BUGGY]  char  c  =  foundFormats.get(fmtCount);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  char  c  =  foundFormats.get(fmtCount);  [BUGGY]    if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  c  =  foundFormats.get(fmtCount);	      	non-compiled	[CE]  ';'  expected	5	None	replace
56	[BUG]  [BUGGY]  ArrayList  foundDescriptions  =  new  ArrayList();  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  ArrayList  foundDescriptions  =  new  ArrayList();  [BUGGY]    if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	ArrayList  foundDescriptions  =  new  ArrayList();	      	non-compiled	[CE]  ';'  expected	5	None	replace
57	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }	      if(format!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	12	None	replace
58	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }	      if(format    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
59	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(QUOTE);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(QUOTE);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(QUOTE);  }	      if(format    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN).append(QUOTE);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
60	[BUG]  [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(QUOTE);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(QUOTE);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(QUOTE);  }	      if(format    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN).append(QUOTE);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
61	[BUG]  [BUGGY]  Validate.isTrue(foundDescriptions.size()  <  fmtCount);  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  Validate.isTrue(foundDescriptions.size()  <  fmtCount);  [BUGGY]    if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Validate.isTrue(foundDescriptions.size()  <  fmtCount);	  Validate.isTrue(foundDescriptions.size()    >    fmtCount);    	non-compiled	[CE]  ';'  expected	1	None	replace
62	[BUG]  [BUGGY]  char[]  c  =  it.next();  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  char[]  c  =  it.next();  [BUGGY]    if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char[]  c  =  it.next();	      	non-compiled	[CE]  ';'  expected	5	None	replace
63	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }	      if(format!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	12	None	replace
64	[BUG]  [BUGGY]  if(pos.getIndex()  <  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(pos.getIndex()  <  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  <  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }	      if(pos.getIndex()    <    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(START_FMT);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
65	[BUG]  [BUGGY]  Validate.isTrue(foundFormats.size()  ==  mtCount);  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  Validate.isTrue(foundFormats.size()  ==  mtCount);  [BUGGY]    if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Validate.isTrue(foundFormats.size()  ==  mtCount);	  Validate.isTrue(foundFormats.size()    >    0);    	non-compiled	[CE]  ';'  expected	17	None	replace
66	[BUG]  [BUGGY]  Validate.isTrue(foundFormats.size()  <  fmtCount);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  Validate.isTrue(foundFormats.size()  <  fmtCount);  [BUGGY]    if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Validate.isTrue(foundFormats.size()  <  fmtCount);	  Validate.isTrue(foundFormats.size()    ==    0);    	non-compiled	[CE]  ';'  expected	3	None	replace
67	[BUG]  [BUGGY]  if(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }	      if(pos.getIndex()    <    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
68	[BUG]  [BUGGY]  if(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }	      if(pos.getIndex()    <    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FMT);    }    	non-compiled	[CE]  ';'  expected	21	None	replace
69	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT).append(duMMY_PATTERN);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT).append(duMMY_PATTERN);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT).append(duMMY_PATTERN);  }	      if(format!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
70	[BUG]  [BUGGY]  if(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	      if(pos.getIndex()    <    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
71	[BUG]  [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }	      if(format    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	11	None	replace
72	[BUG]  [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);    [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [BUGGY]    Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(     "Unreadable  format  element  at  position     "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT).append(formatDescription);  }	      if(format    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	11	None	replace
