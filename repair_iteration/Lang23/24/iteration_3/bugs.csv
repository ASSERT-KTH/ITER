bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FE).append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FE).append(DUMMY_PATTERN);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FE).append(DUMMY_PATTERN);  }	  if(format!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(END_FE).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
2	[BUG]  [BUGGY]  String  fmtCount  =  findFormats.size();  foundDescriptions.add(format);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  String  fmtCount  =  findFormats.size();  foundDescriptions.add(format);  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	String  fmtCount  =  findFormats.size();  foundDescriptions.add(format);	  char    fmtCount    =    findFormats.size();    foundDescriptions.add(format);    	non-compiled	[CE]  ';'  expected	40	None	replace
3	[BUG]  [BUGGY]  char  fmtCount  =  foundFormats.size();  foundDescriptions.add(format);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char  fmtCount  =  foundFormats.size();  foundDescriptions.add(format);  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  fmtCount  =  foundFormats.size();  foundDescriptions.add(format);	  char    fmtCount    =    findFormats.size();    foundDescriptions.add(format);    	non-compiled	[CE]  ';'  expected	40	None	replace
4	[BUG]  [BUGGY]  if(pos.getIndex()  ==  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  ==  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  ==  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }	  if(pos.getIndex()    <    END_FE)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(START_FMT);    }    	non-compiled	[CE]  ';'  expected	64	None	replace
5	[BUG]  [BUGGY]  if(pos.getIndex()  >=  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  >=  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  >=  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }	  if(pos.getIndex()    <    END_FE)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(START_FMT);    }    	non-compiled	[CE]  ';'  expected	64	None	replace
6	[BUG]  [BUGGY]  if(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }	  if(pos.getIndex()    <    END_FE)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(START_FMT);    }    	non-compiled	[CE]  ';'  expected	64	None	replace
7	[BUG]  [BUGGY]  if(pos.getIndex()  >=  index)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  >=  index)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  >=  index)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(pos.getIndex()    >=    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	50	None	replace
8	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }	  if(format    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(END_FE).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
9	[BUG]  [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FE).append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FE).append(DUMMY_PATTERN);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FE).append(DUMMY_PATTERN);  }	  if(format    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(END_FE).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
10	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT).append(formatDescription);  }	  if(format!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(START_FMT).append(duMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	69	None	replace
11	[BUG]  [BUGGY]  if(pos.getIndex()  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	  if(pos.getIndex()    <    0)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	70	None	replace
12	[BUG]  [BUGGY]  if(pos.getIndex()  >=  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  >=  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  >=  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	  if(pos.getIndex()    <    0)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	70	None	replace
13	[BUG]  [BUGGY]  if(pos.getIndex()  ==  0)  {  for(int  fmtCount  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  ==  0)  {  for(int  fmtCount  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  ==  0)  {  for(int  fmtCount  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	  if(pos.getIndex()    <    0)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	70	None	replace
14	[BUG]  [BUGGY]  Validate.isTrue(foundFormats.size()  >  fmtCount);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  Validate.isTrue(foundFormats.size()  >  fmtCount);  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Validate.isTrue(foundFormats.size()  >  fmtCount);	  Validate.isTrue(foundFormats.size()    ==    fmtCount);    	non-compiled	[CE]  ';'  expected	1	None	replace
15	[BUG]  [BUGGY]  if(!foundFormats.isEmpty())  {  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(!foundFormats.isEmpty())  {  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(!foundFormats.isEmpty())  {  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }	  if(format    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(END_FE).append(formatDescription);    }    	non-compiled	[CE]  ';'  expected	71	None	replace
16	[BUG]  [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FE).append(formatDescription);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FE).append(formatDescription);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FE).append(formatDescription);  }	  if(format    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(END_FE).append(formatDescription);    }    	non-compiled	[CE]  ';'  expected	71	None	replace
17	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	  if(pos.getIndex()    ==    fmtCount)    {    int    fmtCount    =    foundDescriptions.size();    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	38	None	replace
18	[BUG]  [BUGGY]  if(pos.getIndex()  ==  0)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  ==  0)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  ==  0)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	  if(pos.getIndex()    ==    fmtCount)    {    int    fmtCount    =    foundDescriptions.size();    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	38	None	replace
19	[BUG]  [BUGGY]  Integer  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  Integer  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Integer  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	  if(pos.getIndex()    ==    fmtCount)    {    int    fmtCount    =    foundDescriptions.size();    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	38	None	replace
20	[BUG]  [BUGGY]  if(pos.getIndex()  ==  index)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  ==  index)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  ==  index)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	  if(pos.getIndex()    ==    fmtCount)    {    int    fmtCount    =    foundDescriptions.size();    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	38	None	replace
21	[BUG]  [BUGGY]  char  fmtCount  =  findFormat(c,  next(pos));  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char  fmtCount  =  findFormat(c,  next(pos));  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  fmtCount  =  findFormat(c,  next(pos));	  int    fmtCount    =    findFormat(c,    next(pos));    	non-compiled	[CE]  ';'  expected	31	None	replace
22	[BUG]  [BUGGY]  int  fmtCount  =  findFormat(c,  next(pos  +  1));  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  int  fmtCount  =  findFormat(c,  next(pos  +  1));  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	int  fmtCount  =  findFormat(c,  next(pos  +  1));	  int    fmtCount    =    findFormat(c,    next(pos));    	non-compiled	[CE]  ';'  expected	31	None	replace
23	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }	  if(pos.getIndex()    ==    fmtCount)    {    int    fmtCount    =    foundDescriptions.size();    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FMT);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
24	[BUG]  [BUGGY]  if(pos.getIndex()  ==  0)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  ==  0)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  ==  0)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }	  if(pos.getIndex()    ==    fmtCount)    {    int    fmtCount    =    foundDescriptions.size();    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FMT);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
25	[BUG]  [BUGGY]  Integer  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  Integer  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Integer  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }	  if(pos.getIndex()    ==    fmtCount)    {    int    fmtCount    =    foundDescriptions.size();    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FMT);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
26	[BUG]  [BUGGY]  if(pos.getIndex()  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }	  if(pos.getIndex()    <    0)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FMT);    }    	non-compiled	[CE]  ';'  expected	68	None	replace
27	[BUG]  [BUGGY]  if(pos.getIndex()  >=  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  >=  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  >=  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }	  if(pos.getIndex()    <    0)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FMT);    }    	non-compiled	[CE]  ';'  expected	68	None	replace
28	[BUG]  [BUGGY]  if(pos.getIndex()  ==  0)  {  for(int  fmtCount  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  ==  0)  {  for(int  fmtCount  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  ==  0)  {  for(int  fmtCount  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }	  if(pos.getIndex()    <    0)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FMT);    }    	non-compiled	[CE]  ';'  expected	68	None	replace
29	[BUG]  [BUGGY]  if(pos.getIndex()  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }	  if(pos.getIndex()    ==    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(START_FMT);    }    	non-compiled	[CE]  ';'  expected	28	None	replace
30	[BUG]  [BUGGY]  if(pos.getIndex()  ==  index)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  ==  index)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  ==  index)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }	  if(pos.getIndex()    ==    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(START_FMT);    }    	non-compiled	[CE]  ';'  expected	28	None	replace
31	[BUG]  [BUGGY]  Validate.isTrue(foundFormats.size()  ==  fmtCount  +  1);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  Validate.isTrue(foundFormats.size()  ==  fmtCount  +  1);  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Validate.isTrue(foundFormats.size()  ==  fmtCount  +  1);	  Validate.isTrue(foundFormats.size()!=    0);    	non-compiled	[CE]  ';'  expected	46	None	replace
32	[BUG]  [BUGGY]  char  fmtCount  =  origFormats.size();  foundDescriptions.add(format);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char  fmtCount  =  origFormats.size();  foundDescriptions.add(format);  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  fmtCount  =  origFormats.size();  foundDescriptions.add(format);	  int    fmtCount    =    origFormats.size();    foundDescriptions.add(format);    	non-compiled	[CE]  ';'  expected	41	None	replace
33	[BUG]  [BUGGY]  Integer  fmtCount  =  origFormats.size();  foundDescriptions.add(format);  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  Integer  fmtCount  =  origFormats.size();  foundDescriptions.add(format);  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Integer  fmtCount  =  origFormats.size();  foundDescriptions.add(format);	  int    fmtCount    =    origFormats.size();    foundDescriptions.add(format);    	non-compiled	[CE]  ';'  expected	41	None	replace
34	[BUG]  [BUGGY]  if(pos.getIndex()  ==  fmtCount)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  ==  fmtCount)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FMT);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  ==  fmtCount)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FMT);  }	  if(pos.getIndex()    ==    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FMT);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
35	[BUG]  [BUGGY]  char  fmtCount  =  parseFormatDescription(pattern,  next(pos  +  1));  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char  fmtCount  =  parseFormatDescription(pattern,  next(pos  +  1));  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  fmtCount  =  parseFormatDescription(pattern,  next(pos  +  1));	  int    fmtCount    =    parseFormatDescription(pattern,    next(pos    +    1));    	non-compiled	[CE]  ';'  expected	8	None	replace
36	[BUG]  [BUGGY]  int  fmtCount  =  parseFormatDescription(pattern,  next(pos  +  1)+  1);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  int  fmtCount  =  parseFormatDescription(pattern,  next(pos  +  1)+  1);  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	int  fmtCount  =  parseFormatDescription(pattern,  next(pos  +  1)+  1);	  int    fmtCount    =    parseFormatDescription(pattern,    next(pos    +    1));    	non-compiled	[CE]  ';'  expected	8	None	replace
37	[BUG]  [BUGGY]  if(!foundFormats.isEmpty())  {  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(!foundFormats.isEmpty())  {  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(!foundFormats.isEmpty())  {  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
38	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT);  }	  if(format!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
39	[BUG]  [BUGGY]  String  fmtCount  =  foundDescriptions.size();  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  String  fmtCount  =  foundDescriptions.size();  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	String  fmtCount  =  foundDescriptions.size();	  char    fmtCount    =    foundDescriptions.size();    	non-compiled	[CE]  ';'  expected	27	None	replace
40	[BUG]  [BUGGY]  char  fmtCount  =  foundDescriptions.size()  +  1;  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char  fmtCount  =  foundDescriptions.size()  +  1;  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  fmtCount  =  foundDescriptions.size()  +  1;	  char    fmtCount    =    foundDescriptions.size();    	non-compiled	[CE]  ';'  expected	27	None	replace
41	[BUG]  [BUGGY]  char  fmtCount  =  foundDescriptions.size()  -  1;  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char  fmtCount  =  foundDescriptions.size()  -  1;  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  fmtCount  =  foundDescriptions.size()  -  1;	  char    fmtCount    =    foundDescriptions.size();    	non-compiled	[CE]  ';'  expected	27	None	replace
42	[BUG]  [BUGGY]  char  c  =  pattern.charAt(i  +  1);  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char  c  =  pattern.charAt(i  +  1);  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  c  =  pattern.charAt(i  +  1);	  char    c    =    pattern.charAt(i);    	non-compiled	[CE]  ';'  expected	14	None	replace
43	[BUG]  [BUGGY]  char  c  =  foundFormats.charAt(i);  [CE]  ';'  expected  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char  c  =  foundFormats.charAt(i);  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  c  =  foundFormats.charAt(i);	  char    c    =    pattern.charAt(i);    	non-compiled	[CE]  ';'  expected	14	None	replace
44	[BUG]  [BUGGY]  char  c  =  pattern.charAt(start);  [CE]  ';'  expected  [FE]                              junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char  c  =  pattern.charAt(start);  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  c  =  pattern.charAt(start);	  char    c    =    pattern.charAt(i);    	non-compiled	[CE]  ';'  expected	14	None	replace
45	[BUG]  [BUGGY]  if(!foundFormats.isEmpty())  {  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(QUOTE);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(!foundFormats.isEmpty())  {  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(QUOTE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(!foundFormats.isEmpty())  {  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(QUOTE);  }	  if(format    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(END_FE).append(QUOTE);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
46	[BUG]  [BUGGY]  if(!foundFormats.contains(fmtCount))  {  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(QUOTE);  }  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(!foundFormats.contains(fmtCount))  {  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(QUOTE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(!foundFormats.contains(fmtCount))  {  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(QUOTE);  }	  if(format    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(END_FE).append(QUOTE);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
47	[BUG]  [BUGGY]  if(pos.getIndex()  ==  fmtCount)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  ==  fmtCount)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  ==  fmtCount)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FE);  }	  if(pos.getIndex()    ==    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	36	None	replace
48	[BUG]  [BUGGY]  if(!foundFormats.isEmpty())  {  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(!foundFormats.isEmpty())  {  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(!foundFormats.isEmpty())  {  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }	  if(format!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(END_FE).append(formatDescription);    }    	non-compiled	[CE]  ';'  expected	63	None	replace
49	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FE).append(formatDescription);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FE).append(formatDescription);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FE).append(formatDescription);  }	  if(format!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(END_FE).append(formatDescription);    }    	non-compiled	[CE]  ';'  expected	63	None	replace
50	[BUG]  [BUGGY]  String  fmtCount  =  foundFormats.size();  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  String  fmtCount  =  foundFormats.size();  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	String  fmtCount  =  foundFormats.size();	  char    fmtCount    =    foundFormats.size();    	non-compiled	[CE]  ';'  expected	33	None	replace
51	[BUG]  [BUGGY]  char  fmtCount  =  foundFormats.size()  -  1;  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char  fmtCount  =  foundFormats.size()  -  1;  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  fmtCount  =  foundFormats.size()  -  1;	  char    fmtCount    =    foundFormats.size();    	non-compiled	[CE]  ';'  expected	33	None	replace
52	[BUG]  [BUGGY]  char  fmtCount  =  foundFormats.size()  +  1;  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char  fmtCount  =  foundFormats.size()  +  1;  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  fmtCount  =  foundFormats.size()  +  1;	  char    fmtCount    =    foundFormats.size();    	non-compiled	[CE]  ';'  expected	33	None	replace
53	[BUG]  [BUGGY]  int  fmtCount  =  findFormat(pattern,  next(pos)/  1);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  int  fmtCount  =  findFormat(pattern,  next(pos)/  1);  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	int  fmtCount  =  findFormat(pattern,  next(pos)/  1);	  int    fmtCount    =    findFormat(pattern,    next(pos)+    1);    	non-compiled	[CE]  ';'  expected	52	None	replace
54	[BUG]  [BUGGY]  int  fmtCount  =  findFormat(pattern,  next(pos)+  2);  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  int  fmtCount  =  findFormat(pattern,  next(pos)+  2);  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	int  fmtCount  =  findFormat(pattern,  next(pos)+  2);	  int    fmtCount    =    findFormat(pattern,    next(pos)+    1);    	non-compiled	[CE]  ';'  expected	52	None	replace
55	[BUG]  [BUGGY]  int  fmtCount  =  findFormat(pattern,  next(pos)-  1);  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  int  fmtCount  =  findFormat(pattern,  next(pos)-  1);  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	int  fmtCount  =  findFormat(pattern,  next(pos)-  1);	  int    fmtCount    =    findFormat(pattern,    next(pos)+    1);    	non-compiled	[CE]  ';'  expected	52	None	replace
56	[BUG]  [BUGGY]  int  fmtCount  =  parseFormatDescription(pattern,  next(1));  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  int  fmtCount  =  parseFormatDescription(pattern,  next(1));  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	int  fmtCount  =  parseFormatDescription(pattern,  next(1));	  int    fmtCount    =    parseFormatDescription(pattern,    next(0));    	non-compiled	[CE]  ';'  expected	9	None	replace
57	[BUG]  [BUGGY]  char  fmtCount  =  parseFormatDescription(pattern,  next(0));  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char  fmtCount  =  parseFormatDescription(pattern,  next(0));  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  fmtCount  =  parseFormatDescription(pattern,  next(0));	  int    fmtCount    =    parseFormatDescription(pattern,    next(0));    	non-compiled	[CE]  ';'  expected	9	None	replace
58	[BUG]  [BUGGY]  char[]  c  =  foundFormats.split( ", ");  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char[]  c  =  foundFormats.split( ", ");  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char[]  c  =  foundFormats.split( ", ");	  char[]    c    =    pattern.split(   ",   ");    	non-compiled	[CE]  ';'  expected	13	None	replace
59	[BUG]  [BUGGY]  char[]  c  =  pattern.split( ",n ");  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char[]  c  =  pattern.split( ",n ");  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char[]  c  =  pattern.split( ",n ");	  char[]    c    =    pattern.split(   ",   ");    	non-compiled	[CE]  ';'  expected	13	None	replace
60	[BUG]  [BUGGY]  String  fmtCount  =  parseFormatDescription(pattern,  next(pos));  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  String  fmtCount  =  parseFormatDescription(pattern,  next(pos));  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	String  fmtCount  =  parseFormatDescription(pattern,  next(pos));	  char    fmtCount    =    parseFormatDescription(pattern,    next(pos));    	non-compiled	[CE]  ';'  expected	10	None	replace
61	[BUG]  [BUGGY]  char[]  c  =  it.getValue();  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char[]  c  =  it.getValue();  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char[]  c  =  it.getValue();	  char[]    c    =    it.next();    	non-compiled	[CE]  ';'  expected	62	None	replace
62	[BUG]  [BUGGY]  char[]  c  =  foundFormats.next();  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char[]  c  =  foundFormats.next();  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char[]  c  =  foundFormats.next();	  char[]    c    =    it.next();    	non-compiled	[CE]  ';'  expected	62	None	replace
63	[BUG]  [BUGGY]  char[]  c  =  it.getCurrentIndex();  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char[]  c  =  it.getCurrentIndex();  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char[]  c  =  it.getCurrentIndex();	  char[]    c    =    it.next();    	non-compiled	[CE]  ';'  expected	62	None	replace
64	[BUG]  [BUGGY]  if(pos.getIndex()  >=  fmtCount)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  >=  fmtCount)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  >=  fmtCount)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	  if(pos.getIndex()    >=    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	37	None	replace
65	[BUG]  [BUGGY]  ArrayList  foundDescriptions  =  new  ArrayList(foundFormats.size());  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  ArrayList  foundDescriptions  =  new  ArrayList(foundFormats.size());  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	ArrayList  foundDescriptions  =  new  ArrayList(foundFormats.size());	  ArrayList    foundDescriptions    =    new    ArrayList();    	non-compiled	[CE]  ';'  expected	56	None	replace
66	[BUG]  [BUGGY]  List  foundDescriptions  =  new  ArrayList();  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  List  foundDescriptions  =  new  ArrayList();  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	List  foundDescriptions  =  new  ArrayList();	  ArrayList    foundDescriptions    =    new    ArrayList();    	non-compiled	[CE]  ';'  expected	56	None	replace
67	[BUG]  [BUGGY]  ArrayList  foundDescriptions  =  new  ArrayList(fmtCount);  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  ArrayList  foundDescriptions  =  new  ArrayList(fmtCount);  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	ArrayList  foundDescriptions  =  new  ArrayList(fmtCount);	  ArrayList    foundDescriptions    =    new    ArrayList();    	non-compiled	[CE]  ';'  expected	56	None	replace
68	[BUG]  [BUGGY]  char  fmtCount  =  findFormat(pattern,  next(pos  +  1));  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char  fmtCount  =  findFormat(pattern,  next(pos  +  1));  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  fmtCount  =  findFormat(pattern,  next(pos  +  1));	  int    fmtCount    =    findFormat(pattern,    next(pos    +    1));    	non-compiled	[CE]  ';'  expected	30	None	replace
69	[BUG]  [BUGGY]  if(pos.getIndex()  >=  fmtCount)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  >=  fmtCount)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FMT);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  >=  fmtCount)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FMT);  }	  if(pos.getIndex()    <    fmtCount)    {    for(int    i    =    start;    i    <    0;    ++i)    {    stripCustom.append(END_FMT);    }    	non-compiled	[CE]  ';'  expected	53	None	replace
70	[BUG]  [BUGGY]  if(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  >=  0;  ++i)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  >=  0;  ++i)  {  stripCustom.append(END_FMT);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  >=  0;  ++i)  {  stripCustom.append(END_FMT);  }	  if(pos.getIndex()    <    fmtCount)    {    for(int    i    =    start;    i    <    0;    ++i)    {    stripCustom.append(END_FMT);    }    	non-compiled	[CE]  ';'  expected	53	None	replace
71	[BUG]  [BUGGY]  Validate.isTrue(foundFormats.size()  >  mtCount);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  Validate.isTrue(foundFormats.size()  >  mtCount);  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Validate.isTrue(foundFormats.size()  >  mtCount);	  Validate.isTrue(foundFormats.size()    ==    mtCount);    	non-compiled	[CE]  ';'  expected	65	None	replace
72	[BUG]  [BUGGY]  Integer  fmtCount  =  foundDescriptions.size();  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  Integer  fmtCount  =  foundDescriptions.size();  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Integer  fmtCount  =  foundDescriptions.size();	  int    fmtCount    =    foundDescriptions.size()    +    1;    	non-compiled	[CE]  ';'  expected	26	None	replace
73	[BUG]  [BUGGY]  char[]  c  =  toPattern.toCharArray();  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char[]  c  =  toPattern.toCharArray();  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char[]  c  =  toPattern.toCharArray();	  char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  ';'  expected	11	None	replace
74	[BUG]  [BUGGY]  char[]  c  =  foundFormats.toCharArray();  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char[]  c  =  foundFormats.toCharArray();  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char[]  c  =  foundFormats.toCharArray();	  char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  ';'  expected	11	None	replace
75	[BUG]  [BUGGY]  char[]  c  =  format.toCharArray();  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char[]  c  =  format.toCharArray();  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char[]  c  =  format.toCharArray();	  char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  ';'  expected	11	None	replace
76	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FE).append(QUOTE);  }  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FE).append(QUOTE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FE).append(QUOTE);  }	  if(format!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(END_FE).append(QUOTE);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
77	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(QUOTE);  }  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(QUOTE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(QUOTE);  }	  if(format!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(END_FE).append(QUOTE);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
78	[BUG]  [BUGGY]  String  fmtCount  =  findFormat(pattern,  next(pos));  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  String  fmtCount  =  findFormat(pattern,  next(pos));  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	String  fmtCount  =  findFormat(pattern,  next(pos));	  char    fmtCount    =    findFormat(pattern,    next(pos));    	non-compiled	[CE]  ';'  expected	32	None	replace
79	[BUG]  [BUGGY]  if(pos.getIndex()  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(pos.getIndex()    ==    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	43	None	replace
80	[BUG]  [BUGGY]  if(pos.getIndex()  ==  index)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  ==  index)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  ==  index)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(pos.getIndex()    ==    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	43	None	replace
81	[BUG]  [BUGGY]  if(!foundFormats.isEmpty())  {  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(!foundFormats.isEmpty())  {  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(!foundFormats.isEmpty())  {  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }	  if(format    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	21	None	replace
82	[BUG]  [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT);  }	  if(format    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	21	None	replace
83	[BUG]  [BUGGY]  char  c  =  foundFormats.get(i);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char  c  =  foundFormats.get(i);  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  c  =  foundFormats.get(i);	  char    c    =    foundFormats.get(fmtCount);    	non-compiled	[CE]  ';'  expected	55	None	replace
84	[BUG]  [BUGGY]  char  c  =  foundFormats.get(pos);  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char  c  =  foundFormats.get(pos);  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  c  =  foundFormats.get(pos);	  char    c    =    foundFormats.get(fmtCount);    	non-compiled	[CE]  ';'  expected	55	None	replace
85	[BUG]  [BUGGY]  char  c  =  foundFormats.get(0);  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char  c  =  foundFormats.get(0);  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  c  =  foundFormats.get(0);	  char    c    =    foundFormats.get(fmtCount);    	non-compiled	[CE]  ';'  expected	55	None	replace
86	[BUG]  [BUGGY]  char  c  =  foundFormats.get(fmtCount  +  1);  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char  c  =  foundFormats.get(fmtCount  +  1);  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  c  =  foundFormats.get(fmtCount  +  1);	  char    c    =    foundFormats.get(fmtCount);    	non-compiled	[CE]  ';'  expected	55	None	replace
87	[BUG]  [BUGGY]  String  fmtCount  =  findFormats.size();  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  String  fmtCount  =  findFormats.size();  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	String  fmtCount  =  findFormats.size();	  char    fmtCount    =    findFormats.size();    	non-compiled	[CE]  ';'  expected	18	None	replace
88	[BUG]  [BUGGY]  if(pos.getIndex()  >=  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  >=  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  >=  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(pos.getIndex()    <    0)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	67	None	replace
89	[BUG]  [BUGGY]  char  c  =  pattern.charAt(pos  +  1);  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char  c  =  pattern.charAt(pos  +  1);  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  c  =  pattern.charAt(pos  +  1);	  char    c    =    pattern.charAt(pos);    	non-compiled	[CE]  ';'  expected	12	None	replace
90	[BUG]  [BUGGY]  char  c  =  foundFormats.charAt(pos);  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char  c  =  foundFormats.charAt(pos);  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  c  =  foundFormats.charAt(pos);	  char    c    =    pattern.charAt(pos);    	non-compiled	[CE]  ';'  expected	12	None	replace
91	[BUG]  [BUGGY]  char  c  =  pattern.charAt(0);  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char  c  =  pattern.charAt(0);  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  c  =  pattern.charAt(0);	  char    c    =    pattern.charAt(pos);    	non-compiled	[CE]  ';'  expected	12	None	replace
92	[BUG]  [BUGGY]  if(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  >=  0;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  >=  0;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  >=  0;  ++i)  {  stripCustom.append(END_FE);  }	  if(pos.getIndex()    <    fmtCount)    {    for(int    i    =    start;    i    <    0;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	51	None	replace
93	[BUG]  [BUGGY]  if(pos.getIndex()!=  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()!=  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()!=  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }	  if(pos.getIndex()    >=    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FMT);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
94	[BUG]  [BUGGY]  if(!foundDescriptions.isEmpty())  {  if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(!foundDescriptions.isEmpty())  {  if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(!foundDescriptions.isEmpty())  {  if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(format!=    null)    {    for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	57	None	replace
95	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }	  if(format!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(END_FE).append(formatDescription);    }    	non-compiled	[CE]  ';'  expected	63	None	replace
96	[BUG]  [BUGGY]  char[]  c  =  this.pattern.toCharArray();  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char[]  c  =  this.pattern.toCharArray();  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char[]  c  =  this.pattern.toCharArray();	  char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  ';'  expected	11	None	replace
97	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
98	[BUG]  [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT).append(duMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT).append(duMMY_PATTERN);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT).append(duMMY_PATTERN);  }	  if(format!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(START_FMT).append(duMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	69	None	replace
99	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(duMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(duMMY_PATTERN);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(duMMY_PATTERN);  }	  if(format!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(START_FMT).append(duMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	69	None	replace
100	[BUG]  [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(duMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(duMMY_PATTERN);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(duMMY_PATTERN);  }	  if(format!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(START_FMT).append(duMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	69	None	replace
101	[BUG]  [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(QUOTE);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(QUOTE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(QUOTE);  }	  if(format    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(END_FE).append(QUOTE);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
102	[BUG]  [BUGGY]  if(pos.getIndex()  <  0)  {  for(int  i  =  start  +  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  <  0)  {  for(int  i  =  start  +  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  <  0)  {  for(int  i  =  start  +  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }	  if(pos.getIndex()    <    0)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FMT);    }    	non-compiled	[CE]  ';'  expected	68	None	replace
103	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(DUMMY_PATTERN);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(DUMMY_PATTERN);  }	  if(format    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(START_FMT).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
104	[BUG]  [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(DUMMY_PATTERN);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(DUMMY_PATTERN);  }	  if(format    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(START_FMT).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
105	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(DUMMY_PATTERN);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(DUMMY_PATTERN);  }	  if(format    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(START_FMT).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
106	[BUG]  [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                              junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(DUMMY_PATTERN);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(DUMMY_PATTERN);  }	  if(format    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(START_FMT).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
107	[BUG]  [BUGGY]  char  fmtCount  =  findFormat(pattern,  next(pos)+  1);  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char  fmtCount  =  findFormat(pattern,  next(pos)+  1);  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  fmtCount  =  findFormat(pattern,  next(pos)+  1);	  char    fmtCount    =    findFormat(pattern,    next(pos));    	non-compiled	[CE]  ';'  expected	32	None	replace
108	[BUG]  [BUGGY]  char  c  =  toPattern.charAt(pos);  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char  c  =  toPattern.charAt(pos);  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  c  =  toPattern.charAt(pos);	  char    c    =    pattern.charAt(pos);    	non-compiled	[CE]  ';'  expected	12	None	replace
109	[BUG]  [BUGGY]  char  c  =  foundFormats.get(fmtCount  -  1);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char  c  =  foundFormats.get(fmtCount  -  1);  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  c  =  foundFormats.get(fmtCount  -  1);	  char    c    =    foundFormats.get(fmtCount);    	non-compiled	[CE]  ';'  expected	55	None	replace
110	[BUG]  [BUGGY]  char  c  =  foundFormats.get(index);  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char  c  =  foundFormats.get(index);  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  c  =  foundFormats.get(index);	  char    c    =    foundFormats.get(fmtCount);    	non-compiled	[CE]  ';'  expected	55	None	replace
111	[BUG]  [BUGGY]  ArrayList  foundDescriptions  =  new  ArrayList(5);  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  ArrayList  foundDescriptions  =  new  ArrayList(5);  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	ArrayList  foundDescriptions  =  new  ArrayList(5);	  ArrayList    foundDescriptions    =    new    ArrayList();    	non-compiled	[CE]  ';'  expected	56	None	replace
112	[BUG]  [BUGGY]  ArrayList  foundDescriptions  =  new  ArrayList(foundFormats.length);  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  ArrayList  foundDescriptions  =  new  ArrayList(foundFormats.length);  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	ArrayList  foundDescriptions  =  new  ArrayList(foundFormats.length);	  ArrayList    foundDescriptions    =    new    ArrayList();    	non-compiled	[CE]  ';'  expected	56	None	replace
113	[BUG]  [BUGGY]  int  fmtCount  =  findFormat(pattern,  next(pos  +  1)+  1);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  int  fmtCount  =  findFormat(pattern,  next(pos  +  1)+  1);  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	int  fmtCount  =  findFormat(pattern,  next(pos  +  1)+  1);	  int    fmtCount    =    findFormat(pattern,    next(pos    +    1));    	non-compiled	[CE]  ';'  expected	30	None	replace
114	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(QUOTE);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(QUOTE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(QUOTE);  }	  if(format    ==    null)    {    for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN).append(QUOTE);    }    	non-compiled	[CE]  ';'  expected	60	None	replace
115	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(QUOTE).append(END_FE);  }  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(QUOTE).append(END_FE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(QUOTE).append(END_FE);  }	  if(format    ==    null)    {    for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN).append(QUOTE);    }    	non-compiled	[CE]  ';'  expected	60	None	replace
116	[BUG]  [BUGGY]  Validate.isTrue(foundFormats.size()  <  =  mtCount);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  Validate.isTrue(foundFormats.size()  <  =  mtCount);  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Validate.isTrue(foundFormats.size()  <  =  mtCount);	  Validate.isTrue(foundFormats.size()    ==    mtCount);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
117	[BUG]  [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }	  if(format!=    null)    {    for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(END_FE).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	58	None	replace
118	[BUG]  [BUGGY]  char[]  c  =  it.next()  +  1;  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char[]  c  =  it.next()  +  1;  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char[]  c  =  it.next()  +  1;	  char[]    c    =    it.next();    	non-compiled	[CE]  ';'  expected	62	None	replace
119	[BUG]  [BUGGY]  char[]  c  =  it.nextToken();  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char[]  c  =  it.nextToken();  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char[]  c  =  it.nextToken();	  char[]    c    =    it.next();    	non-compiled	[CE]  ';'  expected	62	None	replace
120	[BUG]  [BUGGY]  boolean  fmtCount  =  foundFormats.size();  foundDescriptions.add(format);  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  boolean  fmtCount  =  foundFormats.size();  foundDescriptions.add(format);  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	boolean  fmtCount  =  foundFormats.size();  foundDescriptions.add(format);	  int    fmtCount    =    foundFormats.size();    foundDescriptions.add(format);    	non-compiled	[CE]  ';'  expected	42	None	replace
121	[BUG]  [BUGGY]  if(pos.getIndex()  ==  0)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  ==  0)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FMT);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  ==  0)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FMT);  }	  if(pos.getIndex()    ==    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FMT);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
122	[BUG]  [BUGGY]  if(pos.getIndex()  >=  0)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  >=  0)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FMT);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  >=  0)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FMT);  }	  if(pos.getIndex()    ==    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FMT);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
123	[BUG]  [BUGGY]  if(pos.getIndex()  <  0)  {  for(int  i  =  start  +  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  <  0)  {  for(int  i  =  start  +  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  <  0)  {  for(int  i  =  start  +  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	  if(pos.getIndex()    <    0)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	70	None	replace
124	[BUG]  [BUGGY]  if(pos.getIndex()  >=  0)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  >=  0)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  >=  0)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }	  if(pos.getIndex()    ==    fmtCount)    {    int    fmtCount    =    foundDescriptions.size();    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FMT);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
125	[BUG]  [BUGGY]  if(pos.getIndex()  ==  0)  {  int  fmtCount  =  foundFormats.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  ==  0)  {  int  fmtCount  =  foundFormats.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  ==  0)  {  int  fmtCount  =  foundFormats.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }	  if(pos.getIndex()    ==    fmtCount)    {    int    fmtCount    =    foundDescriptions.size();    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FMT);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
126	[BUG]  [BUGGY]  if(pos.getIndex()  ==  0)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  ==  0)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  ==  0)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(pos.getIndex()    ==    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	43	None	replace
127	[BUG]  [BUGGY]  char[]  c  =  toPattern.split( ", ");  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char[]  c  =  toPattern.split( ", ");  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char[]  c  =  toPattern.split( ", ");	  char[]    c    =    pattern.split(   ",   ");    	non-compiled	[CE]  ';'  expected	13	None	replace
128	[BUG]  [BUGGY]  char[]  c  =  it.split( ",   ");  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char[]  c  =  it.split( ",   ");  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char[]  c  =  it.split( ",   ");	  char[]    c    =    pattern.split(   ",   ");    	non-compiled	[CE]  ';'  expected	13	None	replace
129	[BUG]  [BUGGY]  if(pos.getIndex()  >=  fmtCount)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  >=  fmtCount)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  >=  fmtCount)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FE);  }	  if(pos.getIndex()    <    fmtCount)    {    for(int    i    =    start;    i    <    0;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	51	None	replace
130	[BUG]  [BUGGY]  if(pos.getIndex()  >=  index)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  >=  index)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  >=  index)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	  if(pos.getIndex()    >=    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	37	None	replace
131	[BUG]  [BUGGY]  char  fmtCount  =  parseFormatDescription(pattern,  next(1));  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char  fmtCount  =  parseFormatDescription(pattern,  next(1));  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  fmtCount  =  parseFormatDescription(pattern,  next(1));	  int    fmtCount    =    parseFormatDescription(pattern,    next(0));    	non-compiled	[CE]  ';'  expected	9	None	replace
132	[BUG]  [BUGGY]  Validate.isTrue(foundFormats.size()  ==  2);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  Validate.isTrue(foundFormats.size()  ==  2);  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Validate.isTrue(foundFormats.size()  ==  2);	  Validate.isTrue(foundFormats.size()    ==    1);    	non-compiled	[CE]  ';'  expected	39	None	replace
133	[BUG]  [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }	  if(format    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(END_FE).append(formatDescription);    }    	non-compiled	[CE]  ';'  expected	71	None	replace
134	[BUG]  [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }	  if(format    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	21	None	replace
135	[BUG]  [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(format!=    null)    {    for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	57	None	replace
136	[BUG]  [BUGGY]  if(pos.getIndex()  >=  index)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  >=  index)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  >=  index)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }	  if(pos.getIndex()    >=    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(START_FMT);    }    	non-compiled	[CE]  ';'  expected	29	None	replace
137	[BUG]  [BUGGY]  if(pos.getIndex()  >=  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  >=  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  >=  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }	  if(pos.getIndex()    >=    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(START_FMT);    }    	non-compiled	[CE]  ';'  expected	29	None	replace
138	[BUG]  [BUGGY]  Integer  fmtCount  =  foundFormats.size()  -  1;  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  Integer  fmtCount  =  foundFormats.size()  -  1;  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Integer  fmtCount  =  foundFormats.size()  -  1;	  Integer    fmtCount    =    foundFormats.size();    	non-compiled	[CE]  ';'  expected	19	None	replace
139	[BUG]  [BUGGY]  Integer  fmtCount  =  foundFormats.size()  +  1;  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  Integer  fmtCount  =  foundFormats.size()  +  1;  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Integer  fmtCount  =  foundFormats.size()  +  1;	  Integer    fmtCount    =    foundFormats.size();    	non-compiled	[CE]  ';'  expected	19	None	replace
140	[BUG]  [BUGGY]  char  fmtCount  =  parseFormatDescription(pattern,  next(pos)+  1);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char  fmtCount  =  parseFormatDescription(pattern,  next(pos)+  1);  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  fmtCount  =  parseFormatDescription(pattern,  next(pos)+  1);	  char    fmtCount    =    parseFormatDescription(pattern,    next(pos));    	non-compiled	[CE]  ';'  expected	10	None	replace
141	[BUG]  [BUGGY]  Validate.isTrue(foundFormats.size()  <  =  fmtCount);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  Validate.isTrue(foundFormats.size()  <  =  fmtCount);  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Validate.isTrue(foundFormats.size()  <  =  fmtCount);	  Validate.isTrue(foundFormats.size()    <    fmtCount);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
142	[BUG]  [BUGGY]  if(pos.getIndex()  ==  0)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  ==  0)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  ==  0)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FE);  }	  if(pos.getIndex()    ==    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	36	None	replace
143	[BUG]  [BUGGY]  if(pos.getIndex()  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(FIELD_PATTERN);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(FIELD_PATTERN);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(FIELD_PATTERN);  }	  if(pos.getIndex()    ==    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(START_FMT);    }    	non-compiled	[CE]  ';'  expected	28	None	replace
144	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }	  if(format    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(START_FMT).append(formatDescription);    }    	non-compiled	[CE]  ';'  expected	72	None	replace
145	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(QUOTE).append(formatDescription);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(QUOTE).append(formatDescription);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(QUOTE).append(formatDescription);  }	  if(format    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(START_FMT).append(formatDescription);    }    	non-compiled	[CE]  ';'  expected	72	None	replace
146	[BUG]  [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(formatDescription);  }	  if(format    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(START_FMT).append(formatDescription);    }    	non-compiled	[CE]  ';'  expected	72	None	replace
147	[BUG]  [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(QUOTE).append(formatDescription);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(QUOTE).append(formatDescription);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(QUOTE).append(formatDescription);  }	  if(format    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(START_FMT).append(formatDescription);    }    	non-compiled	[CE]  ';'  expected	72	None	replace
148	[BUG]  [BUGGY]  if(pos.getIndex()  >=  0)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  >=  0)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  >=  0)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	  if(pos.getIndex()    ==    fmtCount)    {    int    fmtCount    =    foundDescriptions.size();    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	38	None	replace
149	[BUG]  [BUGGY]  if(pos.getIndex()  ==  0)  {  int  fmtCount  =  foundFormats.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  ==  0)  {  int  fmtCount  =  foundFormats.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  ==  0)  {  int  fmtCount  =  foundFormats.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	  if(pos.getIndex()    ==    fmtCount)    {    int    fmtCount    =    foundDescriptions.size();    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	38	None	replace
150	[BUG]  [BUGGY]  if(pos.getIndex()  >  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  >  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  >  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	  if(pos.getIndex()    >=    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	37	None	replace
151	[BUG]  [BUGGY]  if(pos.getIndex()  <  fmtCount)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  <  fmtCount)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  <  fmtCount)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	  if(pos.getIndex()    ==    fmtCount)    {    int    fmtCount    =    foundDescriptions.size();    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	38	None	replace
152	[BUG]  [BUGGY]  char  c  =  this.pattern.charAt(pos);  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char  c  =  this.pattern.charAt(pos);  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  c  =  this.pattern.charAt(pos);	  char    c    =    pattern.charAt(pos);    	non-compiled	[CE]  ';'  expected	12	None	replace
153	[BUG]  [BUGGY]  if(format  ==  null)  {  if(pos.getIndex()  ==  fmtCount)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format  ==  null)  {  if(pos.getIndex()  ==  fmtCount)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format  ==  null)  {  if(pos.getIndex()  ==  fmtCount)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }	  if(pos.getIndex()    ==    fmtCount)    {    int    fmtCount    =    foundDescriptions.size();    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FMT);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
154	[BUG]  [BUGGY]  if(pos.getIndex()  <  fmtCount)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  <  fmtCount)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  <  fmtCount)  {  int  fmtCount  =  foundDescriptions.size();  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }	  if(pos.getIndex()    ==    fmtCount)    {    int    fmtCount    =    foundDescriptions.size();    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FMT);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
155	[BUG]  [BUGGY]  char  c  =  this.pattern.charAt(i);  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char  c  =  this.pattern.charAt(i);  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char  c  =  this.pattern.charAt(i);	  char    c    =    pattern.charAt(i);    	non-compiled	[CE]  ';'  expected	14	None	replace
156	[BUG]  [BUGGY]  if(format  >=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format  >=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format  >=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }	  if(format!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(END_FE).append(formatDescription);    }    	non-compiled	[CE]  ';'  expected	63	None	replace
157	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT).append(QUOTE);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT).append(QUOTE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT).append(QUOTE);  }	  if(format!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN).append(QUOTE);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
158	[BUG]  [BUGGY]  Validate.isTrue(foundFormats.size()!=  1);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  Validate.isTrue(foundFormats.size()!=  1);  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Validate.isTrue(foundFormats.size()!=  1);	  Validate.isTrue(foundFormats.size()!=    fmtCount);    	non-compiled	[CE]  ';'  expected	2	None	replace
159	[BUG]  [BUGGY]  Validate.isTrue(foundFormats.size()  <  0);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  Validate.isTrue(foundFormats.size()  <  0);  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Validate.isTrue(foundFormats.size()  <  0);	  Validate.isTrue(foundDescriptions.size()    <    fmtCount);    	non-compiled	[CE]  ';'  expected	61	None	replace
160	[BUG]  [BUGGY]  if(format  >=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format  >=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format  >=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }	  if(format!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(END_FE).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
161	[BUG]  [BUGGY]  if(pos.getIndex()  >=  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  >=  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  >=  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(pos.getIndex()    >=    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	50	None	replace
162	[BUG]  [BUGGY]  if(pos.getIndex()  >  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  >  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  >  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FMT);  }	  if(pos.getIndex()    >=    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FMT);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
163	[BUG]  [BUGGY]  int  fmtCount  =  parseFormat(pattern,  next(pos));  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  int  fmtCount  =  parseFormat(pattern,  next(pos));  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	int  fmtCount  =  parseFormat(pattern,  next(pos));	  int    fmtCount    =    findFormat(c,    next(pos));    	non-compiled	[CE]  ';'  expected	31	None	replace
164	[BUG]  [BUGGY]  Validate.isTrue(foundFormats.size()  ==  length);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  Validate.isTrue(foundFormats.size()  ==  length);  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	Validate.isTrue(foundFormats.size()  ==  length);	  Validate.isTrue(foundFormats.size()    ==    1);    	non-compiled	[CE]  ';'  expected	39	None	replace
165	[BUG]  [BUGGY]  if(format  >=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(QUOTE);  }  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format  >=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(QUOTE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format  >=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(QUOTE);  }	  if(format!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(END_FE).append(QUOTE);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
166	[BUG]  [BUGGY]  if(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  len;  ++i)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  len;  ++i)  {  stripCustom.append(END_FMT);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  len;  ++i)  {  stripCustom.append(END_FMT);  }	  if(pos.getIndex()    <    0)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FMT);    }    	non-compiled	[CE]  ';'  expected	68	None	replace
167	[BUG]  [BUGGY]  if(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  index;  ++i)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  index;  ++i)  {  stripCustom.append(END_FMT);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  index;  ++i)  {  stripCustom.append(END_FMT);  }	  if(pos.getIndex()    <    0)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FMT);    }    	non-compiled	[CE]  ';'  expected	68	None	replace
168	[BUG]  [BUGGY]  ArrayList  foundDescriptions  =  new  ArrayList  <  String>();  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  ArrayList  foundDescriptions  =  new  ArrayList  <  String>();  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	ArrayList  foundDescriptions  =  new  ArrayList  <  String>();	  ArrayList    foundDescriptions    =    new    ArrayList();    	non-compiled	[CE]  ';'  expected	56	None	replace
169	[BUG]  [BUGGY]  if(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FE);  }	  if(pos.getIndex()    <    fmtCount)    {    for(int    i    =    start;    i    <    0;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	51	None	replace
170	[BUG]  [BUGGY]  if(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  =  0;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  =  0;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  =  0;  ++i)  {  stripCustom.append(END_FE);  }	  if(pos.getIndex()    <    fmtCount)    {    for(int    i    =    start;    i    <    0;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
171	[BUG]  [BUGGY]  if(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  len;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  len;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  len;  ++i)  {  stripCustom.append(END_FE);  }	  if(pos.getIndex()    <    0)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	70	None	replace
172	[BUG]  [BUGGY]  if(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  index;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  index;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  index;  ++i)  {  stripCustom.append(END_FE);  }	  if(pos.getIndex()    <    0)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	70	None	replace
173	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(formatDescription);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(formatDescription);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(formatDescription);  }	  if(format    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(START_FMT).append(formatDescription);    }    	non-compiled	[CE]  ';'  expected	72	None	replace
174	[BUG]  [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(formatDescription);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(formatDescription);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(formatDescription);  }	  if(format    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(START_FMT).append(formatDescription);    }    	non-compiled	[CE]  ';'  expected	72	None	replace
175	[BUG]  [BUGGY]  if(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FMT);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FMT);  }	  if(pos.getIndex()    <    fmtCount)    {    for(int    i    =    start;    i    <    0;    ++i)    {    stripCustom.append(END_FMT);    }    	non-compiled	[CE]  ';'  expected	53	None	replace
176	[BUG]  [BUGGY]  if(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  =  0;  ++i)  {  stripCustom.append(END_FMT);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  =  0;  ++i)  {  stripCustom.append(END_FMT);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  =  0;  ++i)  {  stripCustom.append(END_FMT);  }	  if(pos.getIndex()    <    fmtCount)    {    for(int    i    =    start;    i    <    0;    ++i)    {    stripCustom.append(END_FMT);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
177	[BUG]  [BUGGY]  if(pos.getIndex()  >  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(pos.getIndex()  >  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(pos.getIndex()  >  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }	  if(pos.getIndex()    >=    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(START_FMT);    }    	non-compiled	[CE]  ';'  expected	29	None	replace
178	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(QUOTE);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(QUOTE);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(QUOTE);  }	  if(format    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(END_FE).append(QUOTE);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
179	[BUG]  [BUGGY]  char[]  c  =  pattern.toPattern();  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char[]  c  =  pattern.toPattern();  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char[]  c  =  pattern.toPattern();	  char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  ';'  expected	11	None	replace
180	[BUG]  [BUGGY]  char[]  c  =  this.pattern.split( ", ");  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char[]  c  =  this.pattern.split( ", ");  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char[]  c  =  this.pattern.split( ", ");	  char[]    c    =    pattern.split(   ",   ");    	non-compiled	[CE]  ';'  expected	13	None	replace
181	[BUG]  [BUGGY]  int  fmtCount  =  pattern.length();  foundDescriptions.add(format);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  int  fmtCount  =  pattern.length();  foundDescriptions.add(format);  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	int  fmtCount  =  pattern.length();  foundDescriptions.add(format);	  int    fmtCount    =    origFormats.size();    foundDescriptions.add(format);    	non-compiled	[CE]  ';'  expected	41	None	replace
182	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }  [BUGGY]      Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }	  if(format    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(END_FE).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
183	[BUG]  [BUGGY]  char[]  c  =  iterator.next();  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char[]  c  =  iterator.next();  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char[]  c  =  iterator.next();	  char[]    c    =    it.next();    	non-compiled	[CE]  ';'  expected	62	None	replace
184	[BUG]  [BUGGY]  char[]  c  =  it.clone();  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);      [BUGGY]  char[]  c  =  it.clone();  [BUGGY]      if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	183	183	1	replace	char[]  c  =  it.clone();	  char[]    c    =    it.next();    	non-compiled	[CE]  ';'  expected	62	None	replace
