bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  while  (pos.getIndex()  <  fmtCount)  {  while  (pos.getIndex()  <  fmtCount)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while  (pos.getIndex()  <  fmtCount)  {  while  (pos.getIndex()  <  fmtCount)  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while    (pos.getIndex()    <    fmtCount)    {    while  (pos.getIndex()  <  fmtCount)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
2	[BUG]  [BUGGY]  while  (pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while  (pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while    (pos.getIndex()    <    fmtCount)    {    for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  	non-compiled	[CE]  ';'  expected	8	None	add
3	[BUG]  [BUGGY]  while  (pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while  (pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while    (pos.getIndex()    <    fmtCount)    {    for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;	  	non-compiled	[CE]  ';'  expected	8	None	add
4	[BUG]  [BUGGY]  while  (pos.getIndex()  <  fmtCount)  {  char[]  c  =  pattern.toCharArray();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while  (pos.getIndex()  <  fmtCount)  {  char[]  c  =  pattern.toCharArray();  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while    (pos.getIndex()    <    fmtCount)    {    char[]  c  =  pattern.toCharArray();	  	non-compiled	[CE]  ';'  expected	8	None	add
5	[BUG]  [BUGGY]  while  (pos.getIndex()  <  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while  (pos.getIndex()  <  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while    (pos.getIndex()    <    fmtCount)    {    int  fmtCount  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  ';'  expected	8	None	add
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  >=  c.length)  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	while(pos.getIndex()  >=  c.length)  {	  while(pos.getIndex()    <    c.length)    {    	compilable	  [FE]  AssertionFailedError  	22	5	replace
7	[BUG]  [BUGGY]  while(pos.getIndex()  >=  c.length)  {  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  >=  c.length)  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >=  c.length)  {	  while(pos.getIndex()    <    c.length)    {    	compilable	  [FE]  AssertionFailedError  	22	5	replace
8	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  <  c.length  -  1)  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	while(pos.getIndex()  <  c.length  -  1)  {	  while(pos.getIndex()    <    c.length)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	22	2	replace
9	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length  -  1)  {  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  <  c.length  -  1)  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  c.length  -  1)  {	  while(pos.getIndex()    <    c.length)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	22	2	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  ==  c.length)  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	while(pos.getIndex()  ==  c.length)  {	  while(pos.getIndex()    <    c.length)    {    	compilable	  [FE]  AssertionFailedError  	22	5	replace
11	[BUG]  [BUGGY]  while(pos.getIndex()  ==  c.length)  {  [FE]  AssertionFailedError  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  ==  c.length)  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  ==  c.length)  {	  while(pos.getIndex()    <    c.length)    {    	compilable	  [FE]  AssertionFailedError  	22	5	replace
12	[BUG]  [BUGGY]  while  (pos.getIndex()  >=  c.length())  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while  (pos.getIndex()  >=  c.length())  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while  (pos.getIndex()  >=  c.length())  {	  while    (pos.getIndex()    >=    pattern.length())    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
13	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]      pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	        pos.setIndex(fmtCount);    pos.setIndex(fmtCount);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	3	1	add
14	[BUG]  [BUGGY]      pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]      pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	        pos.setIndex(fmtCount);    pos.setIndex(fmtCount);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	3	1	add
15	[BUG]  [BUGGY]      pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.toPattern();  [CE]  orphaned  case  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]      pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.toPattern();  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	        pos.setIndex(fmtCount);    pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.toPattern();	  	non-compiled	[CE]  orphaned  case	3	None	add
16	[BUG]  [BUGGY]      pos.setIndex(fmtCount);  int  fmtCount  =  findIndex(c);  pos.setIndex(fmtCount);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]      pos.setIndex(fmtCount);  int  fmtCount  =  findIndex(c);  pos.setIndex(fmtCount);  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	        pos.setIndex(fmtCount);    int  fmtCount  =  findIndex(c);  pos.setIndex(fmtCount);	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	3	None	add
17	[BUG]  [BUGGY]      pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();  [CE]  orphaned  case  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]      pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	        pos.setIndex(fmtCount);    pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();	  	non-compiled	[CE]  orphaned  case	3	None	add
18	[BUG]  [BUGGY]      pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();  break;  [CE]  orphaned  case  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]      pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();  break;  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	        pos.setIndex(fmtCount);    pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();  break;	  	non-compiled	[CE]  orphaned  case	3	None	add
19	[BUG]  [BUGGY]  while  (pos.getIndex()  >=  pattern.length())  {  while  (pos.getIndex()  >=  pattern.length())  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while  (pos.getIndex()  >=  pattern.length())  {  while  (pos.getIndex()  >=  pattern.length())  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while    (pos.getIndex()    >=    pattern.length())    {    while  (pos.getIndex()  >=  pattern.length())  {	  	non-compiled	[CE]  ';'  expected	10	None	add
20	[BUG]  [BUGGY]  while  (pos.getIndex()  >=  pattern.length())  {  char[]  c  =  pattern.toCharArray();  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while  (pos.getIndex()  >=  pattern.length())  {  char[]  c  =  pattern.toCharArray();  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while    (pos.getIndex()    >=    pattern.length())    {    char[]  c  =  pattern.toCharArray();	  	non-compiled	[CE]  ';'  expected	10	None	add
21	[BUG]  [BUGGY]  while  (pos.getIndex()  >=  pattern.length())  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while  (pos.getIndex()  >=  pattern.length())  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while    (pos.getIndex()    >=    pattern.length())    {    int  fmtCount  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  ';'  expected	10	None	add
22	[BUG]  [BUGGY]  while  (pos.getIndex()  >=  pattern.length())  {  char[]  c  =  pattern.toCharArray();  while  (pos.getIndex()  >=  pattern.length())  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while  (pos.getIndex()  >=  pattern.length())  {  char[]  c  =  pattern.toCharArray();  while  (pos.getIndex()  >=  pattern.length())  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while    (pos.getIndex()    >=    pattern.length())    {    char[]  c  =  pattern.toCharArray();  while  (pos.getIndex()  >=  pattern.length())  {	  	non-compiled	[CE]  ';'  expected	10	None	add
23	[BUG]  [BUGGY]  while  (pos.getIndex()  >=  pattern.length())  {  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while  (pos.getIndex()  >=  pattern.length())  {  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while    (pos.getIndex()    >=    pattern.length())    {    int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);	  	non-compiled	[CE]  ';'  expected	10	None	add
24	[BUG]  [BUGGY]  while(pos.getIndex()  >  pattern.length())  {  while(pos.getIndex()  >  pattern.length())  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  >  pattern.length())  {  while(pos.getIndex()  >  pattern.length())  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >    pattern.length())    {    while(pos.getIndex()  >  pattern.length())  {	  	non-compiled	[CE]  ';'  expected	23	None	add
25	[BUG]  [BUGGY]  while(pos.getIndex()  >  pattern.length())  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  >  pattern.length())  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >    pattern.length())    {    int  fmtCount  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  ';'  expected	23	None	add
26	[BUG]  [BUGGY]  while(pos.getIndex()  >  pattern.length())  {  char[]  c  =  pattern.toCharArray();  while(pos.getIndex()  >  pattern.length())  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  >  pattern.length())  {  char[]  c  =  pattern.toCharArray();  while(pos.getIndex()  >  pattern.length())  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >    pattern.length())    {    char[]  c  =  pattern.toCharArray();  while(pos.getIndex()  >  pattern.length())  {	  	non-compiled	[CE]  ';'  expected	23	None	add
27	[BUG]  [BUGGY]  while(pos.getIndex()  >  pattern.length())  {  for(pos.getIndex()  >  pattern.length())  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  >  pattern.length())  {  for(pos.getIndex()  >  pattern.length())  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >    pattern.length())    {    for(pos.getIndex()  >  pattern.length())  {	  	non-compiled	[CE]  not  a  statement	23	None	add
28	[BUG]  [BUGGY]  while(pos.getIndex()  >  pattern.length())  {  char[]  c  =  pattern.toCharArray();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  >  pattern.length())  {  char[]  c  =  pattern.toCharArray();  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >    pattern.length())    {    char[]  c  =  pattern.toCharArray();	  	non-compiled	[CE]  ';'  expected	23	None	add
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  >  fmtCount)  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	while(pos.getIndex()  >  fmtCount)  {	  while(pos.getIndex()    >    pattern.length())    {    	compilable	  [FE]  AssertionFailedError  	24	5	replace
30	[BUG]  [BUGGY]  while(pos.getIndex()  >  fmtCount)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  >  fmtCount)  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >  fmtCount)  {	  while(pos.getIndex()    >    pattern.length())    {    	compilable	  [FE]  AssertionFailedError  	24	5	replace
31	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while  (pos.getIndex()  >=  fmtCount)  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	while  (pos.getIndex()  >=  fmtCount)  {	  while    (pos.getIndex()    <    fmtCount)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	5	replace
32	[BUG]  [BUGGY]  while  (pos.getIndex()  >=  fmtCount)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while  (pos.getIndex()  >=  fmtCount)  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while  (pos.getIndex()  >=  fmtCount)  {	  while    (pos.getIndex()    <    fmtCount)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	5	replace
33	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos));	      int    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
34	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  pos);  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  pos);  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(c,  pos);	      int    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
35	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start);  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start);	      int    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
36	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index);  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index);	      int    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
37	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  start,  foundDescriptions,  0,  fmtCount);  }  [CE]  cannot  find  symbol  start  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  start,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  start,  foundDescriptions,  0,  fmtCount);  }	      if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    start,    foundDescriptions,    0,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol  start	15	None	replace
38	[BUG]  [BUGGY]  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  start,  foundDescriptions,  0,  fmtCount);  }  [CE]  cannot  find  symbol  start  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  start,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  start,  foundDescriptions,  0,  fmtCount);  }	      if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    start,    foundDescriptions,    0,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol  start	15	None	replace
39	[BUG]  [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  start,  foundDescriptions,  0,  fmtCount);  }  [CE]  cannot  find  symbol  start  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  start,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  start,  foundDescriptions,  0,  fmtCount);  }	      if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    start,    foundDescriptions,    0,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol  start	15	None	replace
40	[BUG]  [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  it.next();  }  [CE]  incompatible  types  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  it.next();  }  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  it.next();  }	      if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  incompatible  types	13	None	replace
41	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  it.next();  }  [CE]  incompatible  types  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  it.next();  }  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  it.next();  }	      if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  incompatible  types	13	None	replace
42	[BUG]  [BUGGY]  char[]  c  =  foundDescriptions.toCharArray();  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  char[]  c  =  foundDescriptions.toCharArray();  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char[]  c  =  foundDescriptions.toCharArray();	      if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
43	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index);  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index);	      int    fmtCount    =    readArgumentIndex(pattern,    start,    pos);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
44	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  pos);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  pos);  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  pos);	      int    fmtCount    =    readArgumentIndex(pattern,    start,    pos);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
45	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  start);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  start);  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos,  start);	      int    fmtCount    =    readArgumentIndex(pattern,    start,    pos);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
46	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length)  {  char[]  c  =  pattern.toCharArray();  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  <  c.length)  {  char[]  c  =  pattern.toCharArray();  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    <    c.length)    {    char[]  c  =  pattern.toCharArray();	  	non-compiled	[CE]  ';'  expected	21	None	add
47	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length)  {  junit.framework.AssertionFailedError:  toPattern  =  registry.withIndex(c);  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  <  c.length)  {  junit.framework.AssertionFailedError:  toPattern  =  registry.withIndex(c);  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:  toPattern  =  registry.withIndex(c);	  	non-compiled	[CE]  not  a  statement	21	None	add
48	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length)  {  junit.framework.AssertionFailedError:  toPattern  =  registry.createAssertionFailedError();  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  <  c.length)  {  junit.framework.AssertionFailedError:  toPattern  =  registry.createAssertionFailedError();  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:  toPattern  =  registry.createAssertionFailedError();	  	non-compiled	[CE]  not  a  statement	21	None	add
49	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length)  {  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  <  c.length)  {  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);	  	non-compiled	[CE]  not  a  statement	21	None	add
50	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length)  {  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  <  c.length)  {  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);  break;	  	non-compiled	[CE]  not  a  statement	21	None	add
51	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	      if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	16	4	replace
52	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	      if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	16	4	replace
53	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }	      if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	16	4	replace
54	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }	      if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	16	4	replace
55	[BUG]  [BUGGY]  pos.setIndex(fmtCount  +  1);  [CE]  illegal  start  of  type  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  pos.setIndex(fmtCount  +  1);  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(fmtCount  +  1);	      pos.setIndex(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
56	[BUG]  [BUGGY]  pos.setIndex(c);  [CE]  illegal  start  of  type  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  pos.setIndex(c);  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(c);	      pos.setIndex(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
57	[BUG]  [BUGGY]  pos.setIndex(c.length);  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  pos.setIndex(c.length);  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(c.length);	      pos.setIndex(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
58	[BUG]  [BUGGY]  pos.setIndex(fmtCount  -  1);  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  pos.setIndex(fmtCount  -  1);  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(fmtCount  -  1);	      pos.setIndex(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
59	[BUG]  [BUGGY]  char[]  c  =  toPattern.toCharArray();  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  char[]  c  =  toPattern.toCharArray();  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char[]  c  =  toPattern.toCharArray();	      char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
60	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray(fmtCount);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  char[]  c  =  pattern.toCharArray(fmtCount);  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char[]  c  =  pattern.toCharArray(fmtCount);	      char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
61	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray()  +  fmtCount;  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  char[]  c  =  pattern.toCharArray()  +  fmtCount;  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char[]  c  =  pattern.toCharArray()  +  fmtCount;	      char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
62	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.length  -  1;  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  int  fmtCount  =  foundDescriptions.length  -  1;  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  foundDescriptions.length  -  1;	      int    fmtCount    =    foundDescriptions.length;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
63	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.length  +  1;  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  int  fmtCount  =  foundDescriptions.length  +  1;  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  foundDescriptions.length  +  1;	      int    fmtCount    =    foundDescriptions.length;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
64	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.length  -  2;  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  int  fmtCount  =  foundDescriptions.length  -  2;  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  foundDescriptions.length  -  2;	      int    fmtCount    =    foundDescriptions.length;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
65	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  pos.getIndex());  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  pos.getIndex());  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(c,  pos.getIndex());	      int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
66	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1);  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1);	      int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
67	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  +  1);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  +  1);  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  +  1);	      int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
68	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(p,  pos.getIndex());  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  int  fmtCount  =  readArgumentIndex(p,  pos.getIndex());  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(p,  pos.getIndex());	      int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
69	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	      if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	14	4	replace
70	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	      if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	14	4	replace
71	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	      if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    	compilable	  [FE]  AssertionFailedError  	14	5	replace
72	[BUG]  [BUGGY]  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [FE]  AssertionFailedError  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	      if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    	compilable	  [FE]  AssertionFailedError  	14	5	replace
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	      if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    	compilable	  [FE]  AssertionFailedError  	14	5	replace
74	[BUG]  [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [FE]  AssertionFailedError  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	      if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    	compilable	  [FE]  AssertionFailedError  	14	5	replace
75	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  break;  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  break;  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  break;	      int    fmtCount    =    readArgumentIndex(pattern,    pos);    break;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
76	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start);  break;  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start);  break;  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start);  break;	      int    fmtCount    =    readArgumentIndex(pattern,    pos);    break;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
77	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index);  break;  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index);  break;  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index);  break;	      int    fmtCount    =    readArgumentIndex(pattern,    pos);    break;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
78	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  pos);  break;  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  pos);  break;  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(c,  pos);  break;	      int    fmtCount    =    readArgumentIndex(pattern,    pos);    break;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
79	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.size()  -  1;  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  int  fmtCount  =  foundDescriptions.size()  -  1;  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  foundDescriptions.size()  -  1;	      int    fmtCount    =    foundDescriptions.size();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
80	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.size()  +  1;  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  int  fmtCount  =  foundDescriptions.size()  +  1;  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  foundDescriptions.size()  +  1;	      int    fmtCount    =    foundDescriptions.size();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
81	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.size()  -  2;  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  int  fmtCount  =  foundDescriptions.size()  -  2;  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  foundDescriptions.size()  -  2;	      int    fmtCount    =    foundDescriptions.size();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
82	[BUG]  [BUGGY]  while  (pos.getIndex()  <  c.length()  ||  toPattern.getIndex()  <  c.length())  {  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while  (pos.getIndex()  <  c.length()  ||  toPattern.getIndex()  <  c.length())  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while  (pos.getIndex()  <  c.length()  ||  toPattern.getIndex()  <  c.length())  {	  while    (pos.getIndex()    <    c.length())    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
83	[BUG]  [BUGGY]  while  (pos.getIndex()  <  c.length()  ||  c.charAt(pos.getIndex()  -  1)!=  '-')  {  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while  (pos.getIndex()  <  c.length()  ||  c.charAt(pos.getIndex()  -  1)!=  '-')  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while  (pos.getIndex()  <  c.length()  ||  c.charAt(pos.getIndex()  -  1)!=  '-')  {	  while    (pos.getIndex()    <    c.length())    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
84	[BUG]  [BUGGY]  char  fmtCount  =  foundDescriptions.length;  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  char  fmtCount  =  foundDescriptions.length;  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char  fmtCount  =  foundDescriptions.length;	      int    fmtCount    =    findDescriptions.length;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
85	[BUG]  [BUGGY]  char  fmtCount  =  findDescriptions.length;  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  char  fmtCount  =  findDescriptions.length;  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char  fmtCount  =  findDescriptions.length;	      int    fmtCount    =    findDescriptions.length;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
86	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray()  +  1;  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  char[]  c  =  pattern.toCharArray()  +  1;  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char[]  c  =  pattern.toCharArray()  +  1;	      char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
87	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()!=  c.length)  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	while(pos.getIndex()!=  c.length)  {	  while(pos.getIndex()    <    c.length)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	22	1	replace
88	[BUG]  [BUGGY]  while(pos.getIndex()!=  c.length)  {  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()!=  c.length)  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()!=  c.length)  {	  while(pos.getIndex()    <    c.length)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	22	1	replace
89	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos);  break;  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos);  break;  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  pos);  break;	      int    fmtCount    =    readArgumentIndex(pattern,    pos);    break;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
90	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c);  break;  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c);  break;  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c);  break;	      int    fmtCount    =    readArgumentIndex(pattern,    pos);    break;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
91	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()));  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()));  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()));	      int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
92	[BUG]  [BUGGY]  pos.setIndex(i);  [CE]  illegal  start  of  type  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  pos.setIndex(i);  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(i);	      pos.setIndex(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
93	[BUG]  [BUGGY]  pos.setIndex(index);  [CE]  illegal  start  of  type  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  pos.setIndex(index);  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(index);	      pos.setIndex(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
94	[BUG]  [BUGGY]  pos.setIndex(start);  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  pos.setIndex(start);  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(start);	      pos.setIndex(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
95	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos  +  1);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos  +  1);  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  pos  +  1);	      int    fmtCount    =    readArgumentIndex(pattern,    start,    pos);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
96	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos.length);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos.length);  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  pos.length);	      int    fmtCount    =    readArgumentIndex(pattern,    start,    pos);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
97	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end);  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end);  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  end);	      int    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
98	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  foundDescriptions);  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  foundDescriptions);  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos,  foundDescriptions);	      int    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
99	[BUG]  [BUGGY]  while  (c.getIndex()  <  pos.length())  {  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while  (c.getIndex()  <  pos.length())  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while  (c.getIndex()  <  pos.length())  {	  while    (pos.getIndex()    <    c.length())    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
100	[BUG]  [BUGGY]  while  (p.getIndex()  <  c.length())  {  [CE]  cannot  find  symbol  p  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while  (p.getIndex()  <  c.length())  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while  (p.getIndex()  <  c.length())  {	  while    (pos.getIndex()    <    c.length())    {    	non-compiled	[CE]  cannot  find  symbol  p	7	None	replace
101	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	      if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	12	4	replace
102	[BUG]  [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	      if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	12	4	replace
103	[BUG]  [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  start,  foundDescriptions,  0,  fmtCount);  }  [CE]  cannot  find  symbol  start  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  start,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  start,  foundDescriptions,  0,  fmtCount);  }	      if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    start,    foundDescriptions,    0,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol  start	15	None	replace
104	[BUG]  [BUGGY]  while(pos.getIndex()  >  pattern.length())  {  int  index  =  readArgumentIndex(pattern,  pos);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  >  pattern.length())  {  int  index  =  readArgumentIndex(pattern,  pos);  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >    pattern.length())    {    int  index  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  ';'  expected	23	None	add
105	[BUG]  [BUGGY]  while(pos.getIndex()  >  pattern.length())  {  pos.getIndex()  >  pattern.length())  {  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  >  pattern.length())  {  pos.getIndex()  >  pattern.length())  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >    pattern.length())    {    pos.getIndex()  >  pattern.length())  {	  	non-compiled	[CE]  not  a  statement	23	None	add
106	[BUG]  [BUGGY]  while(pos.getIndex()  >  pattern.length())  {  int  index  =  readArgumentIndex(pattern,  start,  pos);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  >  pattern.length())  {  int  index  =  readArgumentIndex(pattern,  start,  pos);  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >    pattern.length())    {    int  index  =  readArgumentIndex(pattern,  start,  pos);	  	non-compiled	[CE]  ';'  expected	23	None	add
107	[BUG]  [BUGGY]  while  (pos.getIndex()  <  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while  (pos.getIndex()  <  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while    (pos.getIndex()    <    fmtCount)    {    int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());	  	non-compiled	[CE]  ';'  expected	8	None	add
108	[BUG]  [BUGGY]  while  (pos.getIndex()  <  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while  (pos.getIndex()  <  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while    (pos.getIndex()    <    fmtCount)    {    int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);	  	non-compiled	[CE]  ';'  expected	8	None	add
109	[BUG]  [BUGGY]  while  (pos.getIndex()  >=  pattern.length())  {  char  c  =  pattern.charAt(pos.getIndex());  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while  (pos.getIndex()  >=  pattern.length())  {  char  c  =  pattern.charAt(pos.getIndex());  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while    (pos.getIndex()    >=    pattern.length())    {    char  c  =  pattern.charAt(pos.getIndex());	  	non-compiled	[CE]  ';'  expected	10	None	add
110	[BUG]  [BUGGY]  while  (pos.getIndex()  >=  pattern.length())  {  int  pos  =  readIndex(pattern,  start,  fmtCount);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while  (pos.getIndex()  >=  pattern.length())  {  int  pos  =  readIndex(pattern,  start,  fmtCount);  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while    (pos.getIndex()    >=    pattern.length())    {    int  pos  =  readIndex(pattern,  start,  fmtCount);	  	non-compiled	[CE]  ';'  expected	10	None	add
111	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length)  {  junit.framework.AssertionFailedError:  toPattern  =  super.toPattern();  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  <  c.length)  {  junit.framework.AssertionFailedError:  toPattern  =  super.toPattern();  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:  toPattern  =  super.toPattern();	  	non-compiled	[CE]  not  a  statement	21	None	add
112	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length)  {  char  c  =  pattern.toCharArray();  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  <  c.length)  {  char  c  =  pattern.toCharArray();  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    <    c.length)    {    char  c  =  pattern.toCharArray();	  	non-compiled	[CE]  ';'  expected	21	None	add
113	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length)  {  junit.framework.AssertionFailedError:  toPattern  =  it.create();  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  <  c.length)  {  junit.framework.AssertionFailedError:  toPattern  =  it.create();  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:  toPattern  =  it.create();	  	non-compiled	[CE]  not  a  statement	21	None	add
114	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length)  {  char[]  c  =  it.toCharArray();  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  <  c.length)  {  char[]  c  =  it.toCharArray();  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    <    c.length)    {    char[]  c  =  it.toCharArray();	  	non-compiled	[CE]  ';'  expected	21	None	add
115	[BUG]  [BUGGY]      pos.setIndex(fmtCount);  int  fmtCount  =  findFormats.size();  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]      pos.setIndex(fmtCount);  int  fmtCount  =  findFormats.size();  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	        pos.setIndex(fmtCount);    int  fmtCount  =  findFormats.size();	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	3	None	add
116	[BUG]  [BUGGY]      pos.setIndex(fmtCount);  int  fmtCount  =  findDescriptions.size();  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]      pos.setIndex(fmtCount);  int  fmtCount  =  findDescriptions.size();  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	        pos.setIndex(fmtCount);    int  fmtCount  =  findDescriptions.size();	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	3	None	add
117	[BUG]  [BUGGY]      pos.setIndex(fmtCount);  int  fmtCount  =  findDescriptions.length;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]      pos.setIndex(fmtCount);  int  fmtCount  =  findDescriptions.length;  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	        pos.setIndex(fmtCount);    int  fmtCount  =  findDescriptions.length;	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	3	None	add
118	[BUG]  [BUGGY]      pos.setIndex(fmtCount);  int  fmtCount  =  findFormats.length;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]      pos.setIndex(fmtCount);  int  fmtCount  =  findFormats.length;  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	        pos.setIndex(fmtCount);    int  fmtCount  =  findFormats.length;	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	3	None	add
119	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	      if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	14	4	replace
120	[BUG]  [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	      if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	14	4	replace
121	[BUG]  [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  it.next();  }  [CE]  incompatible  types  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  it.next();  }  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c!=  null  &&  c.length  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  it.next();  }	      if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  incompatible  types	13	None	replace
122	[BUG]  [BUGGY]  if(c!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  Iterator.next();  }  [CE]  non-static  method  next()  cannot  be  referenced  from  a  static  context  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  if(c!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  Iterator.next();  }  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  Iterator.next();  }	      if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  non-static  method  next()  cannot  be  referenced  from  a  static  context	13	None	replace
123	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos,  c);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos,  c);  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  pos,  c);	      int    fmtCount    =    readArgumentIndex(pattern,    start,    pos);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
124	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos,  c.length);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos,  c.length);  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  pos,  c.length);	      int    fmtCount    =    readArgumentIndex(pattern,    start,    pos);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
125	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }	      if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    	compilable	  [FE]  AssertionFailedError  	16	5	replace
126	[BUG]  [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [FE]  AssertionFailedError  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }	      if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    	compilable	  [FE]  AssertionFailedError  	16	5	replace
127	[BUG]  [BUGGY]  while(pos.getIndex()  >  pattern.length())  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  while(pos.getIndex()  >  pattern.length())  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  >  pattern.length())  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  while(pos.getIndex()  >  pattern.length())  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >    pattern.length())    {    int  fmtCount  =  readArgumentIndex(pattern,  pos);  while(pos.getIndex()  >  pattern.length())  {	  	non-compiled	[CE]  ';'  expected	23	None	add
128	[BUG]  [BUGGY]  while(pos.getIndex()  >  pattern.length())  {  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  while(pos.getIndex()  >  pattern.length())  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  >  pattern.length())  {  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  while(pos.getIndex()  >  pattern.length())  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >    pattern.length())    {    int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  while(pos.getIndex()  >  pattern.length())  {	  	non-compiled	[CE]  ';'  expected	23	None	add
129	[BUG]  [BUGGY]  while(pos.getIndex()  >  pattern.length())  {  int  fmtCount  =  readArgumentIndex(pattern.length());  while(pos.getIndex()  >  pattern.length())  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  >  pattern.length())  {  int  fmtCount  =  readArgumentIndex(pattern.length());  while(pos.getIndex()  >  pattern.length())  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >    pattern.length())    {    int  fmtCount  =  readArgumentIndex(pattern.length());  while(pos.getIndex()  >  pattern.length())  {	  	non-compiled	[CE]  ';'  expected	23	None	add
130	[BUG]  [BUGGY]      pos.setIndex(fmtCount);  int  fmtCount  =  readArgumentIndex(pattern,  pos);  pos.setIndex(fmtCount);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]      pos.setIndex(fmtCount);  int  fmtCount  =  readArgumentIndex(pattern,  pos);  pos.setIndex(fmtCount);  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	        pos.setIndex(fmtCount);    int  fmtCount  =  readArgumentIndex(pattern,  pos);  pos.setIndex(fmtCount);	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	3	None	add
131	[BUG]  [BUGGY]      pos.setIndex(fmtCount);  int  fmtCount  =  readArgumentIndex(pattern.length());  pos.setIndex(fmtCount);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]      pos.setIndex(fmtCount);  int  fmtCount  =  readArgumentIndex(pattern.length());  pos.setIndex(fmtCount);  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	        pos.setIndex(fmtCount);    int  fmtCount  =  readArgumentIndex(pattern.length());  pos.setIndex(fmtCount);	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	3	None	add
132	[BUG]  [BUGGY]      pos.setIndex(fmtCount);  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  pos.setIndex(fmtCount);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]      pos.setIndex(fmtCount);  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  pos.setIndex(fmtCount);  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	        pos.setIndex(fmtCount);    int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  pos.setIndex(fmtCount);	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	3	None	add
133	[BUG]  [BUGGY]      pos.setIndex(fmtCount);  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  pos.setIndex(fmtCount);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]      pos.setIndex(fmtCount);  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  pos.setIndex(fmtCount);  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	        pos.setIndex(fmtCount);    int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  pos.setIndex(fmtCount);	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	3	None	add
134	[BUG]  [BUGGY]  while  (pos.getIndex()  >=  pattern.length())  {  int  pos  =  readArgumentIndex(pattern,  pos);  while  (pos.getIndex()  >=  pattern.length())  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while  (pos.getIndex()  >=  pattern.length())  {  int  pos  =  readArgumentIndex(pattern,  pos);  while  (pos.getIndex()  >=  pattern.length())  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while    (pos.getIndex()    >=    pattern.length())    {    int  pos  =  readArgumentIndex(pattern,  pos);  while  (pos.getIndex()  >=  pattern.length())  {	  	non-compiled	[CE]  ';'  expected	10	None	add
135	[BUG]  [BUGGY]  while  (pos.getIndex()  >=  pattern.length())  {  int  pos  =  readArgumentIndex(pattern,  pos.getIndex());  while  (pos.getIndex()  >=  pattern.length())  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while  (pos.getIndex()  >=  pattern.length())  {  int  pos  =  readArgumentIndex(pattern,  pos.getIndex());  while  (pos.getIndex()  >=  pattern.length())  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while    (pos.getIndex()    >=    pattern.length())    {    int  pos  =  readArgumentIndex(pattern,  pos.getIndex());  while  (pos.getIndex()  >=  pattern.length())  {	  	non-compiled	[CE]  ';'  expected	10	None	add
136	[BUG]  [BUGGY]  while  (pos.getIndex()  >=  pattern.length())  {  int  pos  =  readIndex(pattern,  pos);  while  (pos.getIndex()  >=  pattern.length())  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while  (pos.getIndex()  >=  pattern.length())  {  int  pos  =  readIndex(pattern,  pos);  while  (pos.getIndex()  >=  pattern.length())  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while    (pos.getIndex()    >=    pattern.length())    {    int  pos  =  readIndex(pattern,  pos);  while  (pos.getIndex()  >=  pattern.length())  {	  	non-compiled	[CE]  ';'  expected	10	None	add
137	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	      if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	compilable	  [FE]  AssertionFailedError  	12	5	replace
138	[BUG]  [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [FE]  AssertionFailedError  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	      if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	compilable	  [FE]  AssertionFailedError  	12	5	replace
139	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length)  {  while(pos.getIndex()  <  c.length)  {  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  <  c.length)  {  while(pos.getIndex()  <  c.length)  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    <    c.length)    {    while(pos.getIndex()  <  c.length)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
140	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length)  {  char[]  c  =  pattern.toCharArray();  while(pos.getIndex()  <  c.length)  {  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  <  c.length)  {  char[]  c  =  pattern.toCharArray();  while(pos.getIndex()  <  c.length)  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    <    c.length)    {    char[]  c  =  pattern.toCharArray();  while(pos.getIndex()  <  c.length)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
141	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  <  c.length)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    <    c.length)    {    int  fmtCount  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  ';'  expected	21	None	add
142	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  <  c.length)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    <    c.length)    {    int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());	  	non-compiled	[CE]  ';'  expected	21	None	add
143	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c);  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c);  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c);	      int    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
144	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  c);  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  c);  [BUGGY]    while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos,  c);	      int    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
145	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  >  c.length)  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	while(pos.getIndex()  >  c.length)  {	  while(pos.getIndex()    <    c.length)    {    	compilable	  [FE]  AssertionFailedError  	22	5	replace
146	[BUG]  [BUGGY]  while(pos.getIndex()  >  c.length)  {  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  >  c.length)  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >  c.length)  {	  while(pos.getIndex()    <    c.length)    {    	compilable	  [FE]  AssertionFailedError  	22	5	replace
147	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length  ||  c.charAt(pos.getIndex()  -  1)!=  '-')  {  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  <  c.length  ||  c.charAt(pos.getIndex()  -  1)!=  '-')  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  c.length  ||  c.charAt(pos.getIndex()  -  1)!=  '-')  {	  while(pos.getIndex()    <    c.length)    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
148	[BUG]  [BUGGY]  while  (pos.getIndex()  <  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  while  (pos.getIndex()  <  fmtCount)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while  (pos.getIndex()  <  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  while  (pos.getIndex()  <  fmtCount)  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while    (pos.getIndex()    <    fmtCount)    {    int  fmtCount  =  readArgumentIndex(pattern,  pos);  while  (pos.getIndex()  <  fmtCount)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
149	[BUG]  [BUGGY]  while  (pos.getIndex()  <  fmtCount)  {  char[]  c  =  pattern.toCharArray();  while  (pos.getIndex()  <  fmtCount)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while  (pos.getIndex()  <  fmtCount)  {  char[]  c  =  pattern.toCharArray();  while  (pos.getIndex()  <  fmtCount)  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while    (pos.getIndex()    <    fmtCount)    {    char[]  c  =  pattern.toCharArray();  while  (pos.getIndex()  <  fmtCount)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
150	[BUG]  [BUGGY]  while(pos.getIndex()  >  c.length())  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;    [BUGGY]  while(pos.getIndex()  >  c.length())  {  [BUGGY]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >  c.length())  {	  while(pos.getIndex()    >    pattern.length())    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
