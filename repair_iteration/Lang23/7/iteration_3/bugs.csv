bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  while(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [CE]  cannot  find  symbol  start  [FE]          AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }	  while    (pos.getIndex()    <    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  cannot  find  symbol  start	2	None	replace
2	[BUG]  [BUGGY]  while(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  cannot  find  symbol  start  [FE]            AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  while    (pos.getIndex()    <    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  cannot  find  symbol  start	2	None	replace
3	[BUG]  [BUGGY]  while(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  c.length;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  cannot  find  symbol  start  [FE]              AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  c.length;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  fmtCount)  {  for(int  i  =  start;  i  <  c.length;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  while    (pos.getIndex()    <    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  cannot  find  symbol  start	2	None	replace
4	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  start,  foundDescriptions,  0,  fmtCount);  }  [CE]  cannot  find  symbol  start  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  start,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  start,  foundDescriptions,  0,  fmtCount);  }	  if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    start,    foundDescriptions,    0,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol  start	39	None	replace
5	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    	compilable	  [FE]  AssertionFailedError  	54	5	replace
7	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    	compilable	  [FE]  AssertionFailedError  	54	5	replace
8	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }	  if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
9	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.length  /  2;  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  foundDescriptions.length  /  2;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  foundDescriptions.length  /  2;	  int    fmtCount    =    foundDescriptions.length    -    2;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
10	[BUG]  [BUGGY]  pos.setIndex(c);  int  fmtCount  =  findDescriptions.length;  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(c);  int  fmtCount  =  findDescriptions.length;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(c);  int  fmtCount  =  findDescriptions.length;	          pos.setIndex(fmtCount);    int    fmtCount    =    findDescriptions.length;    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
11	[BUG]  [BUGGY]  pos.setIndex(fmtCount);  int  fmtCount  =  foundDescriptions.length;  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(fmtCount);  int  fmtCount  =  foundDescriptions.length;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(fmtCount);  int  fmtCount  =  foundDescriptions.length;	          pos.setIndex(fmtCount);    int    fmtCount    =    findDescriptions.length;    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
12	[BUG]  [BUGGY]  pos.setIndex(index);  int  fmtCount  =  findDescriptions.length;  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(index);  int  fmtCount  =  findDescriptions.length;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(index);  int  fmtCount  =  findDescriptions.length;	          pos.setIndex(fmtCount);    int    fmtCount    =    findDescriptions.length;    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
13	[BUG]  [BUGGY]  char  fmtCount  =  foundDescriptions.size();  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char  fmtCount  =  foundDescriptions.size();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char  fmtCount  =  foundDescriptions.size();	  int    fmtCount    =    foundDescriptions.size()    +    1;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
14	[BUG]  [BUGGY]  Integer  fmtCount  =  foundDescriptions.size();  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  Integer  fmtCount  =  foundDescriptions.size();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	Integer  fmtCount  =  foundDescriptions.size();	  int    fmtCount    =    foundDescriptions.size()    +    1;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
15	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  pos  +  1);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  pos  +  1);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  pos  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos    +    1);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
16	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  1);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  1);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos    +    1);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
17	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos  +  1,  c.length  +  1);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos  +  1,  c.length  +  1);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  pos  +  1,  c.length  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos    +    1);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
18	[BUG]  [BUGGY]  while(pos.getIndex()  >  c.length)  {  while(pos.getIndex()  >  c.length)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  c.length)  {  while(pos.getIndex()  >  c.length)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >    c.length)    {    while(pos.getIndex()  >  c.length)  {	  	non-compiled	[CE]  ';'  expected	145	None	add
19	[BUG]  [BUGGY]  while(pos.getIndex()  >  c.length)  {  char[]  c  =  pattern.toCharArray();  while(pos.getIndex()  >  c.length)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  c.length)  {  char[]  c  =  pattern.toCharArray();  while(pos.getIndex()  >  c.length)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >    c.length)    {    char[]  c  =  pattern.toCharArray();  while(pos.getIndex()  >  c.length)  {	  	non-compiled	[CE]  ';'  expected	145	None	add
20	[BUG]  [BUGGY]  while(pos.getIndex()  >  c.length)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  c.length)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >    c.length)    {    int  fmtCount  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  ';'  expected	145	None	add
21	[BUG]  [BUGGY]  while(pos.getIndex()  >  c.length)  {  char[]  c  =  pattern.toCharArray();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  c.length)  {  char[]  c  =  pattern.toCharArray();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >    c.length)    {    char[]  c  =  pattern.toCharArray();	  	non-compiled	[CE]  ';'  expected	145	None	add
22	[BUG]  [BUGGY]  while(pos.getIndex()  >  c.length)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  c.length)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >    c.length)    {    int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());	  	non-compiled	[CE]  ';'  expected	145	None	add
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	  if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    	compilable	  [FE]  AssertionFailedError  	70	5	replace
24	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	  if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    	compilable	  [FE]  AssertionFailedError  	70	5	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	  if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    	compilable	  [FE]  AssertionFailedError  	70	5	replace
26	[BUG]  [BUGGY]  if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	  if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    	compilable	  [FE]  AssertionFailedError  	70	5	replace
27	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  1,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  1,  fmtCount);  }	  if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	70	4	replace
28	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  1,  fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  1,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  1,  fmtCount);  }	  if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	70	4	replace
29	[BUG]  [BUGGY]  while  (pos.getIndex()  >=  fmtCount)  {  while  (pos.getIndex()  >=  fmtCount)  {  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while  (pos.getIndex()  >=  fmtCount)  {  while  (pos.getIndex()  >=  fmtCount)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while    (pos.getIndex()    >=    fmtCount)    {    while  (pos.getIndex()  >=  fmtCount)  {	  	non-compiled	[CE]  ';'  expected	31	None	add
30	[BUG]  [BUGGY]  while  (pos.getIndex()  >=  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while  (pos.getIndex()  >=  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while    (pos.getIndex()    >=    fmtCount)    {    int  fmtCount  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  ';'  expected	31	None	add
31	[BUG]  [BUGGY]  while  (pos.getIndex()  >=  fmtCount)  {  char[]  c  =  pattern.toCharArray();  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while  (pos.getIndex()  >=  fmtCount)  {  char[]  c  =  pattern.toCharArray();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while    (pos.getIndex()    >=    fmtCount)    {    char[]  c  =  pattern.toCharArray();	  	non-compiled	[CE]  ';'  expected	31	None	add
32	[BUG]  [BUGGY]  while  (pos.getIndex()  >=  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  break;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while  (pos.getIndex()  >=  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  break;  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while    (pos.getIndex()    >=    fmtCount)    {    int  fmtCount  =  readArgumentIndex(pattern,  pos);  break;	  	non-compiled	[CE]  ';'  expected	31	None	add
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }	  if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	compilable	  [FE]  AssertionFailedError  	102	5	replace
34	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }	  if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	compilable	  [FE]  AssertionFailedError  	102	5	replace
35	[BUG]  [BUGGY]  pos  =  readArgumentIndex(pattern,  pos);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos  =  readArgumentIndex(pattern,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos  =  readArgumentIndex(pattern,  pos);	  while    (pos.getIndex()    >=    pattern.length())    {    int    pos    =    readArgumentIndex(pattern,    pos);    while    (pos.getIndex()    >=    pattern.length())    {    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
36	[BUG]  [BUGGY]  int  pos  =  readArgumentIndex(pattern,  pos);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  pos  =  readArgumentIndex(pattern,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  pos  =  readArgumentIndex(pattern,  pos);	  while    (pos.getIndex()    >=    pattern.length())    {    int    pos    =    readArgumentIndex(pattern,    pos);    while    (pos.getIndex()    >=    pattern.length())    {    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
37	[BUG]  [BUGGY]  String[]  c  =  pattern.toCharArray()  +  1;  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  String[]  c  =  pattern.toCharArray()  +  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	String[]  c  =  pattern.toCharArray()  +  1;	  char[]    c    =    pattern.toCharArray()    +    1;    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
38	[BUG]  [BUGGY]  Integer  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  Integer  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	Integer  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());	  while    (pos.getIndex()    <    fmtCount)    {    int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
39	[BUG]  [BUGGY]  while(pos.getIndex()  <  fmtCount)  {  int  fmtCount  =  readArgumentIndex(c,  pos.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  fmtCount)  {  int  fmtCount  =  readArgumentIndex(c,  pos.getIndex());  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  fmtCount)  {  int  fmtCount  =  readArgumentIndex(c,  pos.getIndex());	  while    (pos.getIndex()    <    fmtCount)    {    int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	107	None	replace
40	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());	  while    (pos.getIndex()    <    fmtCount)    {    int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
41	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(c    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
42	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length  -  1)  {  char[]  c  =  pattern.toCharArray();  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length  -  1)  {  char[]  c  =  pattern.toCharArray();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    <    c.length    -    1)    {    char[]  c  =  pattern.toCharArray();	  	non-compiled	[CE]  ';'  expected	8	None	add
43	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length  -  1)  {  junit.framework.AssertionFailedError:  toPattern  =  registry.withIndex(c);  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length  -  1)  {  junit.framework.AssertionFailedError:  toPattern  =  registry.withIndex(c);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    <    c.length    -    1)    {    junit.framework.AssertionFailedError:  toPattern  =  registry.withIndex(c);	  	non-compiled	[CE]  not  a  statement	8	None	add
44	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length  -  1)  {  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length  -  1)  {  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    <    c.length    -    1)    {    junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);	  	non-compiled	[CE]  not  a  statement	8	None	add
45	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length  -  1)  {  junit.framework.AssertionFailedError:  toPattern;  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length  -  1)  {  junit.framework.AssertionFailedError:  toPattern;  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    <    c.length    -    1)    {    junit.framework.AssertionFailedError:  toPattern;	  	non-compiled	[CE]  not  a  statement	8	None	add
46	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length  -  1)  {  junit.framework.AssertionFailedError:  toPattern  =  registry.withIndex(c,  start);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length  -  1)  {  junit.framework.AssertionFailedError:  toPattern  =  registry.withIndex(c,  start);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    <    c.length    -    1)    {    junit.framework.AssertionFailedError:  toPattern  =  registry.withIndex(c,  start);	  	non-compiled	[CE]  not  a  statement	8	None	add
47	[BUG]  [BUGGY]  pos.setIndex(c);  int  fmtCount  =  findDescriptions.size();  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(c);  int  fmtCount  =  findDescriptions.size();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(c);  int  fmtCount  =  findDescriptions.size();	          pos.setIndex(fmtCount);    int    fmtCount    =    findDescriptions.size();    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
48	[BUG]  [BUGGY]  int  fmtCount  =  findDescriptions.size();  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  findDescriptions.size();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  findDescriptions.size();	          pos.setIndex(fmtCount);    int    fmtCount    =    findDescriptions.size();    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
49	[BUG]  [BUGGY]  pos.setIndex(fmtCount);  int  fmtCount  =  foundDescriptions.size();  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(fmtCount);  int  fmtCount  =  foundDescriptions.size();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(fmtCount);  int  fmtCount  =  foundDescriptions.size();	          pos.setIndex(fmtCount);    int    fmtCount    =    findDescriptions.size();    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
50	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  start,  pos,  c.length);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  start,  pos,  c.length);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(c,  start,  pos,  c.length);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos,    c.length);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
51	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos,  c.length  -  1);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos,  c.length  -  1);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  pos,  c.length  -  1);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos,    c.length);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
52	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  pos,  c.length);  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  pos,  c.length);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  pos,  c.length);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos,    c.length);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
53	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos,  c.length  +  1);  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos,  c.length  +  1);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  pos,  c.length  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos,    c.length);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
54	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray(fmtCount  +  1);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char[]  c  =  pattern.toCharArray(fmtCount  +  1);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char[]  c  =  pattern.toCharArray(fmtCount  +  1);	  char[]    c    =    pattern.toCharArray(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
55	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray(start);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char[]  c  =  pattern.toCharArray(start);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char[]  c  =  pattern.toCharArray(start);	  char[]    c    =    pattern.toCharArray(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
56	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray(start,  fmtCount);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char[]  c  =  pattern.toCharArray(start,  fmtCount);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char[]  c  =  pattern.toCharArray(start,  fmtCount);	  char[]    c    =    pattern.toCharArray(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
57	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray(i);  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char[]  c  =  pattern.toCharArray(i);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char[]  c  =  pattern.toCharArray(i);	  char[]    c    =    pattern.toCharArray(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
58	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length  -  2)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	while(pos.getIndex()  <  c.length  -  2)  {	  while(pos.getIndex()    <    c.length    -    1)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	9	2	replace
59	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length  -  2)  {  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length  -  2)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  c.length  -  2)  {	  while(pos.getIndex()    <    c.length    -    1)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	9	2	replace
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >=  c.length  -  1)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	while(pos.getIndex()  >=  c.length  -  1)  {	  while(pos.getIndex()    <    c.length    -    1)    {    	compilable	  [FE]  AssertionFailedError  	9	5	replace
61	[BUG]  [BUGGY]  while(pos.getIndex()  >=  c.length  -  1)  {  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >=  c.length  -  1)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >=  c.length  -  1)  {	  while(pos.getIndex()    <    c.length    -    1)    {    	compilable	  [FE]  AssertionFailedError  	9	5	replace
62	[BUG]  [BUGGY]  for(pos.getIndex()  >  pattern.length())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  for(pos.getIndex()  >  pattern.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	for(pos.getIndex()  >  pattern.length())  {	  while(pos.getIndex()    >    pattern.length())    {    for(pos.getIndex()    >    pattern.length())    {    	non-compiled	[CE]  not  a  statement	27	None	replace
63	[BUG]  [BUGGY]  while(pos.getIndex()  <  pattern.length())  {  for(pos.getIndex()  >  pattern.length())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  pattern.length())  {  for(pos.getIndex()  >  pattern.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  pattern.length())  {  for(pos.getIndex()  >  pattern.length())  {	  while(pos.getIndex()    >    pattern.length())    {    for(pos.getIndex()    >    pattern.length())    {    	non-compiled	[CE]  not  a  statement	27	None	replace
64	[BUG]  [BUGGY]  while(pos.getIndex()  >  pattern.length()  -  1)  {  for(pos.getIndex()  >  pattern.length())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  pattern.length()  -  1)  {  for(pos.getIndex()  >  pattern.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >  pattern.length()  -  1)  {  for(pos.getIndex()  >  pattern.length())  {	  while(pos.getIndex()    >    pattern.length())    {    for(pos.getIndex()    >    pattern.length())    {    	non-compiled	[CE]  not  a  statement	27	None	replace
65	[BUG]  [BUGGY]  while(pos.getIndex()  >  fmtCount)  {  for(pos.getIndex()  >  pattern.length())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  fmtCount)  {  for(pos.getIndex()  >  pattern.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >  fmtCount)  {  for(pos.getIndex()  >  pattern.length())  {	  while(pos.getIndex()    >    pattern.length())    {    for(pos.getIndex()    >    pattern.length())    {    	non-compiled	[CE]  not  a  statement	27	None	replace
66	[BUG]  [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	  	non-compiled	[CE]  ';'  expected	119	None	add
67	[BUG]  [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	  	non-compiled	[CE]  ';'  expected	119	None	add
68	[BUG]  [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	  	non-compiled	[CE]  ';'  expected	119	None	add
69	[BUG]  [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  >>  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  >>  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    if(fmtCount  >>  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	  	non-compiled	[CE]  ';'  expected	119	None	add
70	[BUG]  [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions	  	non-compiled	[CE]  ')'  expected	119	None	add
71	[BUG]  [BUGGY]  char[]  c  =  it.toCharArray();  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char[]  c  =  it.toCharArray();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char[]  c  =  it.toCharArray();	  while(pos.getIndex()    <    c.length)    {    char[]    c    =    it.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
72	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length)  {  for(char[]  c  =  it.toCharArray();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length)  {  for(char[]  c  =  it.toCharArray();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  c.length)  {  for(char[]  c  =  it.toCharArray();	  while(pos.getIndex()    <    c.length)    {    char[]    c    =    it.toCharArray();    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
73	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  	non-compiled	[CE]  ';'  expected	51	None	add
74	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  	non-compiled	[CE]  ';'  expected	51	None	add
75	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  	non-compiled	[CE]  ';'  expected	51	None	add
76	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }	  	non-compiled	[CE]  ';'  expected	51	None	add
77	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  continue;  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  continue;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  continue;  }	  	non-compiled	[CE]  ';'  expected	51	None	add
78	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	  	non-compiled	[CE]  ';'  expected	69	None	add
79	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	  	non-compiled	[CE]  ';'  expected	69	None	add
80	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	  	non-compiled	[CE]  ';'  expected	69	None	add
81	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions	  	non-compiled	[CE]  ')'  expected	69	None	add
82	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  1,  foundDescriptions,  0,  fmtCount);  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  1,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  1,  foundDescriptions,  0,  fmtCount);  }	  	non-compiled	[CE]  ';'  expected	69	None	add
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  c.length  -  1)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	while(pos.getIndex()  >  c.length  -  1)  {	  while(pos.getIndex()    >    c.length)    {    	compilable	  [FE]  AssertionFailedError  	146	5	replace
84	[BUG]  [BUGGY]  while(pos.getIndex()  >  c.length  -  1)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  c.length  -  1)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >  c.length  -  1)  {	  while(pos.getIndex()    >    c.length)    {    	compilable	  [FE]  AssertionFailedError  	146	5	replace
85	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  	non-compiled	[CE]  ';'  expected	53	None	add
86	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }	  	non-compiled	[CE]  ';'  expected	53	None	add
87	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  	non-compiled	[CE]  ';'  expected	53	None	add
88	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  	non-compiled	[CE]  ';'  expected	53	None	add
89	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  start,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  start,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  start,  pos,  stripCustom,  true);  break;  }	  	non-compiled	[CE]  ';'  expected	53	None	add
90	[BUG]  [BUGGY]  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();	          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);    case    END_FE:    toPattern    =    registry.withUTC();    	non-compiled	[CE]  orphaned  case	17	None	replace
91	[BUG]  [BUGGY]  pos.setIndex(c.length);  case  END_FE:  toPattern  =  registry.withUTC();  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(c.length);  case  END_FE:  toPattern  =  registry.withUTC();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(c.length);  case  END_FE:  toPattern  =  registry.withUTC();	          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);    case    END_FE:    toPattern    =    registry.withUTC();    	non-compiled	[CE]  orphaned  case	17	None	replace
92	[BUG]  [BUGGY]  pos.setIndex(fmtCount  +  1);  case  END_FE:  toPattern  =  registry.withUTC();  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(fmtCount  +  1);  case  END_FE:  toPattern  =  registry.withUTC();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(fmtCount  +  1);  case  END_FE:  toPattern  =  registry.withUTC();	          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);    case    END_FE:    toPattern    =    registry.withUTC();    	non-compiled	[CE]  orphaned  case	17	None	replace
93	[BUG]  [BUGGY]  pos.setIndex(c,  fmtCount);  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(c,  fmtCount);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(c,  fmtCount);	  pos.setIndex(c);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
94	[BUG]  [BUGGY]  pos.setIndex(index,  c);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(index,  c);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(index,  c);	  pos.setIndex(c);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
95	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +  1);  break;  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +  1);  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start  +  1);  break;	  int    fmtCount    =    readArgumentIndex(pattern,    start);    break;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
96	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  start);  break;  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  start);  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(c,  start);  break;	  int    fmtCount    =    readArgumentIndex(pattern,    start);    break;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
97	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  pos.getIndex()  -  1);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  pos.getIndex()  -  1);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(c,  pos.getIndex()  -  1);	  int    fmtCount    =    readArgumentIndex(c,    pos.getIndex());    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
98	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  pos.getIndex()  +  1);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  pos.getIndex()  +  1);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(c,  pos.getIndex()  +  1);	  int    fmtCount    =    readArgumentIndex(c,    pos.getIndex());    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
99	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  pattern.getIndex());  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  pattern.getIndex());  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(c,  pattern.getIndex());	  int    fmtCount    =    readArgumentIndex(c,    pos.getIndex());    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
100	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(c,  pos.getIndex());  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char  fmtCount  =  readArgumentIndex(c,  pos.getIndex());  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char  fmtCount  =  readArgumentIndex(c,  pos.getIndex());	  int    fmtCount    =    readArgumentIndex(c,    pos.getIndex());    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
101	[BUG]  [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  	non-compiled	[CE]  ';'  expected	137	None	add
102	[BUG]  [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(c!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(c!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    if(c!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  	non-compiled	[CE]  ';'  expected	137	None	add
103	[BUG]  [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }	  	non-compiled	[CE]  ';'  expected	137	None	add
104	[BUG]  [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);	  	non-compiled	[CE]  ';'  expected	137	None	add
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  1,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  1,  fmtCount);  }	  if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    	compilable	  [FE]  AssertionFailedError  	120	5	replace
106	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  1,  fmtCount);  }  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  1,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  1,  fmtCount);  }	  if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    	compilable	  [FE]  AssertionFailedError  	120	5	replace
107	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  next(pos));  break;  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  next(pos));  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(c,  next(pos));  break;	  int    fmtCount    =    readArgumentIndex(c,    pos);    break;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
108	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(c,  pos);  break;  [CE]  illegal  start  of  type  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char  fmtCount  =  readArgumentIndex(c,  pos);  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char  fmtCount  =  readArgumentIndex(c,  pos);  break;	  int    fmtCount    =    readArgumentIndex(c,    pos);    break;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
109	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.length  -  1  +  1;  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  foundDescriptions.length  -  1  +  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  foundDescriptions.length  -  1  +  1;	  int    fmtCount    =    foundDescriptions.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
110	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.length  -  3;  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  foundDescriptions.length  -  3;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  foundDescriptions.length  -  3;	  int    fmtCount    =    foundDescriptions.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
111	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  pos.setIndex(c);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  pos.setIndex(c);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  pos.setIndex(c);	          pos.setIndex(fmtCount);    int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    pos.setIndex(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
112	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  pos.setIndex(fmtCount);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  pos.setIndex(fmtCount);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  pos.setIndex(fmtCount);	          pos.setIndex(fmtCount);    int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    pos.setIndex(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
113	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  pos.getIndex());  pos.setIndex(fmtCount);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  pos.getIndex());  pos.setIndex(fmtCount);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(c,  pos.getIndex());  pos.setIndex(fmtCount);	          pos.setIndex(fmtCount);    int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    pos.setIndex(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
114	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  index);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  index);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(c,  index);	  int    fmtCount    =    readArgumentIndex(pattern,    index);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
115	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index  +  1);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index  +  1);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    index);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
116	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index  +  2);  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index  +  2);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index  +  2);	  int    fmtCount    =    readArgumentIndex(pattern,    index);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
117	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	  if(c    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
118	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  end);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  end);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(c,  end);	  int    fmtCount    =    readArgumentIndex(pattern,    end);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
119	[BUG]  [BUGGY]  while(pos.getIndex()  >=  c.length)  {  while(pos.getIndex()  >=  c.length)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >=  c.length)  {  while(pos.getIndex()  >=  c.length)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >=    c.length)    {    while(pos.getIndex()  >=  c.length)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
120	[BUG]  [BUGGY]  while(pos.getIndex()  >=  c.length)  {  while(pos.getIndex()!=  c.length)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >=  c.length)  {  while(pos.getIndex()!=  c.length)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >=    c.length)    {    while(pos.getIndex()!=  c.length)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
121	[BUG]  [BUGGY]  while(pos.getIndex()  >=  c.length)  {  for(pos.getIndex()  >=  c.length)  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >=  c.length)  {  for(pos.getIndex()  >=  c.length)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >=    c.length)    {    for(pos.getIndex()  >=  c.length)  {	  	non-compiled	[CE]  not  a  statement	6	None	add
122	[BUG]  [BUGGY]  while(pos.getIndex()  >=  c.length)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >=  c.length)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >=    c.length)    {    int  fmtCount  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  ';'  expected	6	None	add
123	[BUG]  [BUGGY]  while(pos.getIndex()  >=  c.length)  {  char[]  c  =  pattern.toCharArray();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >=  c.length)  {  char[]  c  =  pattern.toCharArray();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >=    c.length)    {    char[]  c  =  pattern.toCharArray();	  	non-compiled	[CE]  ';'  expected	6	None	add
124	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos);  while(pos.getIndex()  <  pattern.length())  {  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos);  while(pos.getIndex()  <  pattern.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos);  while(pos.getIndex()  <  pattern.length())  {	  while(pos.getIndex()    >    pattern.length())    {    int    fmtCount    =    readArgumentIndex(pattern,    pos);    while(pos.getIndex()    >    pattern.length())    {    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	127	None	replace
125	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos);  while(pos.getIndex()  >  pattern.length())  {  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos);  while(pos.getIndex()  >  pattern.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos);  while(pos.getIndex()  >  pattern.length())  {	  while(pos.getIndex()    >    pattern.length())    {    int    fmtCount    =    readArgumentIndex(pattern,    pos);    while(pos.getIndex()    >    pattern.length())    {    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	127	None	replace
126	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);	  while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:    registry.appendQuotedString(pattern,    pos,    stripCustom,    true);    	non-compiled	[CE]  not  a  statement	49	None	replace
127	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  false);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  false);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  false);	  while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:    registry.appendQuotedString(pattern,    pos,    stripCustom,    true);    	non-compiled	[CE]  not  a  statement	49	None	replace
128	[BUG]  [BUGGY]  AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);	  while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:    registry.appendQuotedString(pattern,    pos,    stripCustom,    true);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
129	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos  +  1));  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos  +  1));  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos  +  1));	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
130	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos)+  1);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos)+  1);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos)+  1);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
131	[BUG]  [BUGGY]  pos.setIndex(c.length  -  1);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(c.length  -  1);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(c.length  -  1);	  pos.setIndex(c.length);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
132	[BUG]  [BUGGY]  pos.setIndex(c.length  +  1);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(c.length  +  1);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(c.length  +  1);	  pos.setIndex(c.length);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
133	[BUG]  [BUGGY]  pos.setIndex(c.length,  fmtCount);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(c.length,  fmtCount);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(c.length,  fmtCount);	  pos.setIndex(c.length);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
134	[BUG]  [BUGGY]  Integer  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  Integer  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	Integer  fmtCount  =  readArgumentIndex(pattern,  pos);	  while(pos.getIndex()    <    c.length)    {    int    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
135	[BUG]  [BUGGY]  int  fmtCount  =  pattern.toCharArray();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  pattern.toCharArray();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  pattern.toCharArray();	  while    (pos.getIndex()    <    fmtCount)    {    char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
136	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  toPattern  =  it.create();  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  junit.framework.AssertionFailedError:  toPattern  =  it.create();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	junit.framework.AssertionFailedError:  toPattern  =  it.create();	  while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:    toPattern    =    it.create();    	non-compiled	[CE]  not  a  statement	113	None	replace
137	[BUG]  [BUGGY]  AssertionFailedError:  toPattern  =  it.create();  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  AssertionFailedError:  toPattern  =  it.create();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	AssertionFailedError:  toPattern  =  it.create();	  while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:    toPattern    =    it.create();    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
138	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length)  {  toPattern  =  it.create();  [CE]  cannot  find  symbol  it  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length)  {  toPattern  =  it.create();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  c.length)  {  toPattern  =  it.create();	  while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:    toPattern    =    it.create();    	non-compiled	[CE]  cannot  find  symbol  it	113	None	replace
139	[BUG]  [BUGGY]  ntă.framework.AssertionFailedError:  toPattern  =  it.create();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  ntă.framework.AssertionFailedError:  toPattern  =  it.create();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	ntă.framework.AssertionFailedError:  toPattern  =  it.create();	  while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:    toPattern    =    it.create();    	non-compiled	[CE]  not  a  statement	113	None	replace
140	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c,  fmtCount);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c,  fmtCount);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c,  fmtCount);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos),    c);    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
141	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c,  stripCustom);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c,  stripCustom);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c,  stripCustom);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos),    c);    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
142	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c,  END_FE);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c,  END_FE);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c,  END_FE);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos),    c);    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
143	[BUG]  [BUGGY]  String  fmtCount  =  readArgumentIndex(pattern,  pos);  break;  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  String  fmtCount  =  readArgumentIndex(pattern,  pos);  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	String  fmtCount  =  readArgumentIndex(pattern,  pos);  break;	  char    fmtCount    =    readArgumentIndex(pattern,    pos);    break;    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
144	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  index);  break;  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  index);  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  index);  break;	  char    fmtCount    =    readArgumentIndex(pattern,    pos);    break;    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
145	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos  +  1);  break;  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos  +  1);  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  pos  +  1);  break;	  char    fmtCount    =    readArgumentIndex(pattern,    pos);    break;    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
146	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos));  break;  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos));  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  next(pos));  break;	  char    fmtCount    =    readArgumentIndex(pattern,    pos);    break;    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
147	[BUG]  [BUGGY]  pos  =  readArgumentIndex(pattern,  pos.getIndex());  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos  =  readArgumentIndex(pattern,  pos.getIndex());  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos  =  readArgumentIndex(pattern,  pos.getIndex());	  while    (pos.getIndex()    >=    pattern.length())    {    int    pos    =    readArgumentIndex(pattern,    pos.getIndex());    while    (pos.getIndex()    >=    pattern.length())    {    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
148	[BUG]  [BUGGY]  int  pos  =  readArgumentIndex(pattern,  pos.getIndex());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  pos  =  readArgumentIndex(pattern,  pos.getIndex());  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  pos  =  readArgumentIndex(pattern,  pos.getIndex());	  while    (pos.getIndex()    >=    pattern.length())    {    int    pos    =    readArgumentIndex(pattern,    pos.getIndex());    while    (pos.getIndex()    >=    pattern.length())    {    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
149	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  c.length);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  c.length);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  c.length);	  int    fmtCount    =    readArgumentIndex(pattern,    index,    pos);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
150	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  c);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  c);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  c);	  int    fmtCount    =    readArgumentIndex(pattern,    index,    pos);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
151	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  index,  pos);  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  index,  pos);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(c,  index,  pos);	  int    fmtCount    =    readArgumentIndex(pattern,    index,    pos);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
152	[BUG]  [BUGGY]  Integer  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  Integer  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	Integer  fmtCount  =  readArgumentIndex(pattern,  start,  pos);	  while    (pos.getIndex()    >=    pattern.length())    {    int    fmtCount    =    readArgumentIndex(pattern,    start,    pos);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
153	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  start,  pos);	  while    (pos.getIndex()    >=    pattern.length())    {    int    fmtCount    =    readArgumentIndex(pattern,    start,    pos);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
154	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  0);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  0);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  0);	  while    (pos.getIndex()    >=    pattern.length())    {    int    fmtCount    =    readArgumentIndex(pattern,    start,    pos);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
155	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  start,  foundDescriptions,  0,  fmtCount);  }  [CE]  cannot  find  symbol  start  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  start,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  start,  foundDescriptions,  0,  fmtCount);  }	  if(c    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    start,    foundDescriptions,    0,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol  start	103	None	replace
156	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  fmtCount,  foundDescriptions,  0,  fmtCount);  }  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  fmtCount,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  fmtCount,  foundDescriptions,  0,  fmtCount);  }	  if(c    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    start,    foundDescriptions,    0,    fmtCount);    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
157	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  toPattern  =  registry.withIndex(c);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  junit.framework.AssertionFailedError:  toPattern  =  registry.withIndex(c);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	junit.framework.AssertionFailedError:  toPattern  =  registry.withIndex(c);	  while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:    toPattern    =    registry.withIndex(c);    	non-compiled	[CE]  not  a  statement	47	None	replace
158	[BUG]  [BUGGY]  AssertionFailedError:  toPattern  =  registry.withIndex(c);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  AssertionFailedError:  toPattern  =  registry.withIndex(c);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	AssertionFailedError:  toPattern  =  registry.withIndex(c);	  while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:    toPattern    =    registry.withIndex(c);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
159	[BUG]  [BUGGY]  ntăr.AssertionFailedError:  toPattern  =  registry.withIndex(c);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  ntăr.AssertionFailedError:  toPattern  =  registry.withIndex(c);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	ntăr.AssertionFailedError:  toPattern  =  registry.withIndex(c);	  while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:    toPattern    =    registry.withIndex(c);    	non-compiled	[CE]  not  a  statement	47	None	replace
160	[BUG]  [BUGGY]  ntă.framework.AssertionFailedError:  toPattern  =  registry.withIndex(c);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  ntă.framework.AssertionFailedError:  toPattern  =  registry.withIndex(c);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	ntă.framework.AssertionFailedError:  toPattern  =  registry.withIndex(c);	  while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:    toPattern    =    registry.withIndex(c);    	non-compiled	[CE]  not  a  statement	47	None	replace
161	[BUG]  [BUGGY]  while(pos.getIndex()  ==  c.length)  {  while(pos.getIndex()  ==  c.length)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  ==  c.length)  {  while(pos.getIndex()  ==  c.length)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    ==    c.length)    {    while(pos.getIndex()  ==  c.length)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
162	[BUG]  [BUGGY]  while(pos.getIndex()  ==  c.length)  {  char[]  c  =  pattern.toCharArray();  while(pos.getIndex()  ==  c.length)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  ==  c.length)  {  char[]  c  =  pattern.toCharArray();  while(pos.getIndex()  ==  c.length)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    ==    c.length)    {    char[]  c  =  pattern.toCharArray();  while(pos.getIndex()  ==  c.length)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
163	[BUG]  [BUGGY]  while(pos.getIndex()  ==  c.length)  {  char[]  c  =  pattern.toCharArray();  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  ==  c.length)  {  char[]  c  =  pattern.toCharArray();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    ==    c.length)    {    char[]  c  =  pattern.toCharArray();	  	non-compiled	[CE]  ';'  expected	10	None	add
164	[BUG]  [BUGGY]  while(pos.getIndex()  ==  c.length)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  ==  c.length)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    ==    c.length)    {    int  fmtCount  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  ';'  expected	10	None	add
165	[BUG]  [BUGGY]  while(pos.getIndex()  ==  c.length)  {  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  ==  c.length)  {  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    ==    c.length)    {    int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);	  	non-compiled	[CE]  ';'  expected	10	None	add
166	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(p,  pos.getIndex()  -  1);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(p,  pos.getIndex()  -  1);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(p,  pos.getIndex()  -  1);	  int    fmtCount    =    readArgumentIndex(p,    pos.getIndex());    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
167	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(p,  pos.getIndex());  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char  fmtCount  =  readArgumentIndex(p,  pos.getIndex());  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char  fmtCount  =  readArgumentIndex(p,  pos.getIndex());	  int    fmtCount    =    readArgumentIndex(p,    pos.getIndex());    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
168	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  Iterator.next();  }  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  Iterator.next();  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  Iterator.next();  }	  if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    toPattern    =    Iterator.next();    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
169	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  Iterator.next();  }  [CE]  non-static  method  next()  cannot  be  referenced  from  a  static  context  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  Iterator.next();  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  Iterator.next();  }	  if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    toPattern    =    Iterator.next();    }    	non-compiled	[CE]  non-static  method  next()  cannot  be  referenced  from  a  static  context	122	None	replace
170	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  Iterator.next();  }  [CE]  non-static  method  next()  cannot  be  referenced  from  a  static  context  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  Iterator.next();  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  Iterator.next();  }	  if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    toPattern    =    Iterator.next();    }    	non-compiled	[CE]  non-static  method  next()  cannot  be  referenced  from  a  static  context	122	None	replace
171	[BUG]  [BUGGY]  String  fmtCount  =  foundDescriptions.length;  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  String  fmtCount  =  foundDescriptions.length;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	String  fmtCount  =  foundDescriptions.length;	  char    fmtCount    =    foundDescriptions.length;    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
172	[BUG]  [BUGGY]  char  fmtCount  =  foundDescriptions.length  +  1;  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char  fmtCount  =  foundDescriptions.length  +  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char  fmtCount  =  foundDescriptions.length  +  1;	  char    fmtCount    =    foundDescriptions.length;    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
173	[BUG]  [BUGGY]  while  (pos.getIndex()  <  c.length()  ||  toPattern.getIndex()  >  c.length())  {  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while  (pos.getIndex()  <  c.length()  ||  toPattern.getIndex()  >  c.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while  (pos.getIndex()  <  c.length()  ||  toPattern.getIndex()  >  c.length())  {	  while    (pos.getIndex()    <    c.length()    ||    toPattern.getIndex()    <    c.length())    {    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
174	[BUG]  [BUGGY]  while  (pos.getIndex()  <  c.length()  ||  toPattern.getIndex()  >=  c.length())  {  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while  (pos.getIndex()  <  c.length()  ||  toPattern.getIndex()  >=  c.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while  (pos.getIndex()  <  c.length()  ||  toPattern.getIndex()  >=  c.length())  {	  while    (pos.getIndex()    <    c.length()    ||    toPattern.getIndex()    <    c.length())    {    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
175	[BUG]  [BUGGY]  char  fmtCount  =  foundDescriptions.size()  -  1;  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char  fmtCount  =  foundDescriptions.size()  -  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char  fmtCount  =  foundDescriptions.size()  -  1;	  int    fmtCount    =    foundDescriptions.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
176	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern.length());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern.length());  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern.length());	  while(pos.getIndex()    >    pattern.length())    {    int    fmtCount    =    readArgumentIndex(pattern.length());    while(pos.getIndex()    >    pattern.length())    {    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
177	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern.length());  while(pos.getIndex()  >  pattern.length())  {  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern.length());  while(pos.getIndex()  >  pattern.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern.length());  while(pos.getIndex()  >  pattern.length())  {	  while(pos.getIndex()    >    pattern.length())    {    int    fmtCount    =    readArgumentIndex(pattern.length());    while(pos.getIndex()    >    pattern.length())    {    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	129	None	replace
178	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern.length());  while(pos.getIndex()  <  c.length)  {  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern.length());  while(pos.getIndex()  <  c.length)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern.length());  while(pos.getIndex()  <  c.length)  {	  while(pos.getIndex()    >    pattern.length())    {    int    fmtCount    =    readArgumentIndex(pattern.length());    while(pos.getIndex()    >    pattern.length())    {    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	129	None	replace
179	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray();  while  (pos.getIndex()  <  fmtCount)  {  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]          AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char[]  c  =  pattern.toCharArray();  while  (pos.getIndex()  <  fmtCount)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char[]  c  =  pattern.toCharArray();  while  (pos.getIndex()  <  fmtCount)  {	  while    (pos.getIndex()    <    fmtCount)    {    char[]    c    =    pattern.toCharArray();    while    (pos.getIndex()    <    fmtCount)    {    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	149	None	replace
180	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length)  {  for(char[]  c  =  pattern.toCharArray();  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length)  {  for(char[]  c  =  pattern.toCharArray();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  c.length)  {  for(char[]  c  =  pattern.toCharArray();	  while(pos.getIndex()    <    c.length)    {    char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
181	[BUG]  [BUGGY]  while(pos.getIndex()  <  pattern.length())  {  char[]  c  =  pattern.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  pattern.length())  {  char[]  c  =  pattern.toCharArray();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  pattern.length())  {  char[]  c  =  pattern.toCharArray();	  while(pos.getIndex()    >    pattern.length())    {    char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	28	None	replace
182	[BUG]  [BUGGY]  while(pos.getIndex()  <  pattern.length())  {  for(char[]  c  =  pattern.toCharArray();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  pattern.length())  {  for(char[]  c  =  pattern.toCharArray();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  pattern.length())  {  for(char[]  c  =  pattern.toCharArray();	  while(pos.getIndex()    >    pattern.length())    {    char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
183	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);  break;	  while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:    registry.appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    	non-compiled	[CE]  not  a  statement	50	None	replace
184	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length)  {  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length)  {  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  c.length)  {  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  false);  break;	  while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:    registry.appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    	non-compiled	[CE]  not  a  statement	50	None	replace
185	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  false);  break;	  while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:    registry.appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    	non-compiled	[CE]  not  a  statement	50	None	replace
186	[BUG]  [BUGGY]  pos.getIndex()  =  readArgumentIndex(pattern,  pos);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.getIndex()  =  readArgumentIndex(pattern,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.getIndex()  =  readArgumentIndex(pattern,  pos);	  while    (pos.getIndex()    <    fmtCount)    {    int    fmtCount    =    readArgumentIndex(pattern,    pos);    while    (pos.getIndex()    <    fmtCount)    {    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
187	[BUG]  [BUGGY]  int  c  =  readArgumentIndex(pattern,  pos);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  c  =  readArgumentIndex(pattern,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  c  =  readArgumentIndex(pattern,  pos);	  while    (pos.getIndex()    <    fmtCount)    {    int    fmtCount    =    readArgumentIndex(pattern,    pos);    while    (pos.getIndex()    <    fmtCount)    {    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
188	[BUG]  [BUGGY]  while(pos.getIndex()!=  c.length)  {  char[]  c  =  pattern.toCharArray();  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()!=  c.length)  {  char[]  c  =  pattern.toCharArray();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()!=    c.length)    {    char[]  c  =  pattern.toCharArray();	  	non-compiled	[CE]  ';'  expected	87	None	add
189	[BUG]  [BUGGY]  while(pos.getIndex()!=  c.length)  {  junit.framework.AssertionFailedError:  toPattern  =  registry.withIndex(c);  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()!=  c.length)  {  junit.framework.AssertionFailedError:  toPattern  =  registry.withIndex(c);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()!=    c.length)    {    junit.framework.AssertionFailedError:  toPattern  =  registry.withIndex(c);	  	non-compiled	[CE]  not  a  statement	87	None	add
190	[BUG]  [BUGGY]  while(pos.getIndex()!=  c.length)  {  junit.framework.AssertionFailedError:  toPattern  =  registry.createAssertionFailedError();  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()!=  c.length)  {  junit.framework.AssertionFailedError:  toPattern  =  registry.createAssertionFailedError();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()!=    c.length)    {    junit.framework.AssertionFailedError:  toPattern  =  registry.createAssertionFailedError();	  	non-compiled	[CE]  not  a  statement	87	None	add
191	[BUG]  [BUGGY]  while(pos.getIndex()!=  c.length)  {  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()!=  c.length)  {  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()!=    c.length)    {    junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);	  	non-compiled	[CE]  not  a  statement	87	None	add
192	[BUG]  [BUGGY]  while(pos.getIndex()!=  c.length)  {  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()!=  c.length)  {  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()!=    c.length)    {    junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);  break;	  	non-compiled	[CE]  not  a  statement	87	None	add
193	[BUG]  [BUGGY]  int  index  =  readArgumentIndex(pattern,  start,  pos);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  index  =  readArgumentIndex(pattern,  start,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  index  =  readArgumentIndex(pattern,  start,  pos);	  while(pos.getIndex()    >    pattern.length())    {    int    index    =    readArgumentIndex(pattern,    start,    pos);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
194	[BUG]  [BUGGY]  int  index  =  readArgumentIndex(pattern,  start,  fmtCount);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  index  =  readArgumentIndex(pattern,  start,  fmtCount);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  index  =  readArgumentIndex(pattern,  start,  fmtCount);	  while(pos.getIndex()    >    pattern.length())    {    int    index    =    readArgumentIndex(pattern,    start,    pos);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
195	[BUG]  [BUGGY]  int  index  =  readArgumentIndex(pattern,  pos,  fmtCount);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  index  =  readArgumentIndex(pattern,  pos,  fmtCount);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  index  =  readArgumentIndex(pattern,  pos,  fmtCount);	  while(pos.getIndex()    >    pattern.length())    {    int    index    =    readArgumentIndex(pattern,    start,    pos);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
196	[BUG]  [BUGGY]  Integer  index  =  readArgumentIndex(pattern,  start,  pos);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  Integer  index  =  readArgumentIndex(pattern,  start,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	Integer  index  =  readArgumentIndex(pattern,  start,  pos);	  while(pos.getIndex()    >    pattern.length())    {    int    index    =    readArgumentIndex(pattern,    start,    pos);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
197	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  foundDescriptions);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  foundDescriptions);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  foundDescriptions);	  int    fmtCount    =    readArgumentIndex(pattern,    pos,    foundDescriptions);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
198	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  foundDescriptions,  c);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  foundDescriptions,  c);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos,  foundDescriptions,  c);	  int    fmtCount    =    readArgumentIndex(pattern,    pos,    foundDescriptions);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
199	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  foundDescriptions);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  foundDescriptions);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  foundDescriptions);	  int    fmtCount    =    readArgumentIndex(pattern,    pos,    foundDescriptions);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
200	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  foundDescriptions,  stripCustom);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  foundDescriptions,  stripCustom);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos,  foundDescriptions,  stripCustom);	  int    fmtCount    =    readArgumentIndex(pattern,    pos,    foundDescriptions);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
201	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length  ||  pattern.charAt(pos.getIndex()  -  1)!=  '-')  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	while(pos.getIndex()  <  c.length  ||  pattern.charAt(pos.getIndex()  -  1)!=  '-')  {	  while(pos.getIndex()    <    c.length    ||    c.charAt(pos.getIndex()    -    1)!=    '-')    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	147	5	replace
202	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length  ||  pattern.charAt(pos.getIndex()  -  1)!=  '-')  {  [FE]  ArrayIndexOutOfBoundsException  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length  ||  pattern.charAt(pos.getIndex()  -  1)!=  '-')  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  c.length  ||  pattern.charAt(pos.getIndex()  -  1)!=  '-')  {	  while(pos.getIndex()    <    c.length    ||    c.charAt(pos.getIndex()    -    1)!=    '-')    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	147	5	replace
203	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length  ||  c.charAt(pos,  pos.getIndex()  -  1)!=  '-')  {  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length  ||  c.charAt(pos,  pos.getIndex()  -  1)!=  '-')  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  c.length  ||  c.charAt(pos,  pos.getIndex()  -  1)!=  '-')  {	  while(pos.getIndex()    <    c.length    ||    c.charAt(pos.getIndex()    -    1)!=    '-')    {    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
204	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length  ||  c.charAt(pos.getIndex()  -  1)  ==  '-')  {  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length  ||  c.charAt(pos.getIndex()  -  1)  ==  '-')  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  c.length  ||  c.charAt(pos.getIndex()  -  1)  ==  '-')  {	  while(pos.getIndex()    <    c.length    ||    c.charAt(pos.getIndex()    -    1)!=    '-')    {    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
205	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  toPattern  =  registry.createAssertionFailedError();  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  junit.framework.AssertionFailedError:  toPattern  =  registry.createAssertionFailedError();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	junit.framework.AssertionFailedError:  toPattern  =  registry.createAssertionFailedError();	  while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:    toPattern    =    registry.createAssertionFailedError();    	non-compiled	[CE]  not  a  statement	48	None	replace
206	[BUG]  [BUGGY]  AssertionFailedError:  toPattern  =  registry.createAssertionFailedError();  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  AssertionFailedError:  toPattern  =  registry.createAssertionFailedError();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	AssertionFailedError:  toPattern  =  registry.createAssertionFailedError();	  while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:    toPattern    =    registry.createAssertionFailedError();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
207	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length)  {  toPattern  =  registry.createAssertionFailedError();  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length)  {  toPattern  =  registry.createAssertionFailedError();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  c.length)  {  toPattern  =  registry.createAssertionFailedError();	  while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:    toPattern    =    registry.createAssertionFailedError();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
208	[BUG]  [BUGGY]  ntă.AssertionFailedError:  toPattern  =  registry.createAssertionFailedError();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  ntă.AssertionFailedError:  toPattern  =  registry.createAssertionFailedError();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	ntă.AssertionFailedError:  toPattern  =  registry.createAssertionFailedError();	  while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:    toPattern    =    registry.createAssertionFailedError();    	non-compiled	[CE]  not  a  statement	48	None	replace
209	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  start);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    index);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
210	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  start,  index);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  start,  index);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(c,  start,  index);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    index);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
211	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  2);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  2);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  2);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    index);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
212	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  0)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	while(pos.getIndex()  >  0)  {	  while(pos.getIndex()    >    fmtCount)    {    	compilable	  [FE]  AssertionFailedError  	30	5	replace
213	[BUG]  [BUGGY]  while(pos.getIndex()  >  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  0)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >  0)  {	  while(pos.getIndex()    >    fmtCount)    {    	compilable	  [FE]  AssertionFailedError  	30	5	replace
214	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  fmtCount  -  1)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	while(pos.getIndex()  >  fmtCount  -  1)  {	  while(pos.getIndex()    >    fmtCount)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	5	replace
215	[BUG]  [BUGGY]  while(pos.getIndex()  >  fmtCount  -  1)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  fmtCount  -  1)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >  fmtCount  -  1)  {	  while(pos.getIndex()    >    fmtCount)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	5	replace
216	[BUG]  [BUGGY]  pos.setIndex(c);  int  fmtCount  =  findFormats.length;  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(c);  int  fmtCount  =  findFormats.length;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(c);  int  fmtCount  =  findFormats.length;	          pos.setIndex(fmtCount);    int    fmtCount    =    findFormats.length;    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
217	[BUG]  [BUGGY]  int  fmtCount  =  foundFormats.length;  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  foundFormats.length;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  foundFormats.length;	          pos.setIndex(fmtCount);    int    fmtCount    =    findFormats.length;    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
218	[BUG]  [BUGGY]  pos.setIndex(c);  int  fmtCount  =  foundFormats.length;  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(c);  int  fmtCount  =  foundFormats.length;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(c);  int  fmtCount  =  foundFormats.length;	          pos.setIndex(fmtCount);    int    fmtCount    =    findFormats.length;    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
219	[BUG]  [BUGGY]  while  (pos.getIndex()  <  c.length()  &&  c.charAt(pos.getIndex()  -  1)!=  '-')  {  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while  (pos.getIndex()  <  c.length()  &&  c.charAt(pos.getIndex()  -  1)!=  '-')  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while  (pos.getIndex()  <  c.length()  &&  c.charAt(pos.getIndex()  -  1)!=  '-')  {	  while    (pos.getIndex()    <    c.length()    ||    c.charAt(pos.getIndex()    -    1)!=    '-')    {    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
220	[BUG]  [BUGGY]  while  (pos.getIndex()  <  c.length()  ||  pattern.charAt(pos.getIndex()  -  1)!=  '-')  {  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while  (pos.getIndex()  <  c.length()  ||  pattern.charAt(pos.getIndex()  -  1)!=  '-')  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while  (pos.getIndex()  <  c.length()  ||  pattern.charAt(pos.getIndex()  -  1)!=  '-')  {	  while    (pos.getIndex()    <    c.length()    ||    c.charAt(pos.getIndex()    -    1)!=    '-')    {    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
221	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  null)  {  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	if(c  ==  null)  {  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  }	  if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	compilable	  [FE]  AssertionFailedError  	52	5	replace
222	[BUG]  [BUGGY]  if(c  ==  null)  {  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  }  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  null)  {  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c  ==  null)  {  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  }	  if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	compilable	  [FE]  AssertionFailedError  	52	5	replace
223	[BUG]  [BUGGY]  while  (pos,  c.getIndex()  <  c.length())  {  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while  (pos,  c.getIndex()  <  c.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while  (pos,  c.getIndex()  <  c.length())  {	  while    (c.getIndex()    <    pos.length())    {    	non-compiled	[CE]  ')'  expected	99	None	replace
224	[BUG]  [BUGGY]  while  (posCustom.getIndex()  <  c.length())  {  [CE]  cannot  find  symbol  posCustom  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while  (posCustom.getIndex()  <  c.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while  (posCustom.getIndex()  <  c.length())  {	  while    (c.getIndex()    <    pos.length())    {    	non-compiled	[CE]  cannot  find  symbol  posCustom	99	None	replace
225	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  index);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  index);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos,  index);	  int    fmtCount    =    readArgumentIndex(pattern,    pos,    start);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
226	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  c.length);  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  c.length);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos,  c.length);	  int    fmtCount    =    readArgumentIndex(pattern,    pos,    start);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
227	[BUG]  [BUGGY]  pos.setIndex(fmtCount  -  2);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(fmtCount  -  2);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(fmtCount  -  2);	  pos.setIndex(fmtCount    -    1);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
228	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  pos);	  while    (pos.getIndex()    >=    pattern.length())    {    int    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
229	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray();  while(pos.getIndex()  <  c.length)  {  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char[]  c  =  pattern.toCharArray();  while(pos.getIndex()  <  c.length)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char[]  c  =  pattern.toCharArray();  while(pos.getIndex()  <  c.length)  {	  while(pos.getIndex()    <    c.length)    {    char[]    c    =    pattern.toCharArray();    while(pos.getIndex()    <    c.length)    {    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	140	None	replace
230	[BUG]  [BUGGY]  timeout  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(pos.getIndex()  <  c.length)  {  while(pos.getIndex()  <  c.length)  {  }  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	if(pos.getIndex()  <  c.length)  {  while(pos.getIndex()  <  c.length)  {  }	  while(pos.getIndex()    <    c.length)    {    char[]    c    =    pattern.toCharArray();    while(pos.getIndex()    <    c.length)    {    	compilable	timeout	140	1	replace
231	[BUG]  [BUGGY]  if(pos.getIndex()  <  c.length)  {  while(pos.getIndex()  <  c.length)  {  }  timeout  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(pos.getIndex()  <  c.length)  {  while(pos.getIndex()  <  c.length)  {  }  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(pos.getIndex()  <  c.length)  {  while(pos.getIndex()  <  c.length)  {  }	  while(pos.getIndex()    <    c.length)    {    char[]    c    =    pattern.toCharArray();    while(pos.getIndex()    <    c.length)    {    	compilable	timeout	140	1	replace
232	[BUG]  [BUGGY]  if(pos.getIndex()  <  c.length)  {  while(pos.getIndex()  <  c.length)  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(pos.getIndex()  <  c.length)  {  while(pos.getIndex()  <  c.length)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(pos.getIndex()  <  c.length)  {  while(pos.getIndex()  <  c.length)  {	  while(pos.getIndex()    <    c.length)    {    char[]    c    =    pattern.toCharArray();    while(pos.getIndex()    <    c.length)    {    	non-compiled	[CE]  ';'  expected	140	None	replace
233	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  pattern.length()  -  1)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	while(pos.getIndex()  >  pattern.length()  -  1)  {	  while(pos.getIndex()    >    pattern.length())    {    while(pos.getIndex()    >    pattern.length())    {    	compilable	  [FE]  AssertionFailedError  	24	5	replace
234	[BUG]  [BUGGY]  while(pos.getIndex()  >  pattern.length()  -  1)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  pattern.length()  -  1)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >  pattern.length()  -  1)  {	  while(pos.getIndex()    >    pattern.length())    {    while(pos.getIndex()    >    pattern.length())    {    	compilable	  [FE]  AssertionFailedError  	24	5	replace
235	[BUG]  [BUGGY]  if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  start,  foundDescriptions,  0,  fmtCount);  }  [CE]  cannot  find  symbol  start  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  start,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  start,  foundDescriptions,  0,  fmtCount);  }	  if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    start,    foundDescriptions,    0,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol  start	37	None	replace
236	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  start,  foundDescriptions,  0,  fmtCount);  }  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  start,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  start,  foundDescriptions,  0,  fmtCount);  }	  if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    start,    foundDescriptions,    0,    fmtCount);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
237	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	                pos.setIndex(fmtCount);        pos.setIndex(fmtCount);    pos.setIndex(fmtCount);  pos.setIndex(fmtCount);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	13	1	add
238	[BUG]  [BUGGY]          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	                pos.setIndex(fmtCount);        pos.setIndex(fmtCount);    pos.setIndex(fmtCount);  pos.setIndex(fmtCount);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	13	1	add
239	[BUG]  [BUGGY]          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  pos.setIndex(fmtCount;  [CE]  ')'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  pos.setIndex(fmtCount;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	                pos.setIndex(fmtCount);        pos.setIndex(fmtCount);    pos.setIndex(fmtCount);  pos.setIndex(fmtCount;	  	non-compiled	[CE]  ')'  expected	13	None	add
240	[BUG]  [BUGGY]          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  break;  [CE]  break  outside  switch  or  loop  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	                pos.setIndex(fmtCount);        pos.setIndex(fmtCount);    pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  break;	  	non-compiled	[CE]  break  outside  switch  or  loop	13	None	add
241	[BUG]  [BUGGY]          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);  pos.setIndex(fmtcount);  pos.setIndex(fmtCount);  [CE]  cannot  find  symbol  fmtcount  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);  pos.setIndex(fmtcount);  pos.setIndex(fmtCount);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	                pos.setIndex(fmtCount);        pos.setIndex(fmtCount);    pos.setIndex(fmtcount);  pos.setIndex(fmtCount);	  	non-compiled	[CE]  cannot  find  symbol  fmtcount	13	None	add
242	[BUG]  [BUGGY]          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  pos.setIndex(fmtcount);  [CE]  cannot  find  symbol  fmtcount  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  pos.setIndex(fmtcount);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	                pos.setIndex(fmtCount);        pos.setIndex(fmtCount);    pos.setIndex(fmtCount);  pos.setIndex(fmtcount);	  	non-compiled	[CE]  cannot  find  symbol  fmtcount	13	None	add
243	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  toPattern  =  super.toPattern();  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  junit.framework.AssertionFailedError:  toPattern  =  super.toPattern();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	junit.framework.AssertionFailedError:  toPattern  =  super.toPattern();	  while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:    toPattern    =    super.toPattern();    	non-compiled	[CE]  not  a  statement	111	None	replace
244	[BUG]  [BUGGY]  AssertionFailedError:  toPattern  =  super.toPattern();  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  AssertionFailedError:  toPattern  =  super.toPattern();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	AssertionFailedError:  toPattern  =  super.toPattern();	  while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:    toPattern    =    super.toPattern();    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
245	[BUG]  [BUGGY]  ntă.framework.AssertionFailedError:  toPattern  =  super.toPattern();  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  ntă.framework.AssertionFailedError:  toPattern  =  super.toPattern();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	ntă.framework.AssertionFailedError:  toPattern  =  super.toPattern();	  while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:    toPattern    =    super.toPattern();    	non-compiled	[CE]  not  a  statement	111	None	replace
246	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length)  {  toPattern  =  super.toPattern();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	while(pos.getIndex()  <  c.length)  {  toPattern  =  super.toPattern();	  while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:    toPattern    =    super.toPattern();    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	111	1	replace
247	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length)  {  toPattern  =  super.toPattern();  [FE]  junit.framework.AssertionFailedError:  registry  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length)  {  toPattern  =  super.toPattern();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  c.length)  {  toPattern  =  super.toPattern();	  while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:    toPattern    =    super.toPattern();    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	111	1	replace
248	[BUG]  [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  	non-compiled	[CE]  ';'  expected	101	None	add
249	[BUG]  [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  	non-compiled	[CE]  ';'  expected	101	None	add
250	[BUG]  [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  	non-compiled	[CE]  ';'  expected	101	None	add
251	[BUG]  [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  	non-compiled	[CE]  ';'  expected	101	None	add
252	[BUG]  [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }	  	non-compiled	[CE]  ';'  expected	101	None	add
253	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c,  stripCustom);  break;  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c,  stripCustom);  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c,  stripCustom);  break;	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos),    c);    break;    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
254	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c,  END_FE);  break;  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c,  END_FE);  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c,  END_FE);  break;	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos),    c);    break;    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
255	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c);  break;  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c);  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c);  break;	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos),    c);    break;    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
256	[BUG]  [BUGGY]  pos.setIndex(c.length);  case  END_FE:  toPattern  =  registry.toPattern();  [CE]  orphaned  case  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(c.length);  case  END_FE:  toPattern  =  registry.toPattern();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(c.length);  case  END_FE:  toPattern  =  registry.toPattern();	          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);    case    END_FE:    toPattern    =    registry.toPattern();    	non-compiled	[CE]  orphaned  case	15	None	replace
257	[BUG]  [BUGGY]  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.toPattern();  [CE]  orphaned  case  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.toPattern();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.toPattern();	          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);    case    END_FE:    toPattern    =    registry.toPattern();    	non-compiled	[CE]  orphaned  case	15	None	replace
258	[BUG]  [BUGGY]  pos.setIndex(fmtCount  +  1);  case  END_FE:  toPattern  =  registry.toPattern();  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(fmtCount  +  1);  case  END_FE:  toPattern  =  registry.toPattern();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(fmtCount  +  1);  case  END_FE:  toPattern  =  registry.toPattern();	          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);    case    END_FE:    toPattern    =    registry.toPattern();    	non-compiled	[CE]  orphaned  case	15	None	replace
259	[BUG]  [BUGGY]  pos.setIndex(index);  case  END_FE:  toPattern  =  registry.toPattern();  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(index);  case  END_FE:  toPattern  =  registry.toPattern();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(index);  case  END_FE:  toPattern  =  registry.toPattern();	          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);    case    END_FE:    toPattern    =    registry.toPattern();    	non-compiled	[CE]  orphaned  case	15	None	replace
260	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray();  while  (pos.getIndex()  >=  pattern.length())  {  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char[]  c  =  pattern.toCharArray();  while  (pos.getIndex()  >=  pattern.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char[]  c  =  pattern.toCharArray();  while  (pos.getIndex()  >=  pattern.length())  {	  while    (pos.getIndex()    >=    pattern.length())    {    char[]    c    =    pattern.toCharArray();    while    (pos.getIndex()    >=    pattern.length())    {    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	22	None	replace
261	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray()  +  fmtCount  +  1;  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char[]  c  =  pattern.toCharArray()  +  fmtCount  +  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char[]  c  =  pattern.toCharArray()  +  fmtCount  +  1;	  char[]    c    =    pattern.toCharArray()    +    fmtCount;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
262	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray()  *  fmtCount;  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char[]  c  =  pattern.toCharArray()  *  fmtCount;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char[]  c  =  pattern.toCharArray()  *  fmtCount;	  char[]    c    =    pattern.toCharArray()    +    fmtCount;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
263	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray()  +  fmtCount++;  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char[]  c  =  pattern.toCharArray()  +  fmtCount++;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char[]  c  =  pattern.toCharArray()  +  fmtCount++;	  char[]    c    =    pattern.toCharArray()    +    fmtCount;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
264	[BUG]  [BUGGY]  int  fmtCount  =  foundFormats.size();  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  foundFormats.size();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  foundFormats.size();	          pos.setIndex(fmtCount);    int    fmtCount    =    findFormats.size();    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
265	[BUG]  [BUGGY]  pos.setIndex(c);  int  fmtCount  =  findFormats.size();  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(c);  int  fmtCount  =  findFormats.size();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(c);  int  fmtCount  =  findFormats.size();	          pos.setIndex(fmtCount);    int    fmtCount    =    findFormats.size();    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
266	[BUG]  [BUGGY]  pos.setIndex(c);  int  fmtCount  =  foundFormats.size();  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(c);  int  fmtCount  =  foundFormats.size();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(c);  int  fmtCount  =  foundFormats.size();	          pos.setIndex(fmtCount);    int    fmtCount    =    findFormats.size();    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
267	[BUG]  [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	  	non-compiled	[CE]  ';'  expected	73	None	add
268	[BUG]  [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(c!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(c!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    if(c!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	  	non-compiled	[CE]  ';'  expected	73	None	add
269	[BUG]  [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  If(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  If(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    If(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	  	non-compiled	[CE]  ';'  expected	73	None	add
270	[BUG]  [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  1,  foundDescriptions,  0,  fmtCount);  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  1,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  1,  foundDescriptions,  0,  fmtCount);  }	  	non-compiled	[CE]  ';'  expected	73	None	add
271	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  while(pos.getIndex()  <  pattern.length())  {  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  while(pos.getIndex()  <  pattern.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  while(pos.getIndex()  <  pattern.length())  {	  while(pos.getIndex()    >    pattern.length())    {    int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    while(pos.getIndex()    >    pattern.length())    {    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	128	None	replace
272	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  while(pos.getIndex()  >  pattern.length())  {  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  while(pos.getIndex()  >  pattern.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  while(pos.getIndex()  >  pattern.length())  {	  while(pos.getIndex()    >    pattern.length())    {    int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    while(pos.getIndex()    >    pattern.length())    {    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	128	None	replace
273	[BUG]  [BUGGY]  int  fmtCount  =  findIndex(c);  pos.setIndex(fmtCount);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  findIndex(c);  pos.setIndex(fmtCount);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  findIndex(c);  pos.setIndex(fmtCount);	          pos.setIndex(fmtCount);    int    fmtCount    =    findIndex(c);    pos.setIndex(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
274	[BUG]  [BUGGY]  int  fmtCount  =  findIndex(c,  pos);  pos.setIndex(fmtCount);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  findIndex(c,  pos);  pos.setIndex(fmtCount);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  findIndex(c,  pos);  pos.setIndex(fmtCount);	          pos.setIndex(fmtCount);    int    fmtCount    =    findIndex(c);    pos.setIndex(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
275	[BUG]  [BUGGY]  int  index  =  readArgumentIndex(pattern,  pos);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  index  =  readArgumentIndex(pattern,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  index  =  readArgumentIndex(pattern,  pos);	  while(pos.getIndex()    >    pattern.length())    {    int    index    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
276	[BUG]  [BUGGY]  while(pos.getIndex()  <  pattern.length())  {  int  index  =  readArgumentIndex(pattern,  pos);  [CE]  variable  index  is  already  defined  in  method  applyPattern(String)  [FE]          AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  pattern.length())  {  int  index  =  readArgumentIndex(pattern,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  pattern.length())  {  int  index  =  readArgumentIndex(pattern,  pos);	  while(pos.getIndex()    >    pattern.length())    {    int    index    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  applyPattern(String)	104	None	replace
277	[BUG]  [BUGGY]  while(pos.getIndex()  >=  pattern.length())  {  int  index  =  readArgumentIndex(pattern,  pos);  [CE]  variable  index  is  already  defined  in  method  applyPattern(String)  [FE]            AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >=  pattern.length())  {  int  index  =  readArgumentIndex(pattern,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >=  pattern.length())  {  int  index  =  readArgumentIndex(pattern,  pos);	  while(pos.getIndex()    >    pattern.length())    {    int    index    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  applyPattern(String)	104	None	replace
278	[BUG]  [BUGGY]  while(pos.getIndex()  <  pattern.length())  {  int  index  =  readArgumentIndex(pattern,  fmtCount);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  pattern.length())  {  int  index  =  readArgumentIndex(pattern,  fmtCount);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  pattern.length())  {  int  index  =  readArgumentIndex(pattern,  fmtCount);	  while(pos.getIndex()    >    pattern.length())    {    int    index    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	104	None	replace
279	[BUG]  [BUGGY]  while(pos.getIndex()  >  c.length()  -  1)  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  c.length()  -  1)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >  c.length()  -  1)  {	  while(pos.getIndex()    >    c.length())    {    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
280	[BUG]  [BUGGY]  while(pos.getIndex()  >  fmtCount,  c.length())  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  fmtCount,  c.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >  fmtCount,  c.length())  {	  while(pos.getIndex()    >    c.length())    {    	non-compiled	[CE]  ')'  expected	150	None	replace
281	[BUG]  [BUGGY]  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount!=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	  	non-compiled	[CE]  ';'  expected	71	None	add
282	[BUG]  [BUGGY]  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount!=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	  	non-compiled	[CE]  ';'  expected	71	None	add
283	[BUG]  [BUGGY]  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount!=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	  	non-compiled	[CE]  ';'  expected	71	None	add
284	[BUG]  [BUGGY]  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount!=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions	  	non-compiled	[CE]  ')'  expected	71	None	add
285	[BUG]  [BUGGY]  pos.setIndex(0);  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(0);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(0);	  pos.setIndex(i);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
286	[BUG]  [BUGGY]  pos.setIndex(fmtCount,  i);  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(fmtCount,  i);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(fmtCount,  i);	  pos.setIndex(i);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
287	[BUG]  [BUGGY]  while(pos.getIndex()  >  fmtCount)  {  while(pos.getIndex()  >  fmtCount)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  fmtCount)  {  while(pos.getIndex()  >  fmtCount)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >    fmtCount)    {    while(pos.getIndex()  >  fmtCount)  {	  	non-compiled	[CE]  ';'  expected	29	None	add
288	[BUG]  [BUGGY]  while(pos.getIndex()  >  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >    fmtCount)    {    int  fmtCount  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  ';'  expected	29	None	add
289	[BUG]  [BUGGY]  while(pos.getIndex()  >  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >    fmtCount)    {    int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());	  	non-compiled	[CE]  ';'  expected	29	None	add
290	[BUG]  [BUGGY]  while(pos.getIndex()  >  fmtCount)  {  for(pos.getIndex()  >  fmtCount)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  fmtCount)  {  for(pos.getIndex()  >  fmtCount)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >    fmtCount)    {    for(pos.getIndex()  >  fmtCount)  {	  	non-compiled	[CE]  not  a  statement	29	None	add
291	[BUG]  [BUGGY]  while(pos.getIndex()  >  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >    fmtCount)    {    int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);	  	non-compiled	[CE]  ';'  expected	29	None	add
292	[BUG]  [BUGGY]  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();  break;  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();  break;	          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);    case    END_FE:    toPattern    =    registry.withUTC();    break;    	non-compiled	[CE]  orphaned  case	18	None	replace
293	[BUG]  [BUGGY]  pos.setIndex(c.length);  case  END_FE:  toPattern  =  registry.withUTC();  break;  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(c.length);  case  END_FE:  toPattern  =  registry.withUTC();  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(c.length);  case  END_FE:  toPattern  =  registry.withUTC();  break;	          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);    case    END_FE:    toPattern    =    registry.withUTC();    break;    	non-compiled	[CE]  orphaned  case	18	None	replace
294	[BUG]  [BUGGY]  pos.setIndex(index);  case  END_FE:  toPattern  =  registry.withUTC();  break;  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(index);  case  END_FE:  toPattern  =  registry.withUTC();  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(index);  case  END_FE:  toPattern  =  registry.withUTC();  break;	          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);    case    END_FE:    toPattern    =    registry.withUTC();    break;    	non-compiled	[CE]  orphaned  case	18	None	replace
295	[BUG]  [BUGGY]  while(pos.getIndex()  <  pattern.length())  {  pos.getIndex()  >  pattern.length())  {  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  pattern.length())  {  pos.getIndex()  >  pattern.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  pattern.length())  {  pos.getIndex()  >  pattern.length())  {	  while(pos.getIndex()    >    pattern.length())    {    pos.getIndex()    >    pattern.length())    {    	non-compiled	[CE]  not  a  statement	105	None	replace
296	[BUG]  [BUGGY]  while(pos.getIndex()  >  fmtCount)  {  pos.getIndex()  >  pattern.length())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  fmtCount)  {  pos.getIndex()  >  pattern.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >  fmtCount)  {  pos.getIndex()  >  pattern.length())  {	  while(pos.getIndex()    >    pattern.length())    {    pos.getIndex()    >    pattern.length())    {    	non-compiled	[CE]  not  a  statement	105	None	replace
297	[BUG]  [BUGGY]  while(pos.getIndex()  >  pattern.length()  -  1)  {  pos.getIndex()  >  pattern.length())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  pattern.length()  -  1)  {  pos.getIndex()  >  pattern.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >  pattern.length()  -  1)  {  pos.getIndex()  >  pattern.length())  {	  while(pos.getIndex()    >    pattern.length())    {    pos.getIndex()    >    pattern.length())    {    	non-compiled	[CE]  not  a  statement	105	None	replace
298	[BUG]  [BUGGY]  pos.getIndex()  >  pattern.length())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.getIndex()  >  pattern.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.getIndex()  >  pattern.length())  {	  while(pos.getIndex()    >    pattern.length())    {    pos.getIndex()    >    pattern.length())    {    	non-compiled	[CE]  not  a  statement	105	None	replace
299	[BUG]  [BUGGY]  pos.setIndex(fmtCount  +  2);  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(fmtCount  +  2);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(fmtCount  +  2);	  pos.setIndex(fmtCount    +    1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
300	[BUG]  [BUGGY]  pos.setIndex(fmtCount  +  3);  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(fmtCount  +  3);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(fmtCount  +  3);	  pos.setIndex(fmtCount    +    1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
301	[BUG]  [BUGGY]  pos.setIndex(fmtCount  *  1);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(fmtCount  *  1);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(fmtCount  *  1);	  pos.setIndex(fmtCount    +    1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
302	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length  ||  pos.getIndex()  <  c.length)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	while(pos.getIndex()  <  c.length  ||  pos.getIndex()  <  c.length)  {	  while(pos.getIndex()    <    c.length)    {    while(pos.getIndex()    <    c.length)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	139	1	replace
303	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length  ||  pos.getIndex()  <  c.length)  {  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length  ||  pos.getIndex()  <  c.length)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  c.length  ||  pos.getIndex()  <  c.length)  {	  while(pos.getIndex()    <    c.length)    {    while(pos.getIndex()    <    c.length)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	139	1	replace
304	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos  +  1));  break;  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos  +  1));  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos  +  1));  break;	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    break;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
305	[BUG]  [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  	non-compiled	[CE]  ';'  expected	125	None	add
306	[BUG]  [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }	  	non-compiled	[CE]  ';'  expected	125	None	add
307	[BUG]  [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  if(c!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  if(c!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    if(c!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  	non-compiled	[CE]  ';'  expected	125	None	add
308	[BUG]  [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);	  	non-compiled	[CE]  ';'  expected	125	None	add
309	[BUG]  [BUGGY]  int  pos  =  readIndex(pattern,  pos);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  pos  =  readIndex(pattern,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  pos  =  readIndex(pattern,  pos);	  while    (pos.getIndex()    >=    pattern.length())    {    int    pos    =    readIndex(pattern,    pos);    while    (pos.getIndex()    >=    pattern.length())    {    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
310	[BUG]  [BUGGY]  pos  =  readIndex(pattern,  pos);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos  =  readIndex(pattern,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos  =  readIndex(pattern,  pos);	  while    (pos.getIndex()    >=    pattern.length())    {    int    pos    =    readIndex(pattern,    pos);    while    (pos.getIndex()    >=    pattern.length())    {    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
311	[BUG]  [BUGGY]  char[]  c  =  toPattern.toCharArray(fmtCount);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char[]  c  =  toPattern.toCharArray(fmtCount);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char[]  c  =  toPattern.toCharArray(fmtCount);	  char[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
312	[BUG]  [BUGGY]  char[]  c  =  toPattern.toString();  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char[]  c  =  toPattern.toString();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char[]  c  =  toPattern.toString();	  char[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
313	[BUG]  [BUGGY]  char[]  c  =  foundDescriptions.toCharArray(fmtCount);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char[]  c  =  foundDescriptions.toCharArray(fmtCount);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char[]  c  =  foundDescriptions.toCharArray(fmtCount);	  char[]    c    =    foundDescriptions.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
314	[BUG]  [BUGGY]  String[]  c  =  foundDescriptions.toCharArray();  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  String[]  c  =  foundDescriptions.toCharArray();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	String[]  c  =  foundDescriptions.toCharArray();	  char[]    c    =    foundDescriptions.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
315	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern.length());  pos.setIndex(c);  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern.length());  pos.setIndex(c);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern.length());  pos.setIndex(c);	          pos.setIndex(fmtCount);    int    fmtCount    =    readArgumentIndex(pattern.length());    pos.setIndex(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
316	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c.length());  pos.setIndex(fmtCount);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(c.length());  pos.setIndex(fmtCount);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(c.length());  pos.setIndex(fmtCount);	          pos.setIndex(fmtCount);    int    fmtCount    =    readArgumentIndex(pattern.length());    pos.setIndex(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
317	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(c.getIndex()));  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(c.getIndex()));  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(c.getIndex()));	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos.getIndex()));    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
318	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  next(pos.getIndex()));  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  next(pos.getIndex()));  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(c,  next(pos.getIndex()));	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos.getIndex()));    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
319	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  -  1));  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  -  1));  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  -  1));	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos.getIndex()));    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
320	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()));  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()));  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()));	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos.getIndex()));    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
321	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  +  1);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  +  1);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    +    1);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
322	[BUG]  [BUGGY]  while  (pos.getIndex()!=  c.length())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while  (pos.getIndex()!=  c.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while  (pos.getIndex()!=  c.length())  {	  while    (pos.getIndex()    >=    c.length())    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
323	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  start);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  start);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(c,  start);	  int    fmtCount    =    readArgumentIndex(c,    pos);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
324	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  next(pos));  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  next(pos));  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(c,  next(pos));	  int    fmtCount    =    readArgumentIndex(c,    pos);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
325	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  c.getIndex()  -  1);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  c.getIndex()  -  1);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  c.getIndex()  -  1);	  int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    -    1);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
326	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  pos,  pattern);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  pos,  pattern);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(c,  pos,  pattern);	  int    fmtCount    =    readArgumentIndex(pattern,    pos,    c);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
327	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  c);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  c);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  c);	  int    fmtCount    =    readArgumentIndex(pattern,    pos,    c);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
328	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  c,  fmtCount);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  c,  fmtCount);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos,  c,  fmtCount);	  int    fmtCount    =    readArgumentIndex(pattern,    pos,    c);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
329	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  pos,  c);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  pos,  c);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  pos,  c);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos,    c);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
330	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index,  c);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index,  c);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index,  c);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos,    c);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
331	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos,  c,  END_FE);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos,  c,  END_FE);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  pos,  c,  END_FE);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos,    c);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
332	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +  1);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +  1);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    start);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
333	[BUG]  [BUGGY]  int  pos  =  readIndex(pattern,  start,  fmtCount);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  pos  =  readIndex(pattern,  start,  fmtCount);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  pos  =  readIndex(pattern,  start,  fmtCount);	  while    (pos.getIndex()    >=    pattern.length())    {    int    pos    =    readIndex(pattern,    start,    fmtCount);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
334	[BUG]  [BUGGY]  Integer  pos  =  readIndex(pattern,  start,  fmtCount);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  Integer  pos  =  readIndex(pattern,  start,  fmtCount);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	Integer  pos  =  readIndex(pattern,  start,  fmtCount);	  while    (pos.getIndex()    >=    pattern.length())    {    int    pos    =    readIndex(pattern,    start,    fmtCount);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
335	[BUG]  [BUGGY]  while  (pos.getIndex()  >=  pattern.length())  {  int  pos  =  readIndex(pattern,  start,  fmtCount  +  1);  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]              AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while  (pos.getIndex()  >=  pattern.length())  {  int  pos  =  readIndex(pattern,  start,  fmtCount  +  1);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while  (pos.getIndex()  >=  pattern.length())  {  int  pos  =  readIndex(pattern,  start,  fmtCount  +  1);	  while    (pos.getIndex()    >=    pattern.length())    {    int    pos    =    readIndex(pattern,    start,    fmtCount);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	110	None	replace
336	[BUG]  [BUGGY]  while  (pos.getIndex()  >=  pattern.length())  {  int  pos  =  readIndex(pattern,  start,  0);  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]                AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while  (pos.getIndex()  >=  pattern.length())  {  int  pos  =  readIndex(pattern,  start,  0);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while  (pos.getIndex()  >=  pattern.length())  {  int  pos  =  readIndex(pattern,  start,  0);	  while    (pos.getIndex()    >=    pattern.length())    {    int    pos    =    readIndex(pattern,    start,    fmtCount);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	110	None	replace
337	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.length  +  2;  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  foundDescriptions.length  +  2;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  foundDescriptions.length  +  2;	  int    fmtCount    =    foundDescriptions.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
338	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.length  /  1;  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  foundDescriptions.length  /  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  foundDescriptions.length  /  1;	  int    fmtCount    =    foundDescriptions.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
339	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray();  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char  c  =  pattern.toCharArray();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char  c  =  pattern.toCharArray();	  while(pos.getIndex()    <    c.length)    {    char    c    =    pattern.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
340	[BUG]  [BUGGY]  int  c  =  pattern.toCharArray();  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  c  =  pattern.toCharArray();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  c  =  pattern.toCharArray();	  while(pos.getIndex()    <    c.length)    {    char    c    =    pattern.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
341	[BUG]  [BUGGY]  Char  c  =  pattern.toCharArray();  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  Char  c  =  pattern.toCharArray();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	Char  c  =  pattern.toCharArray();	  while(pos.getIndex()    <    c.length)    {    char    c    =    pattern.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
342	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray();  while(pos.getIndex()  >  fmtCount)  {  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char[]  c  =  pattern.toCharArray();  while(pos.getIndex()  >  fmtCount)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char[]  c  =  pattern.toCharArray();  while(pos.getIndex()  >  fmtCount)  {	  while(pos.getIndex()    >    pattern.length())    {    char[]    c    =    pattern.toCharArray();    while(pos.getIndex()    >    pattern.length())    {    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	26	None	replace
343	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray();  while(pos.getIndex()  <  c.length())  {  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char[]  c  =  pattern.toCharArray();  while(pos.getIndex()  <  c.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char[]  c  =  pattern.toCharArray();  while(pos.getIndex()  <  c.length())  {	  while(pos.getIndex()    >    pattern.length())    {    char[]    c    =    pattern.toCharArray();    while(pos.getIndex()    >    pattern.length())    {    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	26	None	replace
344	[BUG]  [BUGGY]  pos.setIndex(index  +  1);  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(index  +  1);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(index  +  1);	  pos.setIndex(index);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
345	[BUG]  [BUGGY]  char  c  =  pattern.charAt(pos.getIndex());  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char  c  =  pattern.charAt(pos.getIndex());  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char  c  =  pattern.charAt(pos.getIndex());	  while    (pos.getIndex()    >=    pattern.length())    {    char    c    =    pattern.charAt(pos.getIndex());    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
346	[BUG]  [BUGGY]  while(pos.getIndex()  <  fmtCount)  {  char  c  =  pattern.charAt(pos.getIndex());  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]          AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  fmtCount)  {  char  c  =  pattern.charAt(pos.getIndex());  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  fmtCount)  {  char  c  =  pattern.charAt(pos.getIndex());	  while    (pos.getIndex()    >=    pattern.length())    {    char    c    =    pattern.charAt(pos.getIndex());    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	109	None	replace
347	[BUG]  [BUGGY]  Char  c  =  pattern.charAt(pos.getIndex());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  Char  c  =  pattern.charAt(pos.getIndex());  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	Char  c  =  pattern.charAt(pos.getIndex());	  while    (pos.getIndex()    >=    pattern.length())    {    char    c    =    pattern.charAt(pos.getIndex());    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
348	[BUG]  [BUGGY]  int  c  =  pattern.charAt(pos.getIndex());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  c  =  pattern.charAt(pos.getIndex());  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  c  =  pattern.charAt(pos.getIndex());	  while    (pos.getIndex()    >=    pattern.length())    {    char    c    =    pattern.charAt(pos.getIndex());    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
349	[BUG]  [BUGGY]  String  fmtCount  =  findDescriptions.length;  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  String  fmtCount  =  findDescriptions.length;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	String  fmtCount  =  findDescriptions.length;	  char    fmtCount    =    findDescriptions.length;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
350	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  orderedDescriptions,  0,  fmtCount);  }  [CE]  cannot  find  symbol  orderedDescriptions  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  orderedDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  orderedDescriptions,  0,  fmtCount);  }	  if(fmtCount!=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol  orderedDescriptions	72	None	replace
351	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos.length  -  1);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos.length  -  1);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  pos.length  -  1);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos.length);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
352	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  pos.length);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  pos.length);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  pos.length);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos.length);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
353	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  c.length);  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  c.length);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  c.length);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos.length);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
354	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos.length  +  1);  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos.length  +  1);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  pos.length  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos.length);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
355	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos);  pos.setIndex(c);  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos);  pos.setIndex(c);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos);  pos.setIndex(c);	          pos.setIndex(fmtCount);    int    fmtCount    =    readArgumentIndex(pattern,    pos);    pos.setIndex(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
356	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start);  pos.setIndex(fmtCount);  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start);  pos.setIndex(fmtCount);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start);  pos.setIndex(fmtCount);	          pos.setIndex(fmtCount);    int    fmtCount    =    readArgumentIndex(pattern,    pos);    pos.setIndex(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
357	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  it.next();  }  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  it.next();  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  it.next();  }	  if(c!=    null    &&    c.length    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
358	[BUG]  [BUGGY]  char[]  c  =  foundDescriptions.get(c);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char[]  c  =  foundDescriptions.get(c);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char[]  c  =  foundDescriptions.get(c);	  if(c!=    null    &&    c.length    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
359	[BUG]  [BUGGY]  char[]  c  =  foundDescriptions.iterator();  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char[]  c  =  foundDescriptions.iterator();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char[]  c  =  foundDescriptions.iterator();	  if(c    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
360	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index  +  1);  break;  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index  +  1);  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index  +  1);  break;	  int    fmtCount    =    readArgumentIndex(pattern,    index);    break;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
361	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  index);  break;  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  index);  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(c,  index);  break;	  int    fmtCount    =    readArgumentIndex(pattern,    index);    break;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
362	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  pos.setIndex(c);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  pos.setIndex(c);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  pos.setIndex(c);	          pos.setIndex(fmtCount);    int    fmtCount    =    readArgumentIndex(pattern,    start,    pos);    pos.setIndex(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
363	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  c);  pos.setIndex(fmtCount);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  c);  pos.setIndex(fmtCount);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  c);  pos.setIndex(fmtCount);	          pos.setIndex(fmtCount);    int    fmtCount    =    readArgumentIndex(pattern,    start,    pos);    pos.setIndex(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
364	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount  +  1);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount  +  1);  }	  if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	120	4	replace
365	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount  +  1);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount  +  1);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount  +  1);  }	  if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	120	4	replace
366	[BUG]  [BUGGY]  while(pos.getIndex()  >=  pattern.length())  {  for(pos.getIndex()  >  pattern.length())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >=  pattern.length())  {  for(pos.getIndex()  >  pattern.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >=  pattern.length())  {  for(pos.getIndex()  >  pattern.length())  {	  while(pos.getIndex()    >    pattern.length())    {    for(pos.getIndex()    >    pattern.length())    {    	non-compiled	[CE]  not  a  statement	27	None	replace
367	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()!=  fmtCount)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	while(pos.getIndex()!=  fmtCount)  {	  while(pos.getIndex()    >    fmtCount)    {    	compilable	  [FE]  AssertionFailedError  	30	5	replace
368	[BUG]  [BUGGY]  while(pos.getIndex()!=  fmtCount)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()!=  fmtCount)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()!=  fmtCount)  {	  while(pos.getIndex()    >    fmtCount)    {    	compilable	  [FE]  AssertionFailedError  	30	5	replace
369	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	Iterator  <  String>  it  =  foundDescriptions.iterator();	  if(c    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
370	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos  +  1,  c.length);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos  +  1,  c.length);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  pos  +  1,  c.length);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos    +    1);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
371	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos  +  2);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos  +  2);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  pos  +  2);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos    +    1);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
372	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  c  +  1);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  c  +  1);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  c  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos    +    1);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
373	[BUG]  [BUGGY]  if(c!=  null)  {  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c!=  null)  {  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c!=  null)  {  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  ';'  expected	52	None	replace
374	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c!=  null)  {  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	if(c!=  null)  {  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  }	  if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	52	4	replace
375	[BUG]  [BUGGY]  if(c!=  null)  {  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c!=  null)  {  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c!=  null)  {  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  }	  if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	52	4	replace
376	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c  +  1);  break;  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c  +  1);  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c  +  1);  break;	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos),    c);    break;    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
377	[BUG]  [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount	  	non-compiled	[CE]  ')'  expected	73	None	add
378	[BUG]  [BUGGY]  while  (c.getIndex()  >=  pos.length())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while  (c.getIndex()  >=  pos.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while  (c.getIndex()  >=  pos.length())  {	  while    (pos.getIndex()    >=    c.length())    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
379	[BUG]  [BUGGY]  pos.setIndex(start  +  1);  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(start  +  1);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(start  +  1);	  pos.setIndex(fmtCount    +    1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
380	[BUG]  [BUGGY]  pos.setIndex(i  +  1);  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(i  +  1);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(i  +  1);	  pos.setIndex(fmtCount    +    1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
381	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  it.next();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  it.next();  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  it.next();  }	  if(c    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
382	[BUG]  [BUGGY]  char[]  c  =  foundDescriptions.get(fmtCount);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char[]  c  =  foundDescriptions.get(fmtCount);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char[]  c  =  foundDescriptions.get(fmtCount);	  if(c    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
383	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while  (pos.getIndex()  <  0)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	while  (pos.getIndex()  <  0)  {	  while    (pos.getIndex()    <    fmtCount)    {    char[]    c    =    pattern.toCharArray();    while    (pos.getIndex()    <    fmtCount)    {    	compilable	  [FE]  AssertionFailedError  	149	5	replace
384	[BUG]  [BUGGY]  while  (pos.getIndex()  <  0)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while  (pos.getIndex()  <  0)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while  (pos.getIndex()  <  0)  {	  while    (pos.getIndex()    <    fmtCount)    {    char[]    c    =    pattern.toCharArray();    while    (pos.getIndex()    <    fmtCount)    {    	compilable	  [FE]  AssertionFailedError  	149	5	replace
385	[BUG]  [BUGGY]  char[]  c  =  toPattern.toCharArray()  +  1;  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char[]  c  =  toPattern.toCharArray()  +  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char[]  c  =  toPattern.toCharArray()  +  1;	  char[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
386	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern.length());  while(pos.getIndex()  <  pattern.length())  {  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern.length());  while(pos.getIndex()  <  pattern.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern.length());  while(pos.getIndex()  <  pattern.length())  {	  while(pos.getIndex()    >    pattern.length())    {    int    fmtCount    =    readArgumentIndex(pattern.length());    while(pos.getIndex()    >    pattern.length())    {    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	129	None	replace
387	[BUG]  [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  Iterator.next();  }  [CE]  non-static  method  next()  cannot  be  referenced  from  a  static  context  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  Iterator.next();  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  Iterator.next();  }	  if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    toPattern    =    Iterator.next();    }    	non-compiled	[CE]  non-static  method  next()  cannot  be  referenced  from  a  static  context	122	None	replace
388	[BUG]  [BUGGY]  int  index  =  readArgumentIndex(pattern,  pos.getIndex());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  index  =  readArgumentIndex(pattern,  pos.getIndex());  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  index  =  readArgumentIndex(pattern,  pos.getIndex());	  while(pos.getIndex()    >    pattern.length())    {    char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
389	[BUG]  [BUGGY]  while(pos.getIndex()  >=  fmtCount)  {  char  c  =  pattern.charAt(pos.getIndex());  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]        AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >=  fmtCount)  {  char  c  =  pattern.charAt(pos.getIndex());  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >=  fmtCount)  {  char  c  =  pattern.charAt(pos.getIndex());	  while    (pos.getIndex()    >=    pattern.length())    {    char    c    =    pattern.charAt(pos.getIndex());    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	109	None	replace
390	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length())  {  char  c  =  pattern.charAt(pos.getIndex());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length())  {  char  c  =  pattern.charAt(pos.getIndex());  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  c.length())  {  char  c  =  pattern.charAt(pos.getIndex());	  while    (pos.getIndex()    >=    pattern.length())    {    char    c    =    pattern.charAt(pos.getIndex());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
391	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  c,  END_FE);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  c,  END_FE);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos,  c,  END_FE);	  int    fmtCount    =    readArgumentIndex(pattern,    pos,    c);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
392	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  c,  0);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  c,  0);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos,  c,  0);	  int    fmtCount    =    readArgumentIndex(pattern,    pos,    c);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
393	[BUG]  [BUGGY]  pos.setIndex(start);  int  fmtCount  =  findDescriptions.size();  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(start);  int  fmtCount  =  findDescriptions.size();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(start);  int  fmtCount  =  findDescriptions.size();	          pos.setIndex(fmtCount);    int    fmtCount    =    findDescriptions.size();    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
394	[BUG]  [BUGGY]  pos.setIndex(i);  int  fmtCount  =  findDescriptions.size();  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(i);  int  fmtCount  =  findDescriptions.size();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(i);  int  fmtCount  =  findDescriptions.size();	          pos.setIndex(fmtCount);    int    fmtCount    =    findDescriptions.size();    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
395	[BUG]  [BUGGY]  pos.setIndex(index);  int  fmtCount  =  findDescriptions.size();  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(index);  int  fmtCount  =  findDescriptions.size();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(index);  int  fmtCount  =  findDescriptions.size();	          pos.setIndex(fmtCount);    int    fmtCount    =    findDescriptions.size();    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
396	[BUG]  [BUGGY]  int  pos  =  readIndex(pattern,  pos);  while  (pos.getIndex()  >=  pattern.length())  {  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]            AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  pos  =  readIndex(pattern,  pos);  while  (pos.getIndex()  >=  pattern.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  pos  =  readIndex(pattern,  pos);  while  (pos.getIndex()  >=  pattern.length())  {	  while    (pos.getIndex()    >=    pattern.length())    {    int    pos    =    readIndex(pattern,    pos);    while    (pos.getIndex()    >=    pattern.length())    {    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	136	None	replace
397	[BUG]  [BUGGY]  int  pos  =  readIndex(pattern,  pos);  while  (pos.getIndex()  <  pattern.length())  {  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]              AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  pos  =  readIndex(pattern,  pos);  while  (pos.getIndex()  <  pattern.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  pos  =  readIndex(pattern,  pos);  while  (pos.getIndex()  <  pattern.length())  {	  while    (pos.getIndex()    >=    pattern.length())    {    int    pos    =    readIndex(pattern,    pos);    while    (pos.getIndex()    >=    pattern.length())    {    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	136	None	replace
398	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(c));  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(c));  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(c));	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos.getIndex()));    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
399	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  while(pos.getIndex()  >=  pattern.length())  {  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  while(pos.getIndex()  >=  pattern.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  while(pos.getIndex()  >=  pattern.length())  {	  while(pos.getIndex()    >    pattern.length())    {    int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    while(pos.getIndex()    >    pattern.length())    {    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	128	None	replace
400	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos);  while(pos.getIndex()  >=  pattern.length())  {  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos);  while(pos.getIndex()  >=  pattern.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos);  while(pos.getIndex()  >=  pattern.length())  {	  while(pos.getIndex()    >    pattern.length())    {    int    fmtCount    =    readArgumentIndex(pattern,    pos);    while(pos.getIndex()    >    pattern.length())    {    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	127	None	replace
401	[BUG]  [BUGGY]  while(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  cannot  find  symbol  start  [FE]          AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  while    (pos.getIndex()    <    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  cannot  find  symbol  start	2	None	replace
402	[BUG]  [BUGGY]  int  index  =  readArgumentIndex(pattern,  next(pos));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  index  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  index  =  readArgumentIndex(pattern,  next(pos));	  while    (pos.getIndex()    <    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
403	[BUG]  [BUGGY]  char[]  c  =  Pattern.toCharArray();  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char[]  c  =  Pattern.toCharArray();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char[]  c  =  Pattern.toCharArray();	  char[]    c    =    pattern.toCharArray()    +    1;    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
404	[BUG]  [BUGGY]  char[]  c  =  pattern.toCHARArray();  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char[]  c  =  pattern.toCHARArray();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char[]  c  =  pattern.toCHARArray();	  char[]    c    =    pattern.toCharArray()    +    1;    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
405	[BUG]  [BUGGY]  while  (c.getIndex()  <  pos.length()  ||  c.charAt(pos.getIndex()  -  1)!=  '-')  {  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while  (c.getIndex()  <  pos.length()  ||  c.charAt(pos.getIndex()  -  1)!=  '-')  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while  (c.getIndex()  <  pos.length()  ||  c.charAt(pos.getIndex()  -  1)!=  '-')  {	  while    (pos.getIndex()    <    c.length()    ||    c.charAt(pos.getIndex()    -    1)!=    '-')    {    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
406	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  	non-compiled	[CE]  ';'  expected	51	None	add
407	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  AppendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  AppendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  AppendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  	non-compiled	[CE]  ';'  expected	51	None	add
408	[BUG]  [BUGGY]  while(pos.getIndex()  >=  c.length)  {  char[]  c  =  it.toCharArray();  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >=  c.length)  {  char[]  c  =  it.toCharArray();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >=    c.length)    {    char[]  c  =  it.toCharArray();	  	non-compiled	[CE]  ';'  expected	6	None	add
409	[BUG]  [BUGGY]  while(pos.getIndex()  >=  c.length)  {  int  pos  =  readIndex(pattern,  pos);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >=  c.length)  {  int  pos  =  readIndex(pattern,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >=    c.length)    {    int  pos  =  readIndex(pattern,  pos);	  	non-compiled	[CE]  ';'  expected	6	None	add
410	[BUG]  [BUGGY]  while  (c.getIndex()  <  c.length())  {  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while  (c.getIndex()  <  c.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while  (c.getIndex()  <  c.length())  {	  while    (p.getIndex()    <    c.length())    {    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
411	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos);  while  (pos.getIndex()  <  fmtCount)  {  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos);  while  (pos.getIndex()  <  fmtCount)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos);  while  (pos.getIndex()  <  fmtCount)  {	  while    (pos.getIndex()    <    fmtCount)    {    int    fmtCount    =    readArgumentIndex(pattern,    pos);    while    (pos.getIndex()    <    fmtCount)    {    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	148	None	replace
412	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  pos.setIndex(fmtCount);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  pos.setIndex(fmtCount);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  pos.setIndex(fmtCount);	          pos.setIndex(fmtCount);    int    fmtCount    =    readArgumentIndex(pattern,    start,    pos);    pos.setIndex(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
413	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  0);  pos.setIndex(fmtCount);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  0);  pos.setIndex(fmtCount);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  0);  pos.setIndex(fmtCount);	          pos.setIndex(fmtCount);    int    fmtCount    =    readArgumentIndex(pattern,    start,    pos);    pos.setIndex(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
414	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	  	non-compiled	[CE]  ';'  expected	69	None	add
415	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  ==  0)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  ==  0)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    if(fmtCount  ==  0)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	  	non-compiled	[CE]  ';'  expected	69	None	add
416	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount	  	non-compiled	[CE]  ')'  expected	69	None	add
417	[BUG]  [BUGGY]  if(c!=  null)  {  pos.setIndex(index);  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  pos.setIndex(fmtCount);  }  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c!=  null)  {  pos.setIndex(index);  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  pos.setIndex(fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c!=  null)  {  pos.setIndex(index);  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  pos.setIndex(fmtCount);  }	          pos.setIndex(fmtCount);    int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    pos.setIndex(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
418	[BUG]  [BUGGY]  if(c!=  null)  {  pos.setIndex(fmtCount);  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  pos.setIndex(fmtCount);  }  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c!=  null)  {  pos.setIndex(fmtCount);  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  pos.setIndex(fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c!=  null)  {  pos.setIndex(fmtCount);  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  pos.setIndex(fmtCount);  }	          pos.setIndex(fmtCount);    int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    pos.setIndex(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
419	[BUG]  [BUGGY]  if(c!=  null)  {  pos.setIndex(int);  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  pos.setIndex(fmtCount);  }  [CE]  '.class'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c!=  null)  {  pos.setIndex(int);  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  pos.setIndex(fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c!=  null)  {  pos.setIndex(int);  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  pos.setIndex(fmtCount);  }	          pos.setIndex(fmtCount);    int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    pos.setIndex(fmtCount);    	non-compiled	[CE]  '.class'  expected	132	None	replace
420	[BUG]  [BUGGY]  while(pos.getIndex()  >=  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >=  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >=  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);	  while    (pos.getIndex()    <    fmtCount)    {    int    fmtCount    =    readArgumentIndex(pattern,    start,    pos);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	108	None	replace
421	[BUG]  [BUGGY]  while(pos.getIndex()  <  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  start,  0);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  start,  0);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  start,  0);	  while    (pos.getIndex()    <    fmtCount)    {    int    fmtCount    =    readArgumentIndex(pattern,    start,    pos);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	108	None	replace
422	[BUG]  [BUGGY]  while(pos.getIndex()  >=  pattern.length())  {  int  index  =  readArgumentIndex(pattern,  start,  pos);  [CE]  cannot  find  symbol  start  [FE]            AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >=  pattern.length())  {  int  index  =  readArgumentIndex(pattern,  start,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >=  pattern.length())  {  int  index  =  readArgumentIndex(pattern,  start,  pos);	  while(pos.getIndex()    >    pattern.length())    {    int    index    =    readArgumentIndex(pattern,    start,    pos);    	non-compiled	[CE]  cannot  find  symbol  start	106	None	replace
423	[BUG]  [BUGGY]  while(pos.getIndex()  <  pattern.length())  {  int  index  =  readArgumentIndex(pattern,  start,  pos);  [CE]  cannot  find  symbol  start  [FE]              AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  pattern.length())  {  int  index  =  readArgumentIndex(pattern,  start,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  pattern.length())  {  int  index  =  readArgumentIndex(pattern,  start,  pos);	  while(pos.getIndex()    >    pattern.length())    {    int    index    =    readArgumentIndex(pattern,    start,    pos);    	non-compiled	[CE]  cannot  find  symbol  start	106	None	replace
424	[BUG]  [BUGGY]  while(pos.getIndex()  <  pattern.length())  {  int  index  =  readArgumentIndex(pattern,  start,  fmtCount);  [CE]  cannot  find  symbol  start  [FE]                AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  pattern.length())  {  int  index  =  readArgumentIndex(pattern,  start,  fmtCount);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  pattern.length())  {  int  index  =  readArgumentIndex(pattern,  start,  fmtCount);	  while(pos.getIndex()    >    pattern.length())    {    int    index    =    readArgumentIndex(pattern,    start,    pos);    	non-compiled	[CE]  cannot  find  symbol  start	106	None	replace
425	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  start,  pos.getIndex());  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  start,  pos.getIndex());  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(c,  start,  pos.getIndex());	  int    fmtCount    =    readArgumentIndex(c,    pos.getIndex());    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
426	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  ==  c.length  -  1)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	while(pos.getIndex()  ==  c.length  -  1)  {	  while(pos.getIndex()    <    c.length    -    1)    {    	compilable	  [FE]  AssertionFailedError  	9	5	replace
427	[BUG]  [BUGGY]  while(pos.getIndex()  ==  c.length  -  1)  {  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  ==  c.length  -  1)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  ==  c.length  -  1)  {	  while(pos.getIndex()    <    c.length    -    1)    {    	compilable	  [FE]  AssertionFailedError  	9	5	replace
428	[BUG]  [BUGGY]          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  pos.setIndex(FmtCount);  [CE]  cannot  find  symbol  FmtCount  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  pos.setIndex(FmtCount);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	                pos.setIndex(fmtCount);        pos.setIndex(fmtCount);    pos.setIndex(fmtCount);  pos.setIndex(FmtCount);	  	non-compiled	[CE]  cannot  find  symbol  FmtCount	13	None	add
429	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	                pos.setIndex(fmtCount);        pos.setIndex(fmtCount);    pos.setIndex(fmtCount);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	13	1	add
430	[BUG]  [BUGGY]          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	                pos.setIndex(fmtCount);        pos.setIndex(fmtCount);    pos.setIndex(fmtCount);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	13	1	add
431	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos)-  start);  break;  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos)-  start);  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos)-  start);  break;	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    break;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
432	[BUG]  [BUGGY]  while  (c.getIndex()  <  pos.length()  ||  toPattern.getIndex()  <  c.length())  {  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while  (c.getIndex()  <  pos.length()  ||  toPattern.getIndex()  <  c.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while  (c.getIndex()  <  pos.length()  ||  toPattern.getIndex()  <  c.length())  {	  while    (pos.getIndex()    <    c.length()    ||    toPattern.getIndex()    <    c.length())    {    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
433	[BUG]  [BUGGY]  pos.setIndex(start);  int  fmtCount  =  findFormats.size();  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(start);  int  fmtCount  =  findFormats.size();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(start);  int  fmtCount  =  findFormats.size();	          pos.setIndex(fmtCount);    int    fmtCount    =    findFormats.size();    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
434	[BUG]  [BUGGY]  pos.setIndex(i);  int  fmtCount  =  findFormats.size();  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(i);  int  fmtCount  =  findFormats.size();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(i);  int  fmtCount  =  findFormats.size();	          pos.setIndex(fmtCount);    int    fmtCount    =    findFormats.size();    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
435	[BUG]  [BUGGY]  int  fmtCount  =  findFormats.size();  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  findFormats.size();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  findFormats.size();	          pos.setIndex(fmtCount);    int    fmtCount    =    findFormats.size();    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
436	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length)  {  toPattern  =  registry.withIndex(c);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length)  {  toPattern  =  registry.withIndex(c);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  c.length)  {  toPattern  =  registry.withIndex(c);	  while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:    toPattern    =    registry.withIndex(c);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
437	[BUG]  [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  If(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  If(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    If(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  	non-compiled	[CE]  ';'  expected	137	None	add
438	[BUG]  [BUGGY]  if(pos.getIndex()  >=  pattern.length())  {  char[]  c  =  pattern.toCharArray();  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(pos.getIndex()  >=  pattern.length())  {  char[]  c  =  pattern.toCharArray();  }  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(pos.getIndex()  >=  pattern.length())  {  char[]  c  =  pattern.toCharArray();  }	  while    (pos.getIndex()    >=    pattern.length())    {    char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
439	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end  +  1);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end  +  1);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  end  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    end);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
440	[BUG]  [BUGGY]  int  pos  =  readArgumentIndex(pattern,  pos.getIndex());  while  (pos.getIndex()  <  pattern.length())  {  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]          AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  pos  =  readArgumentIndex(pattern,  pos.getIndex());  while  (pos.getIndex()  <  pattern.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  pos  =  readArgumentIndex(pattern,  pos.getIndex());  while  (pos.getIndex()  <  pattern.length())  {	  while    (pos.getIndex()    >=    pattern.length())    {    int    pos    =    readArgumentIndex(pattern,    pos.getIndex());    while    (pos.getIndex()    >=    pattern.length())    {    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	135	None	replace
441	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern.length());  pos.setIndex(fmtCount);  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern.length());  pos.setIndex(fmtCount);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern.length());  pos.setIndex(fmtCount);	          pos.setIndex(fmtCount);    int    fmtCount    =    readArgumentIndex(pattern.length());    pos.setIndex(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
442	[BUG]  [BUGGY]  while(c.getIndex()  >  pos.length())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(c.getIndex()  >  pos.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(c.getIndex()  >  pos.length())  {	  while(pos.getIndex()    >    c.length())    {    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
443	[BUG]  [BUGGY]  while  (pos.getIndex()  >=  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while  (pos.getIndex()  >=  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while    (pos.getIndex()    >=    fmtCount)    {    int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());	  	non-compiled	[CE]  ';'  expected	31	None	add
444	[BUG]  [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(fmtCount  >=  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(fmtCount  >=  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    if(fmtCount  >=  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  	non-compiled	[CE]  ';'  expected	101	None	add
445	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos,  fmtCount);  break;  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos,  fmtCount);  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  pos,  fmtCount);  break;	  char    fmtCount    =    readArgumentIndex(pattern,    pos);    break;    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
446	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.length  *  1;  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  foundDescriptions.length  *  1;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  foundDescriptions.length  *  1;	  int    fmtCount    =    foundDescriptions.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
447	[BUG]  [BUGGY]  pos.setIndex(indent);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(indent);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(indent);	  pos.setIndex(start);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
448	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  c.length,  pos);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  c.length,  pos);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  c.length,  pos);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos,    c.length);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
449	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  c,  pos.length);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  c,  pos.length);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  c,  pos.length);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos,    c.length);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
450	[BUG]  [BUGGY]  while(pos.getIndex()  >=  c.length())  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >=  c.length())  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >=  c.length())  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);	  while    (pos.getIndex()    >=    pattern.length())    {    int    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
451	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length  ||  c.charAt(p.getIndex()  -  1)!=  '-')  {  [CE]  cannot  find  symbol  p  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length  ||  c.charAt(p.getIndex()  -  1)!=  '-')  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  c.length  ||  c.charAt(p.getIndex()  -  1)!=  '-')  {	  while(pos.getIndex()    <    c.length    ||    c.charAt(pos.getIndex()    -    1)!=    '-')    {    	non-compiled	[CE]  cannot  find  symbol  p	147	None	replace
452	[BUG]  [BUGGY]  while(c.getIndex()  <  pos.length  ||  c.charAt(pos.getIndex()  -  1)!=  '-')  {  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(c.getIndex()  <  pos.length  ||  c.charAt(pos.getIndex()  -  1)!=  '-')  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(c.getIndex()  <  pos.length  ||  c.charAt(pos.getIndex()  -  1)!=  '-')  {	  while(pos.getIndex()    <    c.length    ||    c.charAt(pos.getIndex()    -    1)!=    '-')    {    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
453	[BUG]  [BUGGY]  if(c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();  }  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();  }	          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);    case    END_FE:    toPattern    =    registry.withUTC();    	non-compiled	[CE]  orphaned  case	17	None	replace
454	[BUG]  [BUGGY]  if(c  ==  END_FE  ||  c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();  }  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  END_FE  ||  c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c  ==  END_FE  ||  c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();  }	          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);    case    END_FE:    toPattern    =    registry.withUTC();    	non-compiled	[CE]  orphaned  case	17	None	replace
455	[BUG]  [BUGGY]  if(c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  }  else  {  toPattern  =  registry.withUTC();  }  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  }  else  {  toPattern  =  registry.withUTC();  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  }  else  {  toPattern  =  registry.withUTC();  }	          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);    case    END_FE:    toPattern    =    registry.withUTC();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
456	[BUG]  [BUGGY]  if(c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();  }  else  {  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();  }  else  {  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();  }  else  {	          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);    case    END_FE:    toPattern    =    registry.withUTC();    	non-compiled	[CE]  orphaned  case	17	None	replace
457	[BUG]  [BUGGY]  while(pos.getIndex()  >=  pattern.length())  {  pos.getIndex()  >  pattern.length())  {  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >=  pattern.length())  {  pos.getIndex()  >  pattern.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >=  pattern.length())  {  pos.getIndex()  >  pattern.length())  {	  while(pos.getIndex()    >    pattern.length())    {    pos.getIndex()    >    pattern.length())    {    	non-compiled	[CE]  not  a  statement	105	None	replace
458	[BUG]  [BUGGY]  while(pos.getIndex()  <  pattern.length())  {  pos.getIndex()  +  pattern.length())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  pattern.length())  {  pos.getIndex()  +  pattern.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  pattern.length())  {  pos.getIndex()  +  pattern.length())  {	  while(pos.getIndex()    >    pattern.length())    {    pos.getIndex()    >    pattern.length())    {    	non-compiled	[CE]  not  a  statement	105	None	replace
459	[BUG]  [BUGGY]  pos.getIndex()  <  c.length)  {  char[]  c  =  it.toCharArray();  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.getIndex()  <  c.length)  {  char[]  c  =  it.toCharArray();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.getIndex()  <  c.length)  {  char[]  c  =  it.toCharArray();	  while(pos.getIndex()    <    c.length)    {    char[]    c    =    it.toCharArray();    	non-compiled	[CE]  not  a  statement	114	None	replace
460	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length)  {  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  false);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length)  {  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  false);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  c.length)  {  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  false);	  while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:    registry.appendQuotedString(pattern,    pos,    stripCustom,    true);    	non-compiled	[CE]  not  a  statement	49	None	replace
461	[BUG]  [BUGGY]  while(pos.getIndex()  >=  c.length)  {  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >=  c.length)  {  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >=  c.length)  {  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);	  while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:    registry.appendQuotedString(pattern,    pos,    stripCustom,    true);    	non-compiled	[CE]  not  a  statement	49	None	replace
462	[BUG]  [BUGGY]  int  pos  =  readArgumentIndex(pattern,  pos);  while  (pos.getIndex()  <  pattern.length())  {  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]        AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  pos  =  readArgumentIndex(pattern,  pos);  while  (pos.getIndex()  <  pattern.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  pos  =  readArgumentIndex(pattern,  pos);  while  (pos.getIndex()  <  pattern.length())  {	  while    (pos.getIndex()    >=    pattern.length())    {    int    pos    =    readArgumentIndex(pattern,    pos);    while    (pos.getIndex()    >=    pattern.length())    {    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	134	None	replace
463	[BUG]  [BUGGY]  int  pos  =  readArgumentIndex(pattern,  pos);  while  (pos.getIndex()  >=  pattern.length())  {  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]          AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  pos  =  readArgumentIndex(pattern,  pos);  while  (pos.getIndex()  >=  pattern.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  pos  =  readArgumentIndex(pattern,  pos);  while  (pos.getIndex()  >=  pattern.length())  {	  while    (pos.getIndex()    >=    pattern.length())    {    int    pos    =    readArgumentIndex(pattern,    pos);    while    (pos.getIndex()    >=    pattern.length())    {    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	134	None	replace
464	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  foundDescriptions,  fmtCount);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  foundDescriptions,  fmtCount);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos,  foundDescriptions,  fmtCount);	  int    fmtCount    =    readArgumentIndex(pattern,    pos,    foundDescriptions);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
465	[BUG]  [BUGGY]  Annotated.AssertionFailedError:  toPattern  =  super.toPattern();  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  Annotated.AssertionFailedError:  toPattern  =  super.toPattern();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	Annotated.AssertionFailedError:  toPattern  =  super.toPattern();	  while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:    toPattern    =    super.toPattern();    	non-compiled	[CE]  not  a  statement	111	None	replace
466	[BUG]  [BUGGY]  while(pos.getIndex()!=  c.length)  {  junit.framework.AssertionFailedError:  toPattern  =  super.toPattern();  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()!=  c.length)  {  junit.framework.AssertionFailedError:  toPattern  =  super.toPattern();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()!=    c.length)    {    junit.framework.AssertionFailedError:  toPattern  =  super.toPattern();	  	non-compiled	[CE]  not  a  statement	87	None	add
467	[BUG]  [BUGGY]  while(pos.getIndex()!=  c.length)  {  char  c  =  pattern.toCharArray();  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()!=  c.length)  {  char  c  =  pattern.toCharArray();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()!=    c.length)    {    char  c  =  pattern.toCharArray();	  	non-compiled	[CE]  ';'  expected	87	None	add
468	[BUG]  [BUGGY]  while(pos.getIndex()!=  c.length)  {  junit.framework.AssertionFailedError:  toPattern  =  it.create();  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()!=  c.length)  {  junit.framework.AssertionFailedError:  toPattern  =  it.create();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()!=    c.length)    {    junit.framework.AssertionFailedError:  toPattern  =  it.create();	  	non-compiled	[CE]  not  a  statement	87	None	add
469	[BUG]  [BUGGY]  while(pos.getIndex()!=  c.length)  {  char[]  c  =  it.toCharArray();  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()!=  c.length)  {  char[]  c  =  it.toCharArray();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()!=    c.length)    {    char[]  c  =  it.toCharArray();	  	non-compiled	[CE]  ';'  expected	87	None	add
470	[BUG]  [BUGGY]  while(pos.getIndex()  <  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1);	  while    (pos.getIndex()    <    fmtCount)    {    int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	107	None	replace
471	[BUG]  [BUGGY]  if(c!=  null)  {  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c!=  null)  {  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c!=  null)  {  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  ';'  expected	102	None	replace
472	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c!=  null)  {  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	if(c!=  null)  {  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  }	  if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	102	4	replace
473	[BUG]  [BUGGY]  if(c!=  null)  {  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c!=  null)  {  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c!=  null)  {  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  }	  if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	102	4	replace
474	[BUG]  [BUGGY]  int  fmtCount  =  findIndex(c);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  findIndex(c);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  findIndex(c);	          pos.setIndex(fmtCount);    int    fmtCount    =    findIndex(c);    pos.setIndex(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
475	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos);  pos.setIndex(fmtCount);  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos);  pos.setIndex(fmtCount);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos);  pos.setIndex(fmtCount);	          pos.setIndex(fmtCount);    int    fmtCount    =    readArgumentIndex(pattern,    pos);    pos.setIndex(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
476	[BUG]  [BUGGY]  while(pos.getIndex()  >=  pattern.length())  {  int  fmtCount  =  readArgumentIndex(pattern,  start,  0);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >=  pattern.length())  {  int  fmtCount  =  readArgumentIndex(pattern,  start,  0);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >=  pattern.length())  {  int  fmtCount  =  readArgumentIndex(pattern,  start,  0);	  while    (pos.getIndex()    >=    pattern.length())    {    int    fmtCount    =    readArgumentIndex(pattern,    start,    pos);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	23	None	replace
477	[BUG]  [BUGGY]  if(c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();  break;  }  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();  break;  }	          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);    case    END_FE:    toPattern    =    registry.withUTC();    break;    	non-compiled	[CE]  orphaned  case	18	None	replace
478	[BUG]  [BUGGY]  if(c  ==  END_FE  ||  c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();  break;  }  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  END_FE  ||  c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c  ==  END_FE  ||  c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();  break;  }	          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);    case    END_FE:    toPattern    =    registry.withUTC();    break;    	non-compiled	[CE]  orphaned  case	18	None	replace
479	[BUG]  [BUGGY]  if(c  ==  END_FE  ||  c  ==  END_FMT)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();  break;  }  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  END_FE  ||  c  ==  END_FMT)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c  ==  END_FE  ||  c  ==  END_FMT)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();  break;  }	          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);    case    END_FE:    toPattern    =    registry.withUTC();    break;    	non-compiled	[CE]  orphaned  case	18	None	replace
480	[BUG]  [BUGGY]  if(c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  }  else  {  toPattern  =  registry.withUTC();  break;  }  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  }  else  {  toPattern  =  registry.withUTC();  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  }  else  {  toPattern  =  registry.withUTC();  break;  }	          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);    case    END_FE:    toPattern    =    registry.withUTC();    break;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
481	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length  -  1)  {  junit.framework.AssertionFailedError:  toPattern  =  super.toPattern();  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length  -  1)  {  junit.framework.AssertionFailedError:  toPattern  =  super.toPattern();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    <    c.length    -    1)    {    junit.framework.AssertionFailedError:  toPattern  =  super.toPattern();	  	non-compiled	[CE]  not  a  statement	8	None	add
482	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length  -  1)  {  junit.framework.AssertionFailedError:  toPattern  =  it.create();  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length  -  1)  {  junit.framework.AssertionFailedError:  toPattern  =  it.create();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    <    c.length    -    1)    {    junit.framework.AssertionFailedError:  toPattern  =  it.create();	  	non-compiled	[CE]  not  a  statement	8	None	add
483	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length  -  1)  {  char  c  =  pattern.toCharArray();  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length  -  1)  {  char  c  =  pattern.toCharArray();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    <    c.length    -    1)    {    char  c  =  pattern.toCharArray();	  	non-compiled	[CE]  ';'  expected	8	None	add
484	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length  -  1)  {  char[]  c  =  it.toCharArray();  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length  -  1)  {  char[]  c  =  it.toCharArray();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    <    c.length    -    1)    {    char[]  c  =  it.toCharArray();	  	non-compiled	[CE]  ';'  expected	8	None	add
485	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(p,  pos.getIndex()  +  1);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(p,  pos.getIndex()  +  1);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(p,  pos.getIndex()  +  1);	  int    fmtCount    =    readArgumentIndex(p,    pos.getIndex());    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
486	[BUG]  [BUGGY]  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount!=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount	  	non-compiled	[CE]  ')'  expected	71	None	add
487	[BUG]  [BUGGY]  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  1,  foundDescriptions,  0,  fmtCount);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  1,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount!=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  1,  foundDescriptions,  0,  fmtCount);  }	  	non-compiled	[CE]  ';'  expected	71	None	add
488	[BUG]  [BUGGY]  while(c.getIndex()!=  pos.length)  {  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(c.getIndex()!=  pos.length)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(c.getIndex()!=  pos.length)  {	  while(pos.getIndex()!=    c.length)    {    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
489	[BUG]  [BUGGY]  while(pos.getIndex()  >  c.length)  {  char  c  =  pattern.toCharArray();  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  c.length)  {  char  c  =  pattern.toCharArray();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >    c.length)    {    char  c  =  pattern.toCharArray();	  	non-compiled	[CE]  ';'  expected	145	None	add
490	[BUG]  [BUGGY]  while(pos.getIndex()  >  c.length)  {  int  pos  =  readArgumentIndex(pattern,  pos);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  c.length)  {  int  pos  =  readArgumentIndex(pattern,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >    c.length)    {    int  pos  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  ';'  expected	145	None	add
491	[BUG]  [BUGGY]  while(pos.getIndex()  >  c.length)  {  int  pos  =  readArgumentIndex(pattern,  start,  pos);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  c.length)  {  int  pos  =  readArgumentIndex(pattern,  start,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >    c.length)    {    int  pos  =  readArgumentIndex(pattern,  start,  pos);	  	non-compiled	[CE]  ';'  expected	145	None	add
492	[BUG]  [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	  	non-compiled	[CE]  ';'  expected	119	None	add
493	[BUG]  [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  >=  0)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  >=  0)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    if(fmtCount  >=  0)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	  	non-compiled	[CE]  ';'  expected	119	None	add
494	[BUG]  [BUGGY]  while(pos.getIndex()  >=  c.length)  {  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >=  c.length)  {  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >=  c.length)  {  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);  break;	  while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:    registry.appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    	non-compiled	[CE]  not  a  statement	50	None	replace
495	[BUG]  [BUGGY]  pos.setIndex(start);  int  fmtCount  =  findFormats.length;  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(start);  int  fmtCount  =  findFormats.length;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(start);  int  fmtCount  =  findFormats.length;	          pos.setIndex(fmtCount);    int    fmtCount    =    findFormats.length;    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
496	[BUG]  [BUGGY]  pos.setIndex(i);  int  fmtCount  =  findFormats.length;  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(i);  int  fmtCount  =  findFormats.length;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(i);  int  fmtCount  =  findFormats.length;	          pos.setIndex(fmtCount);    int    fmtCount    =    findFormats.length;    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
497	[BUG]  [BUGGY]  pos.setIndex(index);  int  fmtCount  =  foundFormats.length;  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(index);  int  fmtCount  =  foundFormats.length;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(index);  int  fmtCount  =  foundFormats.length;	          pos.setIndex(fmtCount);    int    fmtCount    =    findFormats.length;    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
498	[BUG]  [BUGGY]  char[]  c  =  foundDescriptions.toCharArray()  +  fmtCount;  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char[]  c  =  foundDescriptions.toCharArray()  +  fmtCount;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char[]  c  =  foundDescriptions.toCharArray()  +  fmtCount;	  char[]    c    =    foundDescriptions.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
499	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  start  +  1);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  start  +  1);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos,  start  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    pos,    start);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
500	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  next(pos));  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  next(pos));  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos,  next(pos));	  int    fmtCount    =    readArgumentIndex(pattern,    pos,    start);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
501	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c  +  1);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c  +  1);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos),    c);    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
502	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(c,  pos);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char  fmtCount  =  readArgumentIndex(c,  pos);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char  fmtCount  =  readArgumentIndex(c,  pos);	  int    fmtCount    =    readArgumentIndex(c,    pos);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
503	[BUG]  [BUGGY]  pos.setIndex(start  -  1);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(start  -  1);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(start  -  1);	  pos.setIndex(fmtCount    -    1);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
504	[BUG]  [BUGGY]  pos.setIndex(index  -  1);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(index  -  1);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(index  -  1);	  pos.setIndex(fmtCount    -    1);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
505	[BUG]  [BUGGY]  pos.setIndex(i  -  1);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(i  -  1);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(i  -  1);	  pos.setIndex(fmtCount    -    1);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
506	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  fmtCount);  break;  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  fmtCount);  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  fmtCount);  break;	  int    fmtCount    =    readArgumentIndex(pattern,    start);    break;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
507	[BUG]  [BUGGY]  if(c!=  null)  {  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c!=  null)  {  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c!=  null)  {  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }	  if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
508	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos,  c,  0);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos,  c,  0);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  pos,  c,  0);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos,    c);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
509	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  c,  pos);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  c,  pos);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  c,  pos);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos,    c);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
510	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos,  c,  fmtCount);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos,  c,  fmtCount);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  pos,  c,  fmtCount);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos,    c);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
511	[BUG]  [BUGGY]  while(pos.getIndex()  ==  c.length)  {  for(pos.getIndex()  ==  c.length)  {  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  ==  c.length)  {  for(pos.getIndex()  ==  c.length)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    ==    c.length)    {    for(pos.getIndex()  ==  c.length)  {	  	non-compiled	[CE]  not  a  statement	10	None	add
512	[BUG]  [BUGGY]  while(pos.getIndex()  ==  c.length)  {  char  c  =  pattern.toCharArray();  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  ==  c.length)  {  char  c  =  pattern.toCharArray();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    ==    c.length)    {    char  c  =  pattern.toCharArray();	  	non-compiled	[CE]  ';'  expected	10	None	add
513	[BUG]  [BUGGY]  while(pos.getIndex()  ==  c.length)  {  int  pos  =  readIndex(pattern,  start,  fmtCount);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  ==  c.length)  {  int  pos  =  readIndex(pattern,  start,  fmtCount);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    ==    c.length)    {    int  pos  =  readIndex(pattern,  start,  fmtCount);	  	non-compiled	[CE]  ';'  expected	10	None	add
514	[BUG]  [BUGGY]  while(pos.getIndex()  ==  c.length)  {  int  pos  =  readArgumentIndex(pattern,  start,  pos);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  ==  c.length)  {  int  pos  =  readArgumentIndex(pattern,  start,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    ==    c.length)    {    int  pos  =  readArgumentIndex(pattern,  start,  pos);	  	non-compiled	[CE]  ';'  expected	10	None	add
515	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  	non-compiled	[CE]  ';'  expected	53	None	add
516	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  AppendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  AppendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  AppendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  	non-compiled	[CE]  ';'  expected	53	None	add
517	[BUG]  [BUGGY]  pos.setIndex(start);  int  fmtCount  =  findDescriptions.length;  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(start);  int  fmtCount  =  findDescriptions.length;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(start);  int  fmtCount  =  findDescriptions.length;	          pos.setIndex(fmtCount);    int    fmtCount    =    findDescriptions.length;    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
518	[BUG]  [BUGGY]  pos.setIndex(i);  int  fmtCount  =  findDescriptions.length;  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(i);  int  fmtCount  =  findDescriptions.length;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(i);  int  fmtCount  =  findDescriptions.length;	          pos.setIndex(fmtCount);    int    fmtCount    =    findDescriptions.length;    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
519	[BUG]  [BUGGY]  while(pos.getIndex()  >=  c.length)  {  char  c  =  pattern.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >=  c.length)  {  char  c  =  pattern.toCharArray();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >=  c.length)  {  char  c  =  pattern.toCharArray();	  while(pos.getIndex()    <    c.length)    {    char    c    =    pattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	112	None	replace
520	[BUG]  [BUGGY]  pos.getIndex()  <  c.length)  {  char  c  =  pattern.toCharArray();  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.getIndex()  <  c.length)  {  char  c  =  pattern.toCharArray();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.getIndex()  <  c.length)  {  char  c  =  pattern.toCharArray();	  while(pos.getIndex()    <    c.length)    {    char    c    =    pattern.toCharArray();    	non-compiled	[CE]  not  a  statement	112	None	replace
521	[BUG]  [BUGGY]  while(pos.getIndex()  >=  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  cannot  find  symbol  start  [FE]            AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >=  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >=  fmtCount)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  while    (pos.getIndex()    <    fmtCount)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    	non-compiled	[CE]  cannot  find  symbol  start	3	None	replace
522	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end,  pos);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end,  pos);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  end,  pos);	  int    fmtCount    =    readArgumentIndex(pattern,    index,    pos);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
523	[BUG]  [BUGGY]  while(pos.getIndex()  <  pattern.length())  {  int  index  =  readArgumentIndex(pattern,  0);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  pattern.length())  {  int  index  =  readArgumentIndex(pattern,  0);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  pattern.length())  {  int  index  =  readArgumentIndex(pattern,  0);	  while(pos.getIndex()    >    pattern.length())    {    int    index    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	104	None	replace
524	[BUG]  [BUGGY]  if(c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.toPattern();  }  [CE]  orphaned  case  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.toPattern();  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.toPattern();  }	          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);    case    END_FE:    toPattern    =    registry.toPattern();    	non-compiled	[CE]  orphaned  case	15	None	replace
525	[BUG]  [BUGGY]  if(c  ==  END_FE  ||  c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.toPattern();  }  [CE]  orphaned  case  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  END_FE  ||  c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.toPattern();  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c  ==  END_FE  ||  c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.toPattern();  }	          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);    case    END_FE:    toPattern    =    registry.toPattern();    	non-compiled	[CE]  orphaned  case	15	None	replace
526	[BUG]  [BUGGY]  if(c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  }  else  {  toPattern  =  registry.toPattern();  }  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  }  else  {  toPattern  =  registry.toPattern();  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  }  else  {  toPattern  =  registry.toPattern();  }	          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);    case    END_FE:    toPattern    =    registry.toPattern();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
527	[BUG]  [BUGGY]  if(c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.toPattern();  }  else  {  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.toPattern();  }  else  {  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.toPattern();  }  else  {	          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);    case    END_FE:    toPattern    =    registry.toPattern();    	non-compiled	[CE]  orphaned  case	15	None	replace
528	[BUG]  [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  AppendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  AppendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  AppendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  	non-compiled	[CE]  ';'  expected	101	None	add
529	[BUG]  [BUGGY]  while(pos.getIndex()  >  pattern.length())  {  int  pos  =  readIndex(pattern,  start,  fmtCount);  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]          AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  pattern.length())  {  int  pos  =  readIndex(pattern,  start,  fmtCount);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >  pattern.length())  {  int  pos  =  readIndex(pattern,  start,  fmtCount);	  while    (pos.getIndex()    >=    pattern.length())    {    int    pos    =    readIndex(pattern,    start,    fmtCount);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	110	None	replace
530	[BUG]  [BUGGY]  while(pos.getIndex()  <  pattern.length())  {  int  pos  =  readIndex(pattern,  start,  0);  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]            AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  pattern.length())  {  int  pos  =  readIndex(pattern,  start,  0);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  pattern.length())  {  int  pos  =  readIndex(pattern,  start,  0);	  while    (pos.getIndex()    >=    pattern.length())    {    int    pos    =    readIndex(pattern,    start,    fmtCount);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	110	None	replace
531	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  c);  break;  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  c);  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  c);  break;	  int    fmtCount    =    readArgumentIndex(pattern,    start);    break;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
532	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  c.length);  break;  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  c.length);  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  c.length);  break;	  int    fmtCount    =    readArgumentIndex(pattern,    start);    break;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
533	[BUG]  [BUGGY]  while(pos.getIndex()  <  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  +  1);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  +  1);	  while    (pos.getIndex()    <    fmtCount)    {    int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	107	None	replace
534	[BUG]  [BUGGY]  Char[]  c  =  pattern.toCharArray();  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  Char[]  c  =  pattern.toCharArray();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	Char[]  c  =  pattern.toCharArray();	  char[]    c    =    pattern.toCharArray()    +    1;    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
535	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  while(pos.getIndex()  <  c.length)  {  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  while(pos.getIndex()  <  c.length)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  while(pos.getIndex()  <  c.length)  {	  while(pos.getIndex()    >    pattern.length())    {    int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    while(pos.getIndex()    >    pattern.length())    {    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	128	None	replace
536	[BUG]  [BUGGY]  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount!=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  }	  	non-compiled	[CE]  ';'  expected	71	None	add
537	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  1,  fmtCount);  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  1,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  1,  fmtCount);  }	  	non-compiled	[CE]  ';'  expected	69	None	add
538	[BUG]  [BUGGY]  while(pos.getIndex()  >  pattern.length())  {  char  c  =  pattern.charAt(pos.getIndex());  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]        AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  pattern.length())  {  char  c  =  pattern.charAt(pos.getIndex());  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >  pattern.length())  {  char  c  =  pattern.charAt(pos.getIndex());	  while    (pos.getIndex()    >=    pattern.length())    {    char    c    =    pattern.charAt(pos.getIndex());    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	109	None	replace
539	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length)  {  char  c  =  pattern.charAt(pos.getIndex());  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]          AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length)  {  char  c  =  pattern.charAt(pos.getIndex());  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  c.length)  {  char  c  =  pattern.charAt(pos.getIndex());	  while    (pos.getIndex()    >=    pattern.length())    {    char    c    =    pattern.charAt(pos.getIndex());    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	109	None	replace
540	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  c);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  c);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  c);	  int    fmtCount    =    readArgumentIndex(pattern,    end);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
541	[BUG]  [BUGGY]  while  (pos.getIndex()  >=  fmtCount)  {  while  (pos.getIndex()!=  fmtCount)  {  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while  (pos.getIndex()  >=  fmtCount)  {  while  (pos.getIndex()!=  fmtCount)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while    (pos.getIndex()    >=    fmtCount)    {    while  (pos.getIndex()!=  fmtCount)  {	  	non-compiled	[CE]  ';'  expected	31	None	add
542	[BUG]  [BUGGY]  while  (pos.getIndex()  >=  fmtCount)  {  while  (pos.getIndex()  >>  fmtCount)  {  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while  (pos.getIndex()  >=  fmtCount)  {  while  (pos.getIndex()  >>  fmtCount)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while    (pos.getIndex()    >=    fmtCount)    {    while  (pos.getIndex()  >>  fmtCount)  {	  	non-compiled	[CE]  ';'  expected	31	None	add
543	[BUG]  [BUGGY]  if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
544	[BUG]  [BUGGY]  if(c.length()  <  fmtCount)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c.length()  <  fmtCount)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c.length()  <  fmtCount)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
545	[BUG]  [BUGGY]  if(c.length()  <  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c.length()  <  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c.length()  <  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
546	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c.length  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	if(c.length  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	102	4	replace
547	[BUG]  [BUGGY]  if(c.length  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c.length  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c.length  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	102	4	replace
548	[BUG]  [BUGGY]  while(pos.getIndex()  >  c.length())  {  pos.getIndex()  >  pattern.length())  {  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  c.length())  {  pos.getIndex()  >  pattern.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >  c.length())  {  pos.getIndex()  >  pattern.length())  {	  while(pos.getIndex()    >    pattern.length())    {    pos.getIndex()    >    pattern.length())    {    	non-compiled	[CE]  not  a  statement	105	None	replace
549	[BUG]  [BUGGY]  while(pos.getIndex()  >  pattern.length())  {  pos.getIndex()  -=  pattern.length())  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  pattern.length())  {  pos.getIndex()  -=  pattern.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >  pattern.length())  {  pos.getIndex()  -=  pattern.length())  {	  while(pos.getIndex()    >    pattern.length())    {    pos.getIndex()    >    pattern.length())    {    	non-compiled	[CE]  ';'  expected	105	None	replace
550	[BUG]  [BUGGY]          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);  n.setIndex(fmtCount);  pos.setIndex(fmtCount);  [CE]  cannot  find  symbol  n  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);  n.setIndex(fmtCount);  pos.setIndex(fmtCount);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	                pos.setIndex(fmtCount);        pos.setIndex(fmtCount);    n.setIndex(fmtCount);  pos.setIndex(fmtCount);	  	non-compiled	[CE]  cannot  find  symbol  n	13	None	add
551	[BUG]  [BUGGY]          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);  pos.setIndex(c);  pos.setIndex(fmtCount);  [CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);  pos.setIndex(c);  pos.setIndex(fmtCount);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	                pos.setIndex(fmtCount);        pos.setIndex(fmtCount);    pos.setIndex(c);  pos.setIndex(fmtCount);	  	non-compiled	[CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;	13	None	add
552	[BUG]  [BUGGY]          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);  pos.setIndex(c);  pos.setIndex(c);  [CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);  pos.setIndex(c);  pos.setIndex(c);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	                pos.setIndex(fmtCount);        pos.setIndex(fmtCount);    pos.setIndex(c);  pos.setIndex(c);	  	non-compiled	[CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;	13	None	add
553	[BUG]  [BUGGY]  while(pos.getIndex()  >  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  while(pos.getIndex()  >  fmtCount)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  while(pos.getIndex()  >  fmtCount)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >    fmtCount)    {    int  fmtCount  =  readArgumentIndex(pattern,  pos);  while(pos.getIndex()  >  fmtCount)  {	  	non-compiled	[CE]  ';'  expected	29	None	add
554	[BUG]  [BUGGY]  while(pos.getIndex()  >  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  while(pos.getIndex()  >  fmtCount)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  while(pos.getIndex()  >  fmtCount)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >    fmtCount)    {    int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  while(pos.getIndex()  >  fmtCount)  {	  	non-compiled	[CE]  ';'  expected	29	None	add
555	[BUG]  [BUGGY]  if(c  ==  END_FE  ||  c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  }  else  {  toPattern  =  registry.withUTC();  }  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  END_FE  ||  c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  }  else  {  toPattern  =  registry.withUTC();  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c  ==  END_FE  ||  c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  }  else  {  toPattern  =  registry.withUTC();  }	          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);    case    END_FE:    toPattern    =    registry.withUTC();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
556	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos)-  1);  break;  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos)-  1);  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos)-  1);  break;	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    break;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
557	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.size();  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  it.next();  }  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  foundDescriptions.size();  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  it.next();  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  foundDescriptions.size();  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  it.next();  }	  if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
558	[BUG]  [BUGGY]  int  fmtCount  =  0;  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  0;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  0;	  if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
559	[BUG]  [BUGGY]  if(c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  }  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  }	          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);    case    END_FE:    toPattern    =    registry.withUTC();    break;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
560	[BUG]  [BUGGY]  if(c  ==  END_FE)  {  pos.setIndex(mtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();  break;  }  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  END_FE)  {  pos.setIndex(mtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c  ==  END_FE)  {  pos.setIndex(mtCount);  pos.setIndex(fmtCount);  case  END_FE:  toPattern  =  registry.withUTC();  break;  }	          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);    case    END_FE:    toPattern    =    registry.withUTC();    break;    	non-compiled	[CE]  orphaned  case	18	None	replace
561	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos  +  1,  c);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos  +  1,  c);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  pos  +  1,  c);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos    +    1);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
562	[BUG]  [BUGGY]  while(pos.getIndex()  >  c,  c.length())  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  c,  c.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >  c,  c.length())  {	  while(pos.getIndex()    >    c.length())    {    	non-compiled	[CE]  ')'  expected	150	None	replace
563	[BUG]  [BUGGY]  while(pos.getIndex()  >  c.length())  {  int  index  =  readArgumentIndex(pattern,  pos);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  c.length())  {  int  index  =  readArgumentIndex(pattern,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >  c.length())  {  int  index  =  readArgumentIndex(pattern,  pos);	  while(pos.getIndex()    >    pattern.length())    {    int    index    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
564	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  c,  foundDescriptions);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  c,  foundDescriptions);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos,  c,  foundDescriptions);	  int    fmtCount    =    readArgumentIndex(pattern,    pos,    foundDescriptions);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
565	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos,  foundDescriptions);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos,  foundDescriptions);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  pos,  foundDescriptions);	  int    fmtCount    =    readArgumentIndex(pattern,    pos,    foundDescriptions);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
566	[BUG]  [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount  [CE]  ')'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount	  	non-compiled	[CE]  ')'  expected	119	None	add
567	[BUG]  [BUGGY]  while  (pos.getIndex()  <  c.length()  ||  c.charAt(pos,  pos.getIndex()  -  1)!=  '-')  {  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while  (pos.getIndex()  <  c.length()  ||  c.charAt(pos,  pos.getIndex()  -  1)!=  '-')  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while  (pos.getIndex()  <  c.length()  ||  c.charAt(pos,  pos.getIndex()  -  1)!=  '-')  {	  while    (pos.getIndex()    <    c.length()    ||    c.charAt(pos.getIndex()    -    1)!=    '-')    {    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
568	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length)  {  char  c  =  pattern.charAt(pos.getIndex()  -  1);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length)  {  char  c  =  pattern.charAt(pos.getIndex()  -  1);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  c.length)  {  char  c  =  pattern.charAt(pos.getIndex()  -  1);	  while(pos.getIndex()    <    c.length)    {    char    c    =    pattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	112	None	replace
569	[BUG]  [BUGGY]  char[]  c  =  plot.toCharArray();  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char[]  c  =  plot.toCharArray();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char[]  c  =  plot.toCharArray();	  char[]    c    =    foundDescriptions.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
570	[BUG]  [BUGGY]  if(fmtCount  <  =  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  <  =  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount  <  =  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(c    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
571	[BUG]  [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  Iterator.next();  }  [CE]  non-static  method  next()  cannot  be  referenced  from  a  static  context  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  Iterator.next();  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c!=  null  &&  c.length  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  Iterator.next();  }	  if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    toPattern    =    Iterator.next();    }    	non-compiled	[CE]  non-static  method  next()  cannot  be  referenced  from  a  static  context	122	None	replace
572	[BUG]  [BUGGY]  if(c!=  null  &&  toPattern.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  Iterator.next();  }  [CE]  non-static  method  next()  cannot  be  referenced  from  a  static  context  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c!=  null  &&  toPattern.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  Iterator.next();  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c!=  null  &&  toPattern.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  toPattern  =  Iterator.next();  }	  if(c!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    toPattern    =    Iterator.next();    }    	non-compiled	[CE]  non-static  method  next()  cannot  be  referenced  from  a  static  context	122	None	replace
573	[BUG]  [BUGGY]  while(pos.getIndex()  ==  c.length)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  while(pos.getIndex()  ==  c.length)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  ==  c.length)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  while(pos.getIndex()  ==  c.length)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    ==    c.length)    {    int  fmtCount  =  readArgumentIndex(pattern,  pos);  while(pos.getIndex()  ==  c.length)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
574	[BUG]  [BUGGY]  while(pos.getIndex()  ==  c.length)  {  int  pos  =  readArgumentIndex(pattern,  pos);  while(pos.getIndex()  ==  c.length)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  ==  c.length)  {  int  pos  =  readArgumentIndex(pattern,  pos);  while(pos.getIndex()  ==  c.length)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    ==    c.length)    {    int  pos  =  readArgumentIndex(pattern,  pos);  while(pos.getIndex()  ==  c.length)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
575	[BUG]  [BUGGY]  while(pos.getIndex()  ==  c.length)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  while(pos.getIndex()  ==  c.length)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  ==  c.length)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  while(pos.getIndex()  ==  c.length)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    ==    c.length)    {    int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  while(pos.getIndex()  ==  c.length)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
576	[BUG]  [BUGGY]  while(pos.getIndex()  ==  c.length)  {  int  pos  =  readArgumentIndex(pattern,  pos.getIndex());  while(pos.getIndex()  ==  c.length)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  ==  c.length)  {  int  pos  =  readArgumentIndex(pattern,  pos.getIndex());  while(pos.getIndex()  ==  c.length)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    ==    c.length)    {    int  pos  =  readArgumentIndex(pattern,  pos.getIndex());  while(pos.getIndex()  ==  c.length)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
577	[BUG]  [BUGGY]  Integer  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  pos.setIndex(c);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  Integer  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  pos.setIndex(c);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	Integer  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  pos.setIndex(c);	          pos.setIndex(fmtCount);    int    fmtCount    =    readArgumentIndex(pattern,    start,    pos);    pos.setIndex(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
578	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  0);  pos.setIndex(c);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  0);  pos.setIndex(c);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  0);  pos.setIndex(c);	          pos.setIndex(fmtCount);    int    fmtCount    =    readArgumentIndex(pattern,    start,    pos);    pos.setIndex(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
579	[BUG]  [BUGGY]  while(pos.getIndex()  <  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  0);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  0);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  fmtCount)  {  int  fmtCount  =  readArgumentIndex(pattern,  0);	  while    (pos.getIndex()    <    fmtCount)    {    int    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	5	None	replace
580	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c.length  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	if(c.length  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	  if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	120	4	replace
581	[BUG]  [BUGGY]  if(c.length  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c.length  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c.length  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	  if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	120	4	replace
582	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos,  c);  break;  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos,  c);  break;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  pos,  c);  break;	  char    fmtCount    =    readArgumentIndex(pattern,    pos);    break;    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
583	[BUG]  [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(C  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  if(C  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    if(C  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	  	non-compiled	[CE]  ';'  expected	73	None	add
584	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length)  {  char[]  c  =  pattern.toCharArray()  +  1;  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length)  {  char[]  c  =  pattern.toCharArray()  +  1;  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  c.length)  {  char[]  c  =  pattern.toCharArray()  +  1;	  while(pos.getIndex()    <    c.length)    {    char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	46	None	replace
585	[BUG]  [BUGGY]  while(pos.getIndex()  >=  c.length)  {  while(pos.getIndex()  >>  c.length)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >=  c.length)  {  while(pos.getIndex()  >>  c.length)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >=    c.length)    {    while(pos.getIndex()  >>  c.length)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
586	[BUG]  [BUGGY]  while(pos.getIndex()  >=  c.length)  {  While(pos.getIndex()  >=  c.length)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >=  c.length)  {  While(pos.getIndex()  >=  c.length)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >=    c.length)    {    While(pos.getIndex()  >=  c.length)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
587	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length)  {  toPattern  =  registry.withIndex(c,  fmtCount);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length)  {  toPattern  =  registry.withIndex(c,  fmtCount);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  c.length)  {  toPattern  =  registry.withIndex(c,  fmtCount);	  while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:    toPattern    =    registry.withIndex(c);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
588	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos.getIndex());  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos.getIndex());  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  pos.getIndex());	  int    fmtCount    =    readArgumentIndex(pattern,    start,    index);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
589	[BUG]  [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos	  	non-compiled	[CE]  ')'  expected	137	None	add
590	[BUG]  [BUGGY]  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  start,  orderedDescriptions,  0,  fmtCount);  }  [CE]  cannot  find  symbol  start  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  start,  orderedDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  start,  orderedDescriptions,  0,  fmtCount);  }	  if(fmtCount!=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    start,    foundDescriptions,    0,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol  start	38	None	replace
591	[BUG]  [BUGGY]  if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }	  if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
592	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  start,  orderedDescriptions,  0,  fmtCount);  }  [CE]  cannot  find  symbol  start  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  start,  orderedDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  start,  orderedDescriptions,  0,  fmtCount);  }	  if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    start,    foundDescriptions,    0,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol  start	37	None	replace
593	[BUG]  [BUGGY]  char[]  c  =  format.toCharArray();  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char[]  c  =  format.toCharArray();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char[]  c  =  format.toCharArray();	  char[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
594	[BUG]  [BUGGY]  if(c  ==  END_FE  ||  c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  }  else  {  toPattern  =  registry.toPattern();  }  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  END_FE  ||  c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  }  else  {  toPattern  =  registry.toPattern();  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c  ==  END_FE  ||  c  ==  END_FE)  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  }  else  {  toPattern  =  registry.toPattern();  }	          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);    case    END_FE:    toPattern    =    registry.toPattern();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
595	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);	  	non-compiled	[CE]  ';'  expected	51	None	add
596	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos  [CE]  ')'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos	  	non-compiled	[CE]  ')'  expected	51	None	add
597	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos)-  1,  c);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos)-  1,  c);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos)-  1,  c);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos),    c);    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
598	[BUG]  [BUGGY]  while  (pos,  c.getIndex()  <  pos.length())  {  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while  (pos,  c.getIndex()  <  pos.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while  (pos,  c.getIndex()  <  pos.length())  {	  while    (c.getIndex()    <    pos.length())    {    	non-compiled	[CE]  ')'  expected	99	None	replace
599	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length  1)  {  [CE]  ')'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length  1)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  c.length  1)  {	  while(pos.getIndex()    <    c.length    -    1)    {    	non-compiled	[CE]  ')'  expected	9	None	replace
600	[BUG]  [BUGGY]  if(c.length  <  0)  {  while(pos.getIndex()  <  c.length)  {  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c.length  <  0)  {  while(pos.getIndex()  <  c.length)  {  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c.length  <  0)  {  while(pos.getIndex()  <  c.length)  {  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  while(pos.getIndex()    <    c.length)    {    junit.framework.AssertionFailedError:    registry.appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    	non-compiled	[CE]  not  a  statement	50	None	replace
601	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length  -  1)  {  while(pos.getIndex()  <  c.length  -  1)  {  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length  -  1)  {  while(pos.getIndex()  <  c.length  -  1)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    <    c.length    -    1)    {    while(pos.getIndex()  <  c.length  -  1)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
602	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length  -  1)  {  char[]  c  =  pattern.toCharArray();  while(pos.getIndex()  <  c.length  -  1)  {  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length  -  1)  {  char[]  c  =  pattern.toCharArray();  while(pos.getIndex()  <  c.length  -  1)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    <    c.length    -    1)    {    char[]  c  =  pattern.toCharArray();  while(pos.getIndex()  <  c.length  -  1)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
603	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length  -  1)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length  -  1)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    <    c.length    -    1)    {    int  fmtCount  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  ';'  expected	8	None	add
604	[BUG]  [BUGGY]  while(pos.getIndex()  <  c.length  -  1)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  c.length  -  1)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    <    c.length    -    1)    {    int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());	  	non-compiled	[CE]  ';'  expected	8	None	add
605	[BUG]  [BUGGY]  while(pos.getIndex()  <  pattern.length())  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  <  pattern.length())  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  <  pattern.length())  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);	  while(pos.getIndex()    >    pattern.length())    {    int    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	25	None	replace
606	[BUG]  [BUGGY]  char[]  c  =  foundDescriptions.iterator();  for(Iterator  it  =  c.iterator();  it.hasNext();)  {  toPattern  =  it.next();  }  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  char[]  c  =  foundDescriptions.iterator();  for(Iterator  it  =  c.iterator();  it.hasNext();)  {  toPattern  =  it.next();  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	char[]  c  =  foundDescriptions.iterator();  for(Iterator  it  =  c.iterator();  it.hasNext();)  {  toPattern  =  it.next();  }	  if(c    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
607	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  1,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	add	if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  1,  fmtCount);  }	  if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    	compilable	  [FE]  AssertionFailedError  	70	5	replace
608	[BUG]  [BUGGY]  if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  1,  fmtCount);  }  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  1,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  1,  fmtCount);  }	  if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    	compilable	  [FE]  AssertionFailedError  	70	5	replace
609	[BUG]  [BUGGY]  while(pos.getIndex()  >  0)  {  char[]  c  =  pattern.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  0)  {  char[]  c  =  pattern.toCharArray();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >  0)  {  char[]  c  =  pattern.toCharArray();	  while(pos.getIndex()    >    pattern.length())    {    char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	28	None	replace
610	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos);  while(pos.getIndex()  <  c.length)  {  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos);  while(pos.getIndex()  <  c.length)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos);  while(pos.getIndex()  <  c.length)  {	  while(pos.getIndex()    >    pattern.length())    {    int    fmtCount    =    readArgumentIndex(pattern,    pos);    while(pos.getIndex()    >    pattern.length())    {    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	127	None	replace
611	[BUG]  [BUGGY]  while(pos.getIndex()  >  c.length())  {  for(pos.getIndex()  >  pattern.length())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  c.length())  {  for(pos.getIndex()  >  pattern.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >  c.length())  {  for(pos.getIndex()  >  pattern.length())  {	  while(pos.getIndex()    >    pattern.length())    {    for(pos.getIndex()    >    pattern.length())    {    	non-compiled	[CE]  not  a  statement	27	None	replace
612	[BUG]  [BUGGY]  if(fmtCount  <  =  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  <  =  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount  <  =  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  fmtCount);  }	  if(c    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    System.arraycopy(c,    0,    foundDescriptions,    0,    fmtCount);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
613	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  pos.length);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  pos.length);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  pos.length);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos.length);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
614	[BUG]  [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    if(c  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);	  	non-compiled	[CE]  ';'  expected	125	None	add
615	[BUG]  [BUGGY]  while(pos.getIndex()  >  fmtCount)  {  char[]  c  =  pattern.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  fmtCount)  {  char[]  c  =  pattern.toCharArray();  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()  >  fmtCount)  {  char[]  c  =  pattern.toCharArray();	  while    (pos.getIndex()    <    fmtCount)    {    char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	4	None	replace
616	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
617	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);	  	non-compiled	[CE]  ';'  expected	53	None	add
618	[BUG]  [BUGGY]  while(pos.getIndex()  >  c.length)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  while(pos.getIndex()  >  c.length)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  c.length)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  while(pos.getIndex()  >  c.length)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >    c.length)    {    int  fmtCount  =  readArgumentIndex(pattern,  pos);  while(pos.getIndex()  >  c.length)  {	  	non-compiled	[CE]  ';'  expected	145	None	add
619	[BUG]  [BUGGY]  while(pos.getIndex()  >  c.length)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  while(pos.getIndex()  >  c.length)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  c.length)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  while(pos.getIndex()  >  c.length)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >    c.length)    {    int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  while(pos.getIndex()  >  c.length)  {	  	non-compiled	[CE]  ';'  expected	145	None	add
620	[BUG]  [BUGGY]  while(pos.getIndex()  >  c.length)  {  int  pos  =  readArgumentIndex(pattern,  pos);  while(pos.getIndex()  >  c.length)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()  >  c.length)  {  int  pos  =  readArgumentIndex(pattern,  pos);  while(pos.getIndex()  >  c.length)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()    >    c.length)    {    int  pos  =  readArgumentIndex(pattern,  pos);  while(pos.getIndex()  >  c.length)  {	  	non-compiled	[CE]  ';'  expected	145	None	add
621	[BUG]  [BUGGY]  while(pos.getIndex()!=  c.length)  {  while(pos.getIndex()!=  c.length)  {  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()!=  c.length)  {  while(pos.getIndex()!=  c.length)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()!=    c.length)    {    while(pos.getIndex()!=  c.length)  {	  	non-compiled	[CE]  ';'  expected	87	None	add
622	[BUG]  [BUGGY]  while(pos.getIndex()!=  c.length)  {  char[]  c  =  pattern.toCharArray();  while(pos.getIndex()!=  c.length)  {  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()!=  c.length)  {  char[]  c  =  pattern.toCharArray();  while(pos.getIndex()!=  c.length)  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()!=    c.length)    {    char[]  c  =  pattern.toCharArray();  while(pos.getIndex()!=  c.length)  {	  	non-compiled	[CE]  ';'  expected	87	None	add
623	[BUG]  [BUGGY]  while(pos.getIndex()!=  c.length)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()!=  c.length)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()!=    c.length)    {    int  fmtCount  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  ';'  expected	87	None	add
624	[BUG]  [BUGGY]  while(pos.getIndex()!=  c.length)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  while(pos.getIndex()!=  c.length)  {  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	while(pos.getIndex()!=    c.length)    {    int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());	  	non-compiled	[CE]  ';'  expected	87	None	add
625	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  0);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  0);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  0);	  int    fmtCount    =    readArgumentIndex(pattern,    index);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
626	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos)-  1);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos)-  1);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos)-  1);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
627	[BUG]  [BUGGY]  int  pos  =  readArgumentIndex(pattern,  pos.getIndex());  while  (pos.getIndex()  >=  pattern.length())  {  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]          AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  pos  =  readArgumentIndex(pattern,  pos.getIndex());  while  (pos.getIndex()  >=  pattern.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  pos  =  readArgumentIndex(pattern,  pos.getIndex());  while  (pos.getIndex()  >=  pattern.length())  {	  while    (pos.getIndex()    >=    pattern.length())    {    int    pos    =    readArgumentIndex(pattern,    pos.getIndex());    while    (pos.getIndex()    >=    pattern.length())    {    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	135	None	replace
628	[BUG]  [BUGGY]  int  pos  =  readArgumentIndex(pattern,  pos.getIndex());  while  (pos.getIndex()  >  pattern.length())  {  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]            AssertionFailedError      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  pos  =  readArgumentIndex(pattern,  pos.getIndex());  while  (pos.getIndex()  >  pattern.length())  {  [BUGGY]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  pos  =  readArgumentIndex(pattern,  pos.getIndex());  while  (pos.getIndex()  >  pattern.length())  {	  while    (pos.getIndex()    >=    pattern.length())    {    int    pos    =    readArgumentIndex(pattern,    pos.getIndex());    while    (pos.getIndex()    >=    pattern.length())    {    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	135	None	replace
629	[BUG]  [BUGGY]  pos.setIndex(index);  int  fmtCount  =  foundDescriptions.length;  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  pos.setIndex(index);  int  fmtCount  =  foundDescriptions.length;  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	pos.setIndex(index);  int  fmtCount  =  foundDescriptions.length;	          pos.setIndex(fmtCount);    int    fmtCount    =    findDescriptions.length;    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
630	[BUG]  [BUGGY]  if(c  ==  '.')  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  }  [CE]  illegal  start  of  type  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  '.')  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c  ==  '.')  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  }	          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
631	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  }  [CE]  illegal  start  of  type  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c  ==  'n'  ||  c  ==  'r')  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  }	          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
632	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  't')  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  }  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  'n'  ||  c  ==  't')  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c  ==  'n'  ||  c  ==  't')  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  }	          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
633	[BUG]  [BUGGY]  if(c  ==  'n')  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  }  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  if(c  ==  'n')  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  }  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	if(c  ==  'n')  {  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  }	          pos.setIndex(fmtCount);    pos.setIndex(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
634	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern.length()  -  1);  pos.setIndex(c);  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern.length()  -  1);  pos.setIndex(c);  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	int  fmtCount  =  readArgumentIndex(pattern.length()  -  1);  pos.setIndex(c);	          pos.setIndex(fmtCount);    int    fmtCount    =    readArgumentIndex(pattern.length());    pos.setIndex(fmtCount);    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
635	[BUG]  [BUGGY]  Int  fmtCount  =  foundDescriptions.size();  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;      [BUGGY]  Int  fmtCount  =  foundDescriptions.size();  [BUGGY]      while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	158	158	1	replace	Int  fmtCount  =  foundDescriptions.size();	  int    fmtCount    =    foundDescriptions.size()    -    2;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
