bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  false);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  false);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  false);  }	  if(toPattern!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  ';'  expected	108	None	replace
2	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  false);  }  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  false);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  false);  }	  if(toPattern!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  ';'  expected	108	None	replace
3	[BUG]  [BUGGY]  Integer  fmtCount  =  toPattern.intValue();  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Integer  fmtCount  =  toPattern.intValue();  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Integer  fmtCount  =  toPattern.intValue();	  if(fmtCount    ==    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    }    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
4	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CE]  cannot  find  symbol  pos  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	appendQuotedString(pattern,  pos,  stripCustom,  true);	  if(fmtCount    ==    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    }    	non-compiled	[CE]  cannot  find  symbol  pos	112	None	replace
5	[BUG]  [BUGGY]  Integer  fmtCount  =  toPattern.getIndex();  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Integer  fmtCount  =  toPattern.getIndex();  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Integer  fmtCount  =  toPattern.getIndex();	  if(fmtCount    ==    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    }    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
6	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
7	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  registry.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  Object>  it  =  registry.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  registry.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
8	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
9	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  toPattern.getIndex());  [CE]  cannot  find  symbol  pos  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  appendQuotedString(pattern,  pos,  toPattern.getIndex());  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	appendQuotedString(pattern,  pos,  toPattern.getIndex());	  Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  pos	78	None	replace
10	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  this.formatDescriptions.iterator();  [CE]  cannot  find  symbol  formatDescriptions  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  Object>  it  =  this.formatDescriptions.iterator();  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  this.formatDescriptions.iterator();	  Iterator    <    Object>    it    =    this.formatDescription.iterator();    	non-compiled	[CE]  cannot  find  symbol  formatDescriptions	117	None	replace
11	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  this.formats.iterator();  [CE]  formats  has  private  access  in  MessageFormat  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  Object>  it  =  this.formats.iterator();  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  this.formats.iterator();	  Iterator    <    Object>    it    =    this.formatDescription.iterator();    	non-compiled	[CE]  formats  has  private  access  in  MessageFormat	117	None	replace
12	[BUG]  [BUGGY]  if(origFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(origFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(origFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  ';'  expected	80	None	replace
13	[BUG]  [BUGGY]  if(origFormats  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(origFormats  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(origFormats  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  ';'  expected	80	None	replace
14	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  cannot  find  symbol  foundDescriptions  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  cannot  find  symbol  foundDescriptions	80	None	replace
15	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  ';'  expected	80	None	replace
16	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  this.patterns.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  cannot  find  symbol  patterns  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  String>  it  =  this.patterns.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  String>  it  =  this.patterns.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  for(Iterator    <    String>    it    =    pattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  patterns	64	None	replace
17	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  this.plots.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  cannot  find  symbol  plots  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  String>  it  =  this.plots.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  String>  it  =  this.plots.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  for(Iterator    <    String>    it    =    pattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  plots	64	None	replace
18	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  registry.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  String>  it  =  registry.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  String>  it  =  registry.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  for(Iterator    <    String>    it    =    pattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
19	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  registry.entrySet().iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  incompatible  types  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  String>  it  =  registry.entrySet().iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  String>  it  =  registry.entrySet().iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  for(Iterator    <    String>    it    =    pattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  incompatible  types	64	None	replace
20	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(foundDescriptions!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	26	None	replace
21	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(f);  [CE]  cannot  find  symbol  f  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(f);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(f);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(origFormats);    	non-compiled	[CE]  cannot  find  symbol  f	49	None	replace
22	[BUG]  [BUGGY]  List  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  List  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	List  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(origFormats);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
23	[BUG]  [BUGGY]  int  fmtCount  =  pattern.length()  +  1;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  int  fmtCount  =  pattern.length()  +  1;  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	int  fmtCount  =  pattern.length()  +  1;	  int    fmtCount    =    pattern.length();    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	42	None	replace
24	[BUG]  [BUGGY]  int  fmtCount  =  pattern.length()  -  1;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  int  fmtCount  =  pattern.length()  -  1;  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	int  fmtCount  =  pattern.length()  -  1;	  int    fmtCount    =    pattern.length();    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	42	None	replace
25	[BUG]  [BUGGY]  int  fmtCount  =  pattern.length()  *  2;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  int  fmtCount  =  pattern.length()  *  2;  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	int  fmtCount  =  pattern.length()  *  2;	  int    fmtCount    =    pattern.length();    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	42	None	replace
26	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  [CE]  cannot  find  symbol  pos  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);	  if(fmtCount    ==    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  cannot  find  symbol  pos	109	None	replace
27	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.remove();  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.remove();  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.remove();	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    it.remove();    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
28	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.addAssertionFailedError(it.remove());  [CE]  cannot  find  symbol  it  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.addAssertionFailedError(it.remove());  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.addAssertionFailedError(it.remove());	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    it.remove();    	non-compiled	[CE]  cannot  find  symbol  it	116	None	replace
29	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.add(it.remove());  [CE]  cannot  find  symbol  it  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.add(it.remove());  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.add(it.remove());	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    it.remove();    	non-compiled	[CE]  cannot  find  symbol  it	116	None	replace
30	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.addAssertionFailedError:  it.remove();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.addAssertionFailedError:  it.remove();  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.addAssertionFailedError:  it.remove();	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    it.remove();    	non-compiled	[CE]  not  a  statement	116	None	replace
31	[BUG]  [BUGGY]  Collection  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Collection  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Collection    <    Format>    foundFormats    =    new    ArrayList    <    Format>();    junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);	  	non-compiled	[CE]  not  a  statement	75	None	add
32	[BUG]  [BUGGY]  Collection  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  junit.framework.AssertionFailedError:  this.registry.appendPattern(pattern);  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Collection  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  junit.framework.AssertionFailedError:  this.registry.appendPattern(pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Collection    <    Format>    foundFormats    =    new    ArrayList    <    Format>();    junit.framework.AssertionFailedError:  this.registry.appendPattern(pattern);	  	non-compiled	[CE]  not  a  statement	75	None	add
33	[BUG]  [BUGGY]  Collection  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  junit.framework.AssertionFailedError:  registry.registerFormat(this,  pattern);  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Collection  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  junit.framework.AssertionFailedError:  registry.registerFormat(this,  pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Collection    <    Format>    foundFormats    =    new    ArrayList    <    Format>();    junit.framework.AssertionFailedError:  registry.registerFormat(this,  pattern);	  	non-compiled	[CE]  not  a  statement	75	None	add
34	[BUG]  [BUGGY]  Collection  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Collection  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Collection    <    Format>    foundFormats    =    new    ArrayList    <    Format>();    junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);	  	non-compiled	[CE]  not  a  statement	75	None	add
35	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.AssertionFailedError:  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.AssertionFailedError:  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.AssertionFailedError:	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    registry.    	non-compiled	[CE]  not  a  statement	88	None	replace
36	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.AssertionFailedError:  pattern.  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.AssertionFailedError:  pattern.  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.AssertionFailedError:  pattern.	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    registry.    	non-compiled	[CE]  not  a  statement	88	None	replace
37	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.AssertionFailedError:  this.registry.  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.AssertionFailedError:  this.registry.  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.AssertionFailedError:  this.registry.	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    registry.    	non-compiled	[CE]  not  a  statement	88	None	replace
38	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(fmtCount  ==  0)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(fmtCount  ==  0)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  }	  if(fmtCount    ==    0)    {    if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
39	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(fmtCount  ==  0)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(fmtCount  ==  0)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern	  if(fmtCount    ==    0)    {    if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    	non-compiled	[CE]  ')'  expected	20	None	replace
40	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString  [CE]  ';'  expected  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(fmtCount  ==  0)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(fmtCount  ==  0)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString	  if(fmtCount    ==    0)    {    if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    	non-compiled	[CE]  ';'  expected	20	None	replace
41	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  toPattern.length  +  1);  [CE]  cannot  find  symbol  length  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  toPattern.length  +  1);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  toPattern.length  +  1);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(toPattern,    toPattern.length);    	non-compiled	[CE]  cannot  find  symbol  length	50	None	replace
42	[BUG]  [BUGGY]  List  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  toPattern.length);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  List  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  toPattern.length);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	List  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  toPattern.length);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(toPattern,    toPattern.length);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
43	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern.length,  toPattern.length);  [CE]  cannot  find  symbol  length  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern.length,  toPattern.length);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern.length,  toPattern.length);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(toPattern,    toPattern.length);    	non-compiled	[CE]  cannot  find  symbol  length	50	None	replace
44	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    this.registry.applyPattern(pattern,    toPattern);    	non-compiled	[CE]  not  a  statement	13	None	replace
45	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  this.registry.applyPattern(pattern,  toPattern);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  this.registry.applyPattern(pattern,  toPattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  this.registry.applyPattern(pattern,  toPattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    this.registry.applyPattern(pattern,    toPattern);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
46	[BUG]  [BUGGY]  if(junit.framework.AssertionFailedError)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  this.registry.applyPattern(pattern,  toPattern);  }  [CE]  package  junit  does  not  exist  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework.AssertionFailedError)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  this.registry.applyPattern(pattern,  toPattern);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework.AssertionFailedError)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  this.registry.applyPattern(pattern,  toPattern);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    this.registry.applyPattern(pattern,    toPattern);    	non-compiled	[CE]  package  junit  does  not  exist	13	None	replace
47	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.registerFormat(DUMMY_PATTERN,  foundFormats);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.registerFormat(DUMMY_PATTERN,  foundFormats);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.registerFormat(DUMMY_PATTERN,  foundFormats);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    registry.registerFormat(DUMMY_PATTERN,    foundFormats);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
48	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.registerFormat(DUMMY_PATTERN,  foundDescriptions);  [CE]  cannot  find  symbol  foundDescriptions  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.registerFormat(DUMMY_PATTERN,  foundDescriptions);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.registerFormat(DUMMY_PATTERN,  foundDescriptions);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    registry.registerFormat(DUMMY_PATTERN,    foundFormats);    	non-compiled	[CE]  cannot  find  symbol  foundDescriptions	91	None	replace
49	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundFormats);  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundFormats);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundFormats);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    registry.registerFormat(DUMMY_PATTERN,    foundFormats);    	non-compiled	[CE]  not  a  statement	91	None	replace
50	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.registerFormat(DUMMY_PATTERN,  foundDescriptions);  [CE]  cannot  find  symbol  foundDescriptions  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.registerFormat(DUMMY_PATTERN,  foundDescriptions);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.registerFormat(DUMMY_PATTERN,  foundDescriptions);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(DUMMY_PATTERN,    foundFormats);    	non-compiled	[CE]  cannot  find  symbol  foundDescriptions	106	None	replace
51	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  registry.registerFormat(DUMMY_PATTERN,  foundFormats);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  registry.registerFormat(DUMMY_PATTERN,  foundFormats);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  registry.registerFormat(DUMMY_PATTERN,  foundFormats);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(DUMMY_PATTERN,    foundFormats);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
52	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.registerFormat(DUMMY_PATTERN,  foundFormats);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.registerFormat(DUMMY_PATTERN,  foundFormats);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.registerFormat(DUMMY_PATTERN,  foundFormats);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(DUMMY_PATTERN,    foundFormats);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
53	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern:  this.registry.applyPattern(pattern);  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern:  this.registry.applyPattern(pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern:  this.registry.applyPattern(pattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    this.registry.applyPattern(pattern);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
54	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.AssertionFailedError:  this.registry.applyPattern(pattern);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.AssertionFailedError:  this.registry.applyPattern(pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.AssertionFailedError:  this.registry.applyPattern(pattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    this.registry.applyPattern(pattern);    	non-compiled	[CE]  not  a  statement	11	None	replace
55	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  this.registry.applyPattern(pattern);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  this.registry.applyPattern(pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  this.registry.applyPattern(pattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    this.registry.applyPattern(pattern);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
56	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.addAssertionFailedError(this.registry.applyPattern(pattern));  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.addAssertionFailedError(this.registry.applyPattern(pattern));  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.addAssertionFailedError(this.registry.applyPattern(pattern));	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    this.registry.applyPattern(pattern);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
57	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(foundDescriptions!=  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  if(toPattern!=    null)    {    for(Iterator    <    Object>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  ';'  expected	21	None	replace
58	[BUG]  [BUGGY]  if(junit.framework.AssertionFailedError!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);  }  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework.AssertionFailedError!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework.AssertionFailedError!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(this,    foundFormats);    	non-compiled	[CE]  not  a  statement	73	None	replace
59	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.registerFormat(this,  foundDescriptions);  [CE]  cannot  find  symbol  foundDescriptions  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.registerFormat(this,  foundDescriptions);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.registerFormat(this,  foundDescriptions);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(this,    foundFormats);    	non-compiled	[CE]  cannot  find  symbol  foundDescriptions	73	None	replace
60	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.registerFormat(this,  foundFormats);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.registerFormat(this,  foundFormats);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.registerFormat(this,  foundFormats);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(this,    foundFormats);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
61	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(foundDescriptions!=  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	  if(toPattern!=    null)    {    for(Iterator    <    Object>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	3	None	replace
62	[BUG]  [BUGGY]  Integer  fmtCount  =  toPattern.length();  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Integer  fmtCount  =  toPattern.length();  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Integer  fmtCount  =  toPattern.length();	  int    fmtCount    =    toPattern.length()    +    1;    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	44	None	replace
63	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  registry.entities.iterator();  [CE]  cannot  find  symbol  entities  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  Object>  it  =  registry.entities.iterator();  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  registry.entities.iterator();	  Iterator    <    Object>    it    =    registry.iterator();    	non-compiled	[CE]  cannot  find  symbol  entities	46	None	replace
64	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(origFormats.length);  [CE]  cannot  find  symbol  origFormats  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(origFormats.length);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(origFormats.length);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(fmtCount);    	non-compiled	[CE]  cannot  find  symbol  origFormats	111	None	replace
65	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(length);  [CE]  cannot  find  symbol  length  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(length);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(length);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(fmtCount);    	non-compiled	[CE]  cannot  find  symbol  length	111	None	replace
66	[BUG]  [BUGGY]  List  <  String>  foundDescriptions  =  new  ArrayList  <  String>();  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  List  <  String>  foundDescriptions  =  new  ArrayList  <  String>();  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	List  <  String>  foundDescriptions  =  new  ArrayList  <  String>();	  ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
67	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(fmtCount);  [CE]  cannot  find  symbol  fmtCount  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(fmtCount);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(fmtCount);	  ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>();    	non-compiled	[CE]  cannot  find  symbol  fmtCount	27	None	replace
68	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(2);    junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);	  	non-compiled	[CE]  not  a  statement	39	None	add
69	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(2);    junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);	  	non-compiled	[CE]  not  a  statement	39	None	add
70	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(2);    junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);	  	non-compiled	[CE]  not  a  statement	39	None	add
71	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(2);    junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);	  	non-compiled	[CE]  not  a  statement	39	None	add
72	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  this.patterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  cannot  find  symbol  patterns  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  this.patterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  this.patterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  for(Iterator    <    Object>    it    =    pattern.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  patterns	95	None	replace
73	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  this.plots.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  cannot  find  symbol  plots  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  this.plots.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  this.plots.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  for(Iterator    <    Object>    it    =    pattern.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  plots	95	None	replace
74	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  registry.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  registry.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  registry.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  for(Iterator    <    Object>    it    =    pattern.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
75	[BUG]  [BUGGY]  if(c  ==  null)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(c  ==  null)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(c  ==  null)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,	  if(c    ==    null)    {    if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i);    }    }    	non-compiled	[CE]  ')'  expected	19	None	replace
76	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  if(c  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(toPattern  ==  null)  {  if(c  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern  ==  null)  {  if(c  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,	  if(c    ==    null)    {    if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i);    }    }    	non-compiled	[CE]  ')'  expected	19	None	replace
77	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  HashSet  <  Format>();  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  HashSet  <  Format>();  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  HashSet  <  Format>();	  Set    <    Format>    foundFormats    =    new    HashSet    <    Format>();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
78	[BUG]  [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(foundDescriptions  ==  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  ';'  expected	41	None	replace
79	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(toPattern!=  null)  {  for(Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern!=  null)  {  for(Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    this.toPatterns.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  ';'  expected	97	None	replace
80	[BUG]  [BUGGY]  if(this.toPatterns!=  null)  {  for(Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(this.toPatterns!=  null)  {  for(Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(this.toPatterns!=  null)  {  for(Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    this.toPatterns.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  ';'  expected	97	None	replace
81	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  cannot  find  symbol  toPatterns  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    this.toPatterns.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  toPatterns	97	None	replace
82	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  if(fmtCount  ==  0)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(toPattern  ==  null)  {  if(fmtCount  ==  0)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern  ==  null)  {  if(fmtCount  ==  0)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,	  if(fmtCount    ==    0)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i);    }    	non-compiled	[CE]  ')'  expected	60	None	replace
83	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  int  fmtCount  =  toPattern.length();  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(toPattern  ==  null)  {  int  fmtCount  =  toPattern.length();  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern  ==  null)  {  int  fmtCount  =  toPattern.length();  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString	  if(fmtCount    ==    0)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i);    }    	non-compiled	[CE]  ';'  expected	60	None	replace
84	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(4);    junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);	  	non-compiled	[CE]  not  a  statement	58	None	add
85	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(4);    junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);	  	non-compiled	[CE]  not  a  statement	58	None	add
86	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(4);    junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);	  	non-compiled	[CE]  not  a  statement	58	None	add
87	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(4);    junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);	  	non-compiled	[CE]  not  a  statement	58	None	add
88	[BUG]  [BUGGY]  for(int  i  =  fmtCount;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }  [CE]  cannot  find  symbol  fmtCount  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(int  i  =  fmtCount;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(int  i  =  fmtCount;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }	  for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    i    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  cannot  find  symbol  fmtCount	66	None	replace
89	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }  [CE]  cannot  find  symbol  fmtCount  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }	  for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    i    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  cannot  find  symbol  fmtCount	66	None	replace
90	[BUG]  [BUGGY]  for(int  i  =  fmtCount;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }  [CE]  cannot  find  symbol  fmtCount  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(int  i  =  fmtCount;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(int  i  =  fmtCount;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }	  for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    i    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  cannot  find  symbol  fmtCount	66	None	replace
91	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }  [CE]  cannot  find  symbol  fmtCount  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }	  for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    i    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  cannot  find  symbol  fmtCount	66	None	replace
92	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  this.toPattern.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  this.toPattern.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  this.toPattern.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
93	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  cannot  find  symbol  toPatterns  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  cannot  find  symbol  toPatterns	84	None	replace
94	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  chart.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  cannot  find  symbol  chart  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  chart.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  chart.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  cannot  find  symbol  chart	84	None	replace
95	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  cannot  find  symbol  foundDescriptions  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  for(Iterator    <    Object>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  cannot  find  symbol  foundDescriptions	16	None	replace
96	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  toPatterns.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  cannot  find  symbol  toPatterns  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  toPatterns.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  toPatterns.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  for(Iterator    <    Object>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  cannot  find  symbol  toPatterns	16	None	replace
97	[BUG]  [BUGGY]  Formats.for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Formats.for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Formats.for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  for(Iterator    <    Object>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
98	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  cannot  find  symbol  toPatterns  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	  for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  toPatterns	69	None	replace
99	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  this.toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  this.toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  this.toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	  for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
100	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	  for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
101	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  chart.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  cannot  find  symbol  chart  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  chart.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  chart.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	  for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  chart	69	None	replace
102	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  toPattern);  [CE]  no  suitable  constructor  found  for  ArrayList(String,String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  toPattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  toPattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(toPattern,    origFormats);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(String,String)	52	None	replace
103	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  pattern);  [CE]  no  suitable  constructor  found  for  ArrayList(String,String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  pattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(toPattern,    origFormats);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(String,String)	52	None	replace
104	[BUG]  [BUGGY]  List  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  toPattern);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  List  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  toPattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	List  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  toPattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(toPattern,    origFormats);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
105	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.registerFormat(DUMMY_PATTERN,  toPattern);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.registerFormat(DUMMY_PATTERN,  toPattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.registerFormat(DUMMY_PATTERN,  toPattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(DUMMY_PATTERN,    pattern);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
106	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.registerFormat(DUMMY_PATTERN,  pattern);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.registerFormat(DUMMY_PATTERN,  pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.registerFormat(DUMMY_PATTERN,  pattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(DUMMY_PATTERN,    pattern);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
107	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  registry.registerFormat(DUMMY_PATTERN,  pattern);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  registry.registerFormat(DUMMY_PATTERN,  pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  registry.registerFormat(DUMMY_PATTERN,  pattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(DUMMY_PATTERN,    pattern);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
108	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern.remove();  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern.remove();  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern.remove();	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    it.remove();    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
109	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  toPattern.remove();  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  toPattern.remove();  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  toPattern.remove();	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    it.remove();    	non-compiled	[CE]  not  a  statement	104	None	replace
110	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern.addAssertionFailedError(it.remove());  [CE]  cannot  find  symbol  it  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern.addAssertionFailedError(it.remove());  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern.addAssertionFailedError(it.remove());	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    it.remove();    	non-compiled	[CE]  cannot  find  symbol  it	104	None	replace
111	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.AssertionFailedError:  it.remove();  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.AssertionFailedError:  it.remove();  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.AssertionFailedError:  it.remove();	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    it.remove();    	non-compiled	[CE]  not  a  statement	104	None	replace
112	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.registerFormat(this,  foundFormats);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.registerFormat(this,  foundFormats);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.registerFormat(this,  foundFormats);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    registry.registerFormat(this,    foundFormats);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
113	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.registerFormat(this,  foundDescriptions);  [CE]  cannot  find  symbol  foundDescriptions  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.registerFormat(this,  foundDescriptions);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.registerFormat(this,  foundDescriptions);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    registry.registerFormat(this,    foundFormats);    	non-compiled	[CE]  cannot  find  symbol  foundDescriptions	92	None	replace
114	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  registry.toPattern.iterator();  [CE]  cannot  find  symbol  toPattern  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  Object>  it  =  registry.toPattern.iterator();  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  registry.toPattern.iterator();	  Iterator    <    Object>    it    =    this.toPattern.iterator();    	non-compiled	[CE]  cannot  find  symbol  toPattern	47	None	replace
115	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  register.toPattern.iterator();  [CE]  package  register  does  not  exist  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  Object>  it  =  register.toPattern.iterator();  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  register.toPattern.iterator();	  Iterator    <    Object>    it    =    this.toPattern.iterator();    	non-compiled	[CE]  package  register  does  not  exist	47	None	replace
116	[BUG]  [BUGGY]  if(c!=  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(c!=  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(c!=  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }	  if(c    ==    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i);    }    	non-compiled	[CE]  ';'  expected	113	None	replace
117	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  if(c  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(fmtCount  ==  0)  {  if(c  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(fmtCount  ==  0)  {  if(c  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }	  if(c    ==    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i);    }    	non-compiled	[CE]  ';'  expected	113	None	replace
118	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  this.plots.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  cannot  find  symbol  plots  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  this.plots.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  this.plots.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  for(Iterator    <    Object>    it    =    pattern.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  cannot  find  symbol  plots	110	None	replace
119	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  this.patterns.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  cannot  find  symbol  patterns  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  this.patterns.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  this.patterns.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  for(Iterator    <    Object>    it    =    pattern.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  cannot  find  symbol  patterns	110	None	replace
120	[BUG]  [BUGGY]  List  <  String>  foundDescriptions  =  Lists.newArrayList();  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  List  <  String>  foundDescriptions  =  Lists.newArrayList();  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	List  <  String>  foundDescriptions  =  Lists.newArrayList();	  ArrayList    <    String>    foundDescriptions    =    Lists.newArrayList();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
121	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
122	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
123	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  registry.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  Object>  it  =  registry.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  registry.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
124	[BUG]  [BUGGY]  char  fmtCount  =  toPattern.length();  [CE]  possible  loss  of  precision  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  char  fmtCount  =  toPattern.length();  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	char  fmtCount  =  toPattern.length();	  int    fmtCount    =    toPattern.length()    -    1;    	non-compiled	[CE]  possible  loss  of  precision	43	None	replace
125	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.registerFormat(DUMMY_PATTERN,  new  Format[]  {  pattern  }  );  [CE]  incompatible  types  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.registerFormat(DUMMY_PATTERN,  new  Format[]  {  pattern  }  );  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.registerFormat(DUMMY_PATTERN,  new  Format[]  {  pattern  }  );	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(DUMMY_PATTERN,    new    Format[]    {    pattern    }    );    	non-compiled	[CE]  incompatible  types	105	None	replace
126	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  registry.registerFormat(DUMMY_PATTERN,  new  Format[]  {  pattern  }  );  [CE]  incompatible  types  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  registry.registerFormat(DUMMY_PATTERN,  new  Format[]  {  pattern  }  );  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  registry.registerFormat(DUMMY_PATTERN,  new  Format[]  {  pattern  }  );	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(DUMMY_PATTERN,    new    Format[]    {    pattern    }    );    	non-compiled	[CE]  incompatible  types	105	None	replace
127	[BUG]  [BUGGY]  if(origFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendDescription(it.next());  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(origFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendDescription(it.next());  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(origFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendDescription(it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    appendDescription(it.next());    }    	non-compiled	[CE]  ';'  expected	82	None	replace
128	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendDescription(it.next());  }  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendDescription(it.next());  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendDescription(it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    appendDescription(it.next());    }    	non-compiled	[CE]  ';'  expected	82	None	replace
129	[BUG]  [BUGGY]  if(origFormats  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendDescription(it.next());  }  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(origFormats  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendDescription(it.next());  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(origFormats  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendDescription(it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    appendDescription(it.next());    }    	non-compiled	[CE]  ';'  expected	82	None	replace
130	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendDescription(it.next());  }  [CE]  ';'  expected  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(toPattern!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendDescription(it.next());  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendDescription(it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    appendDescription(it.next());    }    	non-compiled	[CE]  ';'  expected	82	None	replace
131	[BUG]  [BUGGY]  if(origFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(origFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(origFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	118	None	replace
132	[BUG]  [BUGGY]  if(origFormats  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(origFormats  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(origFormats  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	118	None	replace
133	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(8);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(8);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(8);    junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);	  	non-compiled	[CE]  not  a  statement	101	None	add
134	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(8);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(8);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(8);    junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);	  	non-compiled	[CE]  not  a  statement	101	None	add
135	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(8);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(8);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(8);    junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);	  	non-compiled	[CE]  not  a  statement	101	None	add
136	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(8);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(8);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(8);    junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);	  	non-compiled	[CE]  not  a  statement	101	None	add
137	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  cannot  find  symbol  foundDescriptions  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    pattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  foundDescriptions	94	None	replace
138	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    pattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	94	None	replace
139	[BUG]  [BUGGY]  int  fmtCount  =  this.toPattern.length()  -  1;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  int  fmtCount  =  this.toPattern.length()  -  1;  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	int  fmtCount  =  this.toPattern.length()  -  1;	  int    fmtCount    =    this.toPattern.length();    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	100	None	replace
140	[BUG]  [BUGGY]  int  fmtCount  =  this.toPattern.length()  +  1;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  int  fmtCount  =  this.toPattern.length()  +  1;  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	int  fmtCount  =  this.toPattern.length()  +  1;	  int    fmtCount    =    this.toPattern.length();    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	100	None	replace
141	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  this.registry.entrySet().iterator();  [CE]  incompatible  types  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  Object>  it  =  this.registry.entrySet().iterator();  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  this.registry.entrySet().iterator();	  Iterator    <    Object>    it    =    this.registry.iterator();    	non-compiled	[CE]  incompatible  types	83	None	replace
142	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(toPattern.length);  [CE]  cannot  find  symbol  length  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(toPattern.length);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(toPattern.length);	  ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(origFormats.length);    	non-compiled	[CE]  cannot  find  symbol  length	29	None	replace
143	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(format.length);  [CE]  cannot  find  symbol  format  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(format.length);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(format.length);	  ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(origFormats.length);    	non-compiled	[CE]  cannot  find  symbol  format	29	None	replace
144	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(escapeFormats.length);  [CE]  cannot  find  symbol  escapeFormats  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(escapeFormats.length);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(escapeFormats.length);	  ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(origFormats.length);    	non-compiled	[CE]  cannot  find  symbol  escapeFormats	29	None	replace
145	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(toPattern.length()  +  1);  [CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(toPattern.length()  +  1);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(toPattern.length()  +  1);	  ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(toPattern.length());    	non-compiled	[CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)	28	None	replace
146	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(toPattern.length()  -  1);  [CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(toPattern.length()  -  1);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(toPattern.length()  -  1);	  ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(toPattern.length());    	non-compiled	[CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)	28	None	replace
147	[BUG]  [BUGGY]  List  <  String>  foundDescriptions  =  new  ArrayList  <  String>(toPattern.length());  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  List  <  String>  foundDescriptions  =  new  ArrayList  <  String>(toPattern.length());  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	List  <  String>  foundDescriptions  =  new  ArrayList  <  String>(toPattern.length());	  ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(toPattern.length());    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
148	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(toPattern.length(),  toPattern.length());  [CE]  no  suitable  constructor  found  for  ArrayList(int,int)  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(toPattern.length(),  toPattern.length());  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(toPattern.length(),  toPattern.length());	  ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(toPattern.length());    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(int,int)	28	None	replace
149	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.registerFormat(foundDescriptions,  pattern);  [CE]  cannot  find  symbol  foundDescriptions  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.registerFormat(foundDescriptions,  pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.registerFormat(foundDescriptions,  pattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    registry.registerFormat(foundDescriptions,    pattern);    	non-compiled	[CE]  cannot  find  symbol  foundDescriptions	14	None	replace
150	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    registry.registerFormat(foundDescriptions,    pattern);    	non-compiled	[CE]  not  a  statement	14	None	replace
151	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.registerFormat(foundDescriptions,  pattern);  [CE]  cannot  find  symbol  foundDescriptions  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.registerFormat(foundDescriptions,  pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.registerFormat(foundDescriptions,  pattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    registry.registerFormat(foundDescriptions,    pattern);    	non-compiled	[CE]  cannot  find  symbol  foundDescriptions	14	None	replace
152	[BUG]  [BUGGY]  if(origFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  toPattern,  stripCustom,  true);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(origFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  toPattern,  stripCustom,  true);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(origFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  toPattern,  stripCustom,  true);  }	  if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    toPattern,    stripCustom,    true);    }    	non-compiled	[CE]  ';'  expected	120	None	replace
153	[BUG]  [BUGGY]  if(origFormats  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  toPattern,  stripCustom,  true);  }  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(origFormats  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  toPattern,  stripCustom,  true);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(origFormats  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  toPattern,  stripCustom,  true);  }	  if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    toPattern,    stripCustom,    true);    }    	non-compiled	[CE]  ';'  expected	120	None	replace
154	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  toPattern,  stripCustom,  true);  }  [CE]  cannot  find  symbol  foundDescriptions  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  toPattern,  stripCustom,  true);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  toPattern,  stripCustom,  true);  }	  if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    toPattern,    stripCustom,    true);    }    	non-compiled	[CE]  cannot  find  symbol  foundDescriptions	120	None	replace
155	[BUG]  [BUGGY]  if(origFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  toPattern,  stripCustom,  false);  }  [CE]  ';'  expected  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(origFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  toPattern,  stripCustom,  false);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(origFormats!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  toPattern,  stripCustom,  false);  }	  if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    toPattern,    stripCustom,    true);    }    	non-compiled	[CE]  ';'  expected	120	None	replace
156	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern.length  +  1);  [CE]  cannot  find  symbol  length  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern.length  +  1);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern.length  +  1);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(toPattern.length);    	non-compiled	[CE]  cannot  find  symbol  length	51	None	replace
157	[BUG]  [BUGGY]  List  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern.length);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  List  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern.length);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	List  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern.length);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(toPattern.length);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
158	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.registry.keySet().iterator();  [CE]  cannot  find  symbol  foundFormats  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  String>  it  =  this.registry.keySet().iterator();  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  String>  it  =  this.registry.keySet().iterator();	  Iterator    <    String>    it    =    this.registry.iterator();    	non-compiled	[CE]  cannot  find  symbol  foundFormats	87	None	replace
159	[BUG]  [BUGGY]  Iterator  <  String>  it  =  registry.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  String>  it  =  registry.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  String>  it  =  registry.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  Iterator    <    String>    it    =    pattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
160	[BUG]  [BUGGY]  Iterator  <  String>  it  =  toPattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  String>  it  =  toPattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  String>  it  =  toPattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  Iterator    <    String>    it    =    pattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
161	[BUG]  [BUGGY]  Iterator  <  String>  it  =  registry.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  toPattern.next());  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  String>  it  =  registry.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  toPattern.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  String>  it  =  registry.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  toPattern.next());  }	  Iterator    <    String>    it    =    pattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
162	[BUG]  [BUGGY]  Iterator  <  String>  it  =  registry.toPattern.iterator();  [CE]  cannot  find  symbol  toPattern  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  String>  it  =  registry.toPattern.iterator();  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  String>  it  =  registry.toPattern.iterator();	  Iterator    <    String>    it    =    this.toPattern.iterator();    	non-compiled	[CE]  cannot  find  symbol  toPattern	7	None	replace
163	[BUG]  [BUGGY]  Iterator  <  String>  it  =  register.toPattern.iterator();  [CE]  package  register  does  not  exist  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  String>  it  =  register.toPattern.iterator();  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  String>  it  =  register.toPattern.iterator();	  Iterator    <    String>    it    =    this.toPattern.iterator();    	non-compiled	[CE]  package  register  does  not  exist	7	None	replace
164	[BUG]  [BUGGY]  Formats.for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Formats.for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Formats.for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	  for(Iterator    <    Object>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
165	[BUG]  [BUGGY]  For(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  For(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	For(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	  for(Iterator    <    Object>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ')'  expected	6	None	replace
166	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  cannot  find  symbol  foundDescriptions  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	  for(Iterator    <    Object>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  foundDescriptions	6	None	replace
167	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.AssertionFailedError:  this.registry.appendPattern(pattern);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.AssertionFailedError:  this.registry.appendPattern(pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.AssertionFailedError:  this.registry.appendPattern(pattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    this.registry.appendPattern(pattern);    	non-compiled	[CE]  not  a  statement	12	None	replace
168	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern:  this.registry.appendPattern(pattern);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern:  this.registry.appendPattern(pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern:  this.registry.appendPattern(pattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    this.registry.appendPattern(pattern);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
169	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  this.registry.appendPattern(pattern);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  this.registry.appendPattern(pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  this.registry.appendPattern(pattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    this.registry.appendPattern(pattern);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
170	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.appendPattern:  this.registry.appendPattern(pattern);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.appendPattern:  this.registry.appendPattern(pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.appendPattern:  this.registry.appendPattern(pattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    this.registry.appendPattern(pattern);    	non-compiled	[CE]  not  a  statement	12	None	replace
171	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  this.registry.applyPattern(pattern,  toPattern);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  this.registry.applyPattern(pattern,  toPattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  this.registry.applyPattern(pattern,  toPattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    this.registry.applyPattern(pattern,    toPattern);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
172	[BUG]  [BUGGY]  if(this.registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);  }  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(this.registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(this.registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    this.registry.applyPattern(pattern,    toPattern);    	non-compiled	[CE]  not  a  statement	57	None	replace
173	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    this.registry.applyPattern(pattern,    toPattern);    	non-compiled	[CE]  not  a  statement	57	None	replace
174	[BUG]  [BUGGY]  if(junit.framework.AssertionFailedError)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  this.registry.applyPattern(pattern,  toPattern);  }  [CE]  package  junit  does  not  exist  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework.AssertionFailedError)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  this.registry.applyPattern(pattern,  toPattern);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework.AssertionFailedError)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  this.registry.applyPattern(pattern,  toPattern);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    this.registry.applyPattern(pattern,    toPattern);    	non-compiled	[CE]  package  junit  does  not  exist	57	None	replace
175	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
176	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
177	[BUG]  [BUGGY]  Iterator  <  String>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  String>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  String>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
178	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  registry.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  Object>  it  =  registry.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  registry.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
179	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.AssertionFailedError:  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.AssertionFailedError:  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.AssertionFailedError:	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.    	non-compiled	[CE]  not  a  statement	71	None	replace
180	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.addAssertionFailedError(junit.framework.AssertionFailedError);  [CE]  package  junit  does  not  exist  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.addAssertionFailedError(junit.framework.AssertionFailedError);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.addAssertionFailedError(junit.framework.AssertionFailedError);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.    	non-compiled	[CE]  package  junit  does  not  exist	71	None	replace
181	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.AssertionFailedError:  this.registry.  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.AssertionFailedError:  this.registry.  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.AssertionFailedError:  this.registry.	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.    	non-compiled	[CE]  not  a  statement	71	None	replace
182	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern.AssertionFailedError:  toPattern;  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern.AssertionFailedError:  toPattern;  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern.AssertionFailedError:  toPattern;	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    toPattern;    	non-compiled	[CE]  not  a  statement	74	None	replace
183	[BUG]  [BUGGY]  List  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern.AssertionFailedError:  toPattern;  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  List  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern.AssertionFailedError:  toPattern;  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	List  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern.AssertionFailedError:  toPattern;	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    toPattern;    	non-compiled	[CE]  not  a  statement	74	None	replace
184	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern.assertionFailedError:  toPattern;  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern.assertionFailedError:  toPattern;  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern.assertionFailedError:  toPattern;	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    toPattern;    	non-compiled	[CE]  not  a  statement	74	None	replace
185	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.formatDescriptions.iterator();  [CE]  cannot  find  symbol  formatDescriptions  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  String>  it  =  this.formatDescriptions.iterator();  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  String>  it  =  this.formatDescriptions.iterator();	  Iterator    <    String>    it    =    this.formatDescription.iterator();    	non-compiled	[CE]  cannot  find  symbol  formatDescriptions	9	None	replace
186	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.formats.iterator();  [CE]  formats  has  private  access  in  MessageFormat  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  String>  it  =  this.formats.iterator();  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  String>  it  =  this.formats.iterator();	  Iterator    <    String>    it    =    this.formatDescription.iterator();    	non-compiled	[CE]  formats  has  private  access  in  MessageFormat	9	None	replace
187	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.registerFormat(foundDescriptions,  true);  [CE]  cannot  find  symbol  foundDescriptions  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.registerFormat(foundDescriptions,  true);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.registerFormat(foundDescriptions,  true);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(foundDescriptions,    true);    	non-compiled	[CE]  cannot  find  symbol  foundDescriptions	55	None	replace
188	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  false);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  false);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  false);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(foundDescriptions,    true);    	non-compiled	[CE]  not  a  statement	55	None	replace
189	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  cannot  find  symbol  toPatterns  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  toPatterns	79	None	replace
190	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
191	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  this.toPattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  this.toPattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  this.toPattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
192	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  chart.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  cannot  find  symbol  chart  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  chart.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  chart.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  chart	79	None	replace
193	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(6);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	add	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(6);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(8);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	102	1	replace
194	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(6);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(6);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(6);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(8);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	102	1	replace
195	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(toPattern.size()  -  1);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(toPattern.size()  -  1);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(toPattern.size()  -  1);	  ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(toPattern.size());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
196	[BUG]  [BUGGY]  List  <  String>  foundDescriptions  =  new  ArrayList  <  String>(toPattern.size());  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  List  <  String>  foundDescriptions  =  new  ArrayList  <  String>(toPattern.size());  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	List  <  String>  foundDescriptions  =  new  ArrayList  <  String>(toPattern.size());	  ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(toPattern.size());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
197	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(toPattern.size()  +  1);  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(toPattern.size()  +  1);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(toPattern.size()  +  1);	  ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(toPattern.size());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
198	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  cannot  find  symbol  foundDescriptions  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  for(Iterator    <    Object>    it    =    toPatterns.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  foundDescriptions	77	None	replace
199	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  cannot  find  symbol  foundFormats  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  for(Iterator    <    Object>    it    =    toPatterns.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  foundFormats	77	None	replace
200	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  this.foundFormats.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  cannot  find  symbol  foundFormats  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  this.foundFormats.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  this.foundFormats.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  for(Iterator    <    Object>    it    =    toPatterns.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  foundFormats	77	None	replace
201	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(toPattern!=  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern!=  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  if(toPattern!=    null)    {    for(Iterator    <    String>    it    =    pattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	62	None	replace
202	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(foundDescriptions!=  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  if(toPattern!=    null)    {    for(Iterator    <    Object>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	33	None	replace
203	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.registerFormat(DUMMY_PATTERN,  pattern);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.registerFormat(DUMMY_PATTERN,  pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.registerFormat(DUMMY_PATTERN,  pattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    registry.registerFormat(DUMMY_PATTERN,    pattern);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
204	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    registry.registerFormat(DUMMY_PATTERN,    pattern);    	non-compiled	[CE]  not  a  statement	89	None	replace
205	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.registerFormat(DUMMY_PATTERN,  toPattern);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.registerFormat(DUMMY_PATTERN,  toPattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.registerFormat(DUMMY_PATTERN,  toPattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    registry.registerFormat(DUMMY_PATTERN,    pattern);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
206	[BUG]  [BUGGY]  Iterator  <  String>  it  =  registry.entities.iterator();  [CE]  cannot  find  symbol  entities  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  String>  it  =  registry.entities.iterator();  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  String>  it  =  registry.entities.iterator();	  Iterator    <    String>    it    =    registry.iterator();    	non-compiled	[CE]  cannot  find  symbol  entities	8	None	replace
207	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.pattern.iterator();  [CE]  pattern  has  private  access  in  MessageFormat  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  String>  it  =  this.pattern.iterator();  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  String>  it  =  this.pattern.iterator();	  Iterator    <    String>    it    =    pattern.iterator();    	non-compiled	[CE]  pattern  has  private  access  in  MessageFormat	103	None	replace
208	[BUG]  [BUGGY]  if(c  ==  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(c  ==  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(c  ==  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	  if(c    ==    null)    {    for(Iterator    <    Object>    it    =    c.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	96	None	replace
209	[BUG]  [BUGGY]  if(c!=  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(c!=  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(c!=  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	  if(c    ==    null)    {    for(Iterator    <    Object>    it    =    c.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	96	None	replace
210	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.AssertionFailedError:  toPattern;  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.AssertionFailedError:  toPattern;  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.AssertionFailedError:  toPattern;	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    toPattern;    	non-compiled	[CE]  not  a  statement	90	None	replace
211	[BUG]  [BUGGY]  List  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.AssertionFailedError:  toPattern;  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  List  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.AssertionFailedError:  toPattern;  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	List  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.AssertionFailedError:  toPattern;	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    toPattern;    	non-compiled	[CE]  not  a  statement	90	None	replace
212	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.assertionFailedError:  toPattern;  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.assertionFailedError:  toPattern;  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern.assertionFailedError:  toPattern;	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    toPattern;    	non-compiled	[CE]  not  a  statement	90	None	replace
213	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  registry.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  Object>  it  =  registry.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  registry.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	  Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
214	[BUG]  [BUGGY]  Iterator  <  String>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  String>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  String>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	  Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
215	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	  Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
216	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  registry.entities.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  Object>  it  =  registry.entities.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  registry.entities.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	  Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
217	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  registry.registerFormat(foundDescriptions,  pattern);  [CE]  cannot  find  symbol  foundDescriptions  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  registry.registerFormat(foundDescriptions,  pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  registry.registerFormat(foundDescriptions,  pattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(foundDescriptions,    pattern);    	non-compiled	[CE]  cannot  find  symbol  foundDescriptions	56	None	replace
218	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  cannot  find  symbol  fmtCount  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	  for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  cannot  find  symbol  fmtCount	93	None	replace
219	[BUG]  [BUGGY]  for(int  i  =  fmtCount;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  cannot  find  symbol  fmtCount  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(int  i  =  fmtCount;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(int  i  =  fmtCount;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	  for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  cannot  find  symbol  fmtCount	93	None	replace
220	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  '.class'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  For(int  i  =  0;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	For(int  i  =  0;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	  for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  '.class'  expected	93	None	replace
221	[BUG]  [BUGGY]  for(int  i  =  index;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  cannot  find  symbol  index  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(int  i  =  index;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(int  i  =  index;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	  for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  cannot  find  symbol  index	93	None	replace
222	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  if(toPattern!=  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(fmtCount  ==  0)  {  if(toPattern!=  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(fmtCount  ==  0)  {  if(toPattern!=  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,	  if(toPattern!=    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i);    }    	non-compiled	[CE]  ')'  expected	18	None	replace
223	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  if(toPattern!=  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(fmtCount  ==  0)  {  if(toPattern!=  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(fmtCount  ==  0)  {  if(toPattern!=  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }	  if(toPattern!=    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
224	[BUG]  [BUGGY]  Formats.for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Formats.for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Formats.for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
225	[BUG]  [BUGGY]  For(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  For(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	For(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ')'  expected	25	None	replace
226	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
227	[BUG]  [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(foundDescriptions  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	23	None	replace
228	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern.AssertionFailedError:  this.registry.applyPattern(pattern);  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern.AssertionFailedError:  this.registry.applyPattern(pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern.AssertionFailedError:  this.registry.applyPattern(pattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    this.registry.applyPattern(pattern);    	non-compiled	[CE]  not  a  statement	54	None	replace
229	[BUG]  [BUGGY]  if(junit.framework.AssertionFailedError)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework.AssertionFailedError)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework.AssertionFailedError)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    this.registry.applyPattern(pattern);    	non-compiled	[CE]  not  a  statement	54	None	replace
230	[BUG]  [BUGGY]  if(junit.framework.AssertionFailedError)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  this.registry.applyPattern(pattern);  }  [CE]  package  junit  does  not  exist  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework.AssertionFailedError)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  this.registry.applyPattern(pattern);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework.AssertionFailedError)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  this.registry.applyPattern(pattern);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    this.registry.applyPattern(pattern);    	non-compiled	[CE]  package  junit  does  not  exist	54	None	replace
231	[BUG]  [BUGGY]  int  fmtCount  =  toPattern.length()  /  2;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  int  fmtCount  =  toPattern.length()  /  2;  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	int  fmtCount  =  toPattern.length()  /  2;	  int    fmtCount    =    toPattern.length()    *    2;    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	45	None	replace
232	[BUG]  [BUGGY]  int  fmtCount  =  toPattern.length()  -  2;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  int  fmtCount  =  toPattern.length()  -  2;  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	int  fmtCount  =  toPattern.length()  -  2;	  int    fmtCount    =    toPattern.length()    *    2;    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	45	None	replace
233	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  this.toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  this.toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  this.toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
234	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  chart.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  cannot  find  symbol  chart  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  chart.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  chart.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  chart	86	None	replace
235	[BUG]  [BUGGY]  Formats.for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Formats.for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Formats.for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  for(Iterator    <    Object>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
236	[BUG]  [BUGGY]  For(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  For(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	For(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  for(Iterator    <    Object>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  ')'  expected	22	None	replace
237	[BUG]  [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(foundDescriptions  ==  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	34	None	replace
238	[BUG]  [BUGGY]  if(toPattern!=  null)  {  toPattern  =  new  Format[1];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(toPattern!=  null)  {  toPattern  =  new  Format[1];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern!=  null)  {  toPattern  =  new  Format[1];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }	  if(toPattern    ==    null)    {    toPattern    =    new    Format[1];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
239	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[1];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  }  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(fmtCount  ==  0)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[1];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(fmtCount  ==  0)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[1];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  }	  if(toPattern    ==    null)    {    toPattern    =    new    Format[1];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
240	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[1];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(fmtCount  ==  0)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[1];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(fmtCount  ==  0)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[1];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }	  if(toPattern    ==    null)    {    toPattern    =    new    Format[1];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
241	[BUG]  [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(foundDescriptions  ==  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	4	None	replace
242	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  Iterator    <    Object>    it    =    toPatterns.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
243	[BUG]  [BUGGY]  if(junit.framework!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    this.registry.applyPattern(pattern);    	non-compiled	[CE]  not  a  statement	11	None	replace
244	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(toPattern!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  ';'  expected	80	None	replace
245	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }  [CE]  cannot  find  symbol  start  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }	  if(toPattern!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  cannot  find  symbol  start	108	None	replace
246	[BUG]  [BUGGY]  if(registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern);  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(DUMMY_PATTERN,    pattern);    	non-compiled	[CE]  not  a  statement	72	None	replace
247	[BUG]  [BUGGY]  int  fmtCount  =  toPattern.length()  *  2  +  1;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  int  fmtCount  =  toPattern.length()  *  2  +  1;  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	int  fmtCount  =  toPattern.length()  *  2  +  1;	  int    fmtCount    =    toPattern.length()    *    2;    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	45	None	replace
248	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  new  Format[0];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  new  Format[0];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern  ==  null)  {  toPattern  =  new  Format[0];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }	  if(toPattern    ==    null)    {    toPattern    =    new    Format[1];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
249	[BUG]  [BUGGY]  if(toPattern!=  null)  {  toPattern  =  new  Format[0];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(toPattern!=  null)  {  toPattern  =  new  Format[0];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern!=  null)  {  toPattern  =  new  Format[0];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }	  if(toPattern    ==    null)    {    toPattern    =    new    Format[1];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
250	[BUG]  [BUGGY]  Collection  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  junit.framework.AssertionFailedError:  registry.  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Collection  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  junit.framework.AssertionFailedError:  registry.  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Collection    <    Format>    foundFormats    =    new    ArrayList    <    Format>();    junit.framework.AssertionFailedError:  registry.	  	non-compiled	[CE]  not  a  statement	75	None	add
251	[BUG]  [BUGGY]  Collection  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern);  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Collection  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Collection    <    Format>    foundFormats    =    new    ArrayList    <    Format>();    junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern);	  	non-compiled	[CE]  not  a  statement	75	None	add
252	[BUG]  [BUGGY]  Collection  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  junit.framework.AssertionFailedError:  toPattern;  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Collection  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  junit.framework.AssertionFailedError:  toPattern;  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Collection    <    Format>    foundFormats    =    new    ArrayList    <    Format>();    junit.framework.AssertionFailedError:  toPattern;	  	non-compiled	[CE]  not  a  statement	75	None	add
253	[BUG]  [BUGGY]  Collection  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Collection  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Collection    <    Format>    foundFormats    =    new    ArrayList    <    Format>();    junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);	  	non-compiled	[CE]  not  a  statement	75	None	add
254	[BUG]  [BUGGY]  Collection  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  stripCustom);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Collection  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  stripCustom);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Collection    <    Format>    foundFormats    =    new    ArrayList    <    Format>();    junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  stripCustom);	  	non-compiled	[CE]  not  a  statement	75	None	add
255	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  formatDescription);  [CE]  cannot  find  symbol  formatDescription  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  formatDescription);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  formatDescription);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(toPattern,    origFormats);    	non-compiled	[CE]  cannot  find  symbol  formatDescription	52	None	replace
256	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  fmtCount);  [CE]  cannot  find  symbol  fmtCount  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  fmtCount);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  fmtCount);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(toPattern,    origFormats);    	non-compiled	[CE]  cannot  find  symbol  fmtCount	52	None	replace
257	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  format);  [CE]  cannot  find  symbol  format  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  format);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  format);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(toPattern,    origFormats);    	non-compiled	[CE]  cannot  find  symbol  format	52	None	replace
258	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  cannot  find  symbol  foundDescriptions  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  String>  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  String>  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  foundDescriptions	25	None	replace
259	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  cannot  find  symbol  foundFormats  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  foundFormats	25	None	replace
260	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  toPattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  String>  it  =  toPattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  String>  it  =  toPattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
261	[BUG]  [BUGGY]  if(registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern);  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    registry.registerFormat(DUMMY_PATTERN,    pattern);    	non-compiled	[CE]  not  a  statement	89	None	replace
262	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  if(toPattern!=  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(fmtCount  ==  0)  {  if(toPattern!=  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(fmtCount  ==  0)  {  if(toPattern!=  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString	  if(toPattern!=    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
263	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(DUMMY_PATTERN);  [CE]  no  suitable  constructor  found  for  ArrayList(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(DUMMY_PATTERN);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(DUMMY_PATTERN);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(origFormats);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(String)	49	None	replace
264	[BUG]  [BUGGY]  if(registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundFormats);  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundFormats);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundFormats);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(DUMMY_PATTERN,    foundFormats);    	non-compiled	[CE]  not  a  statement	106	None	replace
265	[BUG]  [BUGGY]  if(registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundFormats);  }  else  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundFormats);  }  else  {  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundFormats);  }  else  {	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(DUMMY_PATTERN,    foundFormats);    	non-compiled	[CE]  not  a  statement	106	None	replace
266	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundFormats);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundFormats);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundFormats);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(DUMMY_PATTERN,    foundFormats);    	non-compiled	[CE]  not  a  statement	106	None	replace
267	[BUG]  [BUGGY]  if(junit.framework!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);  }  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    registry.registerFormat(foundDescriptions,    pattern);    	non-compiled	[CE]  not  a  statement	14	None	replace
268	[BUG]  [BUGGY]  if(junit.framework!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);  }  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    registry.registerFormat(this,    foundFormats);    	non-compiled	[CE]  not  a  statement	92	None	replace
269	[BUG]  [BUGGY]  if(registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);  }  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    registry.registerFormat(this,    foundFormats);    	non-compiled	[CE]  not  a  statement	92	None	replace
270	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.  [CE]  package  registry  does  not  exist  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.    	non-compiled	[CE]  package  registry  does  not  exist	71	None	replace
271	[BUG]  [BUGGY]  if(registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.    	non-compiled	[CE]  not  a  statement	71	None	replace
272	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  junit.framework.AssertionFailedError:  registry.  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  junit.framework.AssertionFailedError:  registry.  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(4);    junit.framework.AssertionFailedError:  registry.	  	non-compiled	[CE]  not  a  statement	58	None	add
273	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern);  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(4);    junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern);	  	non-compiled	[CE]  not  a  statement	58	None	add
274	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(4);    junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);	  	non-compiled	[CE]  not  a  statement	58	None	add
275	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  junit.framework.AssertionFailedError:  registry.registerFormat(foundFormats);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  junit.framework.AssertionFailedError:  registry.registerFormat(foundFormats);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(4);    junit.framework.AssertionFailedError:  registry.registerFormat(foundFormats);	  	non-compiled	[CE]  not  a  statement	58	None	add
276	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  junit.framework.AssertionFailedError:  toPattern;  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  junit.framework.AssertionFailedError:  toPattern;  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(4);    junit.framework.AssertionFailedError:  toPattern;	  	non-compiled	[CE]  not  a  statement	58	None	add
277	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
278	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  if(fmtCount  ==  0)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(toPattern  ==  null)  {  if(fmtCount  ==  0)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern  ==  null)  {  if(fmtCount  ==  0)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString	  if(fmtCount    ==    0)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i);    }    	non-compiled	[CE]  ';'  expected	60	None	replace
279	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  Collections.newArrayList();  [CE]  cannot  find  symbol  Collections  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  String>  foundDescriptions  =  Collections.newArrayList();  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  String>  foundDescriptions  =  Collections.newArrayList();	  ArrayList    <    String>    foundDescriptions    =    Lists.newArrayList();    	non-compiled	[CE]  cannot  find  symbol  Collections	81	None	replace
280	[BUG]  [BUGGY]  if(toPattern!=  null)  {  Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(toPattern!=  null)  {  Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern!=  null)  {  Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
281	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.  [CE]  package  registry  does  not  exist  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    registry.    	non-compiled	[CE]  package  registry  does  not  exist	88	None	replace
282	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  Registry.AssertionFailedError:  registry.  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  Registry.AssertionFailedError:  registry.  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  Registry.AssertionFailedError:  registry.	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    registry.    	non-compiled	[CE]  not  a  statement	88	None	replace
283	[BUG]  [BUGGY]  if(it.hasNext())  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  it.remove();  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(it.hasNext())  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  it.remove();  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(it.hasNext())  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  it.remove();  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    it.remove();    	non-compiled	[CE]  not  a  statement	104	None	replace
284	[BUG]  [BUGGY]  List  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  List  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	List  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
285	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  registry.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  registry.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  registry.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
286	[BUG]  [BUGGY]  if(junit.framework!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    this.registry.applyPattern(pattern);    	non-compiled	[CE]  not  a  statement	54	None	replace
287	[BUG]  [BUGGY]  if(this.registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(this.registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(this.registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    this.registry.applyPattern(pattern);    	non-compiled	[CE]  not  a  statement	54	None	replace
288	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  [CE]  variable  foundFormats  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(2);    ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);	  	non-compiled	[CE]  variable  foundFormats  is  already  defined  in  method  applyPattern(String)	39	None	add
289	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  junit.framework.AssertionFailedError:  registry.  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  junit.framework.AssertionFailedError:  registry.  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(2);    junit.framework.AssertionFailedError:  registry.	  	non-compiled	[CE]  not  a  statement	39	None	add
290	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern);  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(2);    junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern);	  	non-compiled	[CE]  not  a  statement	39	None	add
291	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(2);    junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);	  	non-compiled	[CE]  not  a  statement	39	None	add
292	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  junit.framework.AssertionFailedError:  toPattern;  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  junit.framework.AssertionFailedError:  toPattern;  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(2);    junit.framework.AssertionFailedError:  toPattern;	  	non-compiled	[CE]  not  a  statement	39	None	add
293	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.registry.values().iterator();  [CE]  incompatible  types  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  String>  it  =  this.registry.values().iterator();  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  String>  it  =  this.registry.values().iterator();	  Iterator    <    String>    it    =    this.registry.iterator();    	non-compiled	[CE]  incompatible  types	87	None	replace
294	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  toPattern.remove();  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  toPattern.remove();  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  toPattern.remove();	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    it.remove();    	non-compiled	[CE]  not  a  statement	116	None	replace
295	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  this.registry.keySet().iterator();  [CE]  incompatible  types  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  Object>  it  =  this.registry.keySet().iterator();  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  this.registry.keySet().iterator();	  Iterator    <    Object>    it    =    this.registry.iterator();    	non-compiled	[CE]  incompatible  types	83	None	replace
296	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  this.registry.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  this.registry.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  this.registry.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  for(Iterator    <    Object>    it    =    pattern.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
297	[BUG]  [BUGGY]  if(junit.framework!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  toPattern;  }  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  toPattern;  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  toPattern;  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    toPattern;    	non-compiled	[CE]  not  a  statement	74	None	replace
298	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  new  Format[]  {  pattern  }  );  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  new  Format[]  {  pattern  }  );  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  new  Format[]  {  pattern  }  );	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(DUMMY_PATTERN,    new    Format[]    {    pattern    }    );    	non-compiled	[CE]  not  a  statement	105	None	replace
299	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i,  stripCustom,  true);  }  [CE]  cannot  find  symbol  start  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i,  stripCustom,  true);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i,  stripCustom,  true);  }	  if(fmtCount    ==    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    i,    stripCustom,    true);    }    	non-compiled	[CE]  cannot  find  symbol  start	99	None	replace
300	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.plots.iterator();  [CE]  cannot  find  symbol  plots  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  String>  it  =  this.plots.iterator();  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  String>  it  =  this.plots.iterator();	  Iterator    <    String>    it    =    pattern.iterator();    	non-compiled	[CE]  cannot  find  symbol  plots	103	None	replace
301	[BUG]  [BUGGY]  if(origFormats!=  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  toPattern,  stripCustom,  true);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(origFormats!=  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  toPattern,  stripCustom,  true);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(origFormats!=  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  toPattern,  stripCustom,  true);  }	  if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    toPattern,    stripCustom,    true);    }    	non-compiled	[CE]  ';'  expected	120	None	replace
302	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(toPattern!=  null)  {  for(Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern!=  null)  {  for(Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    pattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	94	None	replace
303	[BUG]  [BUGGY]  if(toPattern!=  null)  {  Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(toPattern!=  null)  {  Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern!=  null)  {  Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	  Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
304	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	  Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
305	[BUG]  [BUGGY]  if(toPattern!=  null)  {  Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(toPattern!=  null)  {  Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern!=  null)  {  Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
306	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
307	[BUG]  [BUGGY]  Integer  fmtCount  =  toPattern.indexOf(';');  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Integer  fmtCount  =  toPattern.indexOf(';');  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Integer  fmtCount  =  toPattern.indexOf(';');	  if(fmtCount    ==    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    i    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	107	None	replace
308	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(0);  [CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(0);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(0);	  ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>();    	non-compiled	[CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)	27	None	replace
309	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(fmtCount  ==  0)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(fmtCount  ==  0)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(	  if(fmtCount    ==    0)    {    if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    	non-compiled	[CE]  ')'  expected	20	None	replace
310	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(8);  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(8);  [CE]  variable  foundFormats  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(8);  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(8);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(8);    ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(8);	  	non-compiled	[CE]  variable  foundFormats  is  already  defined  in  method  applyPattern(String)	101	None	add
311	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(8);  junit.framework.AssertionFailedError:  registry.  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(8);  junit.framework.AssertionFailedError:  registry.  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(8);    junit.framework.AssertionFailedError:  registry.	  	non-compiled	[CE]  not  a  statement	101	None	add
312	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(8);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern);  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(8);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(8);    junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern);	  	non-compiled	[CE]  not  a  statement	101	None	add
313	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(8);  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(8);  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(8);    junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);	  	non-compiled	[CE]  not  a  statement	101	None	add
314	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(8);  junit.framework.AssertionFailedError:  toPattern;  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(8);  junit.framework.AssertionFailedError:  toPattern;  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(8);    junit.framework.AssertionFailedError:  toPattern;	  	non-compiled	[CE]  not  a  statement	101	None	add
315	[BUG]  [BUGGY]  if(junit.framework!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);  }  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(this,    foundFormats);    	non-compiled	[CE]  not  a  statement	73	None	replace
316	[BUG]  [BUGGY]  if(registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);  }  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(this,    foundFormats);    	non-compiled	[CE]  not  a  statement	73	None	replace
317	[BUG]  [BUGGY]  if(registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(foundDescriptions,    pattern);    	non-compiled	[CE]  not  a  statement	56	None	replace
318	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(foundDescriptions,    pattern);    	non-compiled	[CE]  not  a  statement	56	None	replace
319	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  cannot  find  symbol  foundFormats  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	  for(Iterator    <    Object>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  foundFormats	6	None	replace
320	[BUG]  [BUGGY]  if(junit.framework!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  this.registry.appendPattern(pattern);  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  this.registry.appendPattern(pattern);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  this.registry.appendPattern(pattern);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    this.registry.appendPattern(pattern);    	non-compiled	[CE]  not  a  statement	12	None	replace
321	[BUG]  [BUGGY]  if(c!=  null)  {  for(Iterator  <  Object>  it  =  c.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(c!=  null)  {  for(Iterator  <  Object>  it  =  c.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(c!=  null)  {  for(Iterator  <  Object>  it  =  c.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	  if(c    ==    null)    {    for(Iterator    <    Object>    it    =    c.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	96	None	replace
322	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	  if(c    ==    null)    {    for(Iterator    <    Object>    it    =    c.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	96	None	replace
323	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(7);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	add	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(7);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(8);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	102	1	replace
324	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(7);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(7);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(7);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(8);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	102	1	replace
325	[BUG]  [BUGGY]  for(int  i  =  index;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }  [CE]  cannot  find  symbol  index  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(int  i  =  index;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(int  i  =  index;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }	  for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    i    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  cannot  find  symbol  index	66	None	replace
326	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  this.toPattern.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  Object>  it  =  this.toPattern.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  this.toPattern.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
327	[BUG]  [BUGGY]  Iterator  <  String>  it  =  registry.getFormat().iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  String>  it  =  registry.getFormat().iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  String>  it  =  registry.getFormat().iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  Iterator    <    String>    it    =    pattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
328	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  flags.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  cannot  find  symbol  flags  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  flags.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  flags.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	  for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  flags	69	None	replace
329	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendDescription(it.next());  }  [CE]  cannot  find  symbol  foundDescriptions  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendDescription(it.next());  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendDescription(it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    appendDescription(it.next());    }    	non-compiled	[CE]  cannot  find  symbol  foundDescriptions	82	None	replace
330	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  this.formats.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  formats  has  private  access  in  MessageFormat  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  this.formats.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  this.formats.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  for(Iterator    <    Object>    it    =    toPatterns.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  formats  has  private  access  in  MessageFormat	77	None	replace
331	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  this.stripCustom.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  cannot  find  symbol  stripCustom  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  this.stripCustom.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  this.stripCustom.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  for(Iterator    <    Object>    it    =    toPatterns.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  stripCustom	77	None	replace
332	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(DUMMY_PATTERN.length);  [CE]  cannot  find  symbol  length  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(DUMMY_PATTERN.length);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(DUMMY_PATTERN.length);	  ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(origFormats.length);    	non-compiled	[CE]  cannot  find  symbol  length	29	None	replace
333	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(description.length);  [CE]  cannot  find  symbol  description  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(description.length);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(description.length);	  ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(origFormats.length);    	non-compiled	[CE]  cannot  find  symbol  description	29	None	replace
334	[BUG]  [BUGGY]  if(c  ==  null)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(c  ==  null)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(c  ==  null)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString	  if(c    ==    null)    {    if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i);    }    }    	non-compiled	[CE]  ';'  expected	19	None	replace
335	[BUG]  [BUGGY]  if(c!=  null)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(c!=  null)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(c!=  null)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString	  if(c    ==    null)    {    if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i);    }    }    	non-compiled	[CE]  ';'  expected	19	None	replace
336	[BUG]  [BUGGY]  if(this.registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(this.registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(this.registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    this.registry.applyPattern(pattern,    toPattern);    	non-compiled	[CE]  not  a  statement	13	None	replace
337	[BUG]  [BUGGY]  if(junit.framework!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);  }  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    this.registry.applyPattern(pattern,    toPattern);    	non-compiled	[CE]  not  a  statement	13	None	replace
338	[BUG]  [BUGGY]  if(registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(registry!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(foundDescriptions,    true);    	non-compiled	[CE]  not  a  statement	55	None	replace
339	[BUG]  [BUGGY]  if(junit.framework!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(foundDescriptions,    true);    	non-compiled	[CE]  not  a  statement	55	None	replace
340	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(8);  junit.framework.AssertionFailedError:  it.remove();  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(8);  junit.framework.AssertionFailedError:  it.remove();  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(8);    junit.framework.AssertionFailedError:  it.remove();	  	non-compiled	[CE]  not  a  statement	101	None	add
341	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(8);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  new  Format[]  {  pattern  }  );  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(8);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  new  Format[]  {  pattern  }  );  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(8);    junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  new  Format[]  {  pattern  }  );	  	non-compiled	[CE]  not  a  statement	101	None	add
342	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(8);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundFormats);  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(8);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundFormats);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(8);    junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundFormats);	  	non-compiled	[CE]  not  a  statement	101	None	add
343	[BUG]  [BUGGY]  if(junit.framework.AssertionFailedError!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework.AssertionFailedError!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework.AssertionFailedError!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(foundDescriptions,    true);    	non-compiled	[CE]  not  a  statement	55	None	replace
344	[BUG]  [BUGGY]  if(junit.framework.AssertionFailedError  <  =  0)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework.AssertionFailedError  <  =  0)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework.AssertionFailedError  <  =  0)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(foundDescriptions,    true);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
345	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.registry.entities.iterator();  [CE]  cannot  find  symbol  entities  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  String>  it  =  this.registry.entities.iterator();  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  String>  it  =  this.registry.entities.iterator();	  Iterator    <    String>    it    =    this.registry.iterator();    	non-compiled	[CE]  cannot  find  symbol  entities	87	None	replace
346	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.registry.listIterator();  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  String>  it  =  this.registry.listIterator();  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  String>  it  =  this.registry.listIterator();	  Iterator    <    String>    it    =    this.registry.iterator();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
347	[BUG]  [BUGGY]  if(c  ==  null  ||  c.length  <  2)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(c  ==  null  ||  c.length  <  2)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(c  ==  null  ||  c.length  <  2)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString	  if(c    ==    null)    {    if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i);    }    }    	non-compiled	[CE]  ';'  expected	19	None	replace
348	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  false);  }  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  false);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  false);  }	  if(fmtCount    ==    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  ';'  expected	109	None	replace
349	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount  +  1;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount  +  1;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount  +  1;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }	  if(fmtCount    ==    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  ';'  expected	109	None	replace
350	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  c.length;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }  [CE]  ';'  expected  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  c.length;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  c.length;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }	  if(fmtCount    ==    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  ';'  expected	109	None	replace
351	[BUG]  [BUGGY]  if(junit.framework.AssertionFailedError)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);  }  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework.AssertionFailedError)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework.AssertionFailedError)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    this.registry.applyPattern(pattern,    toPattern);    	non-compiled	[CE]  not  a  statement	57	None	replace
352	[BUG]  [BUGGY]  if(junit.framework.AssertionFailedError  <  =  0)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework.AssertionFailedError  <  =  0)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework.AssertionFailedError  <  =  0)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    this.registry.applyPattern(pattern,    toPattern);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
353	[BUG]  [BUGGY]  Iterator  <  String>  it  =  c.iterator();  [CE]  cannot  find  symbol  c  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  String>  it  =  c.iterator();  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  String>  it  =  c.iterator();	  Iterator    <    String>    it    =    registry.iterator();    	non-compiled	[CE]  cannot  find  symbol  c	8	None	replace
354	[BUG]  [BUGGY]  if(junit.framework.AssertionFailedError!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.registerFormat(this,  foundFormats);  }  [CE]  package  junit  does  not  exist  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework.AssertionFailedError!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.registerFormat(this,  foundFormats);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework.AssertionFailedError!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  registry.registerFormat(this,  foundFormats);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(this,    foundFormats);    	non-compiled	[CE]  package  junit  does  not  exist	73	None	replace
355	[BUG]  [BUGGY]  if(junit.framework.AssertionFailedError!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework.AssertionFailedError!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework.AssertionFailedError!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(this,    foundFormats);    	non-compiled	[CE]  not  a  statement	73	None	replace
356	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  pattern.entrySet().iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  pattern.entrySet().iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  pattern.entrySet().iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  for(Iterator    <    Object>    it    =    pattern.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
357	[BUG]  [BUGGY]  if(junit.framework.AssertionFailedError  <  =  0)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework.AssertionFailedError  <  =  0)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework.AssertionFailedError  <  =  0)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    this.registry.applyPattern(pattern);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
358	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    this.registry.applyPattern(pattern);    	non-compiled	[CE]  not  a  statement	54	None	replace
359	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern,  toPattern);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern,  toPattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern,  toPattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    registry.registerFormat(foundDescriptions,    pattern);    	non-compiled	[CE]  not  a  statement	14	None	replace
360	[BUG]  [BUGGY]  int  fmtCount  =  pattern.toPattern.length();  [CE]  cannot  find  symbol  toPattern  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  int  fmtCount  =  pattern.toPattern.length();  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	int  fmtCount  =  pattern.toPattern.length();	  int    fmtCount    =    this.toPattern.length();    	non-compiled	[CE]  cannot  find  symbol  toPattern	100	None	replace
361	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount  +  1;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount  +  1;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount  +  1;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	  if(fmtCount    ==    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    }    	non-compiled	[CE]  ';'  expected	112	None	replace
362	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  leftDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  cannot  find  symbol  leftDescriptions  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  leftDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  leftDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  for(Iterator    <    Object>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  cannot  find  symbol  leftDescriptions	16	None	replace
363	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  c.length;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  c.length;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  c.length;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	  if(fmtCount    ==    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  ';'  expected	98	None	replace
364	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  left.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  cannot  find  symbol  left  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  left.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  left.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	  for(Iterator    <    Object>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  left	6	None	replace
365	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  this.descriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  cannot  find  symbol  descriptions  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  this.descriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  this.descriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	  for(Iterator    <    Object>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  descriptions	6	None	replace
366	[BUG]  [BUGGY]  if(toPattern!=  null)  {  Iterator  <  Object>  it  =  toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(toPattern!=  null)  {  Iterator  <  Object>  it  =  toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern!=  null)  {  Iterator  <  Object>  it  =  toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  Iterator    <    Object>    it    =    toPatterns.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
367	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  chart.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  Object>  it  =  chart.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  chart.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  Iterator    <    Object>    it    =    toPatterns.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
368	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundFormats);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundFormats);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundFormats);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(DUMMY_PATTERN,    foundFormats);    	non-compiled	[CE]  not  a  statement	106	None	replace
369	[BUG]  [BUGGY]  if(junit.framework.AssertionFailedError)registry.registerFormat(DUMMY_PATTERN,  foundFormats);  [CE]  package  junit  does  not  exist  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework.AssertionFailedError)registry.registerFormat(DUMMY_PATTERN,  foundFormats);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework.AssertionFailedError)registry.registerFormat(DUMMY_PATTERN,  foundFormats);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(DUMMY_PATTERN,    foundFormats);    	non-compiled	[CE]  package  junit  does  not  exist	106	None	replace
370	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundDescriptions);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundDescriptions);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundDescriptions);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(DUMMY_PATTERN,    foundFormats);    	non-compiled	[CE]  not  a  statement	106	None	replace
371	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  pattern.entrySet().iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  pattern.entrySet().iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  pattern.entrySet().iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	  for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
372	[BUG]  [BUGGY]  if(origFormats!=  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendDescription(it.next());  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(origFormats!=  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendDescription(it.next());  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(origFormats!=  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendDescription(it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    appendDescription(it.next());    }    	non-compiled	[CE]  ';'  expected	82	None	replace
373	[BUG]  [BUGGY]  if(origFormats  ==  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendDescription(it.next());  }  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(origFormats  ==  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendDescription(it.next());  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(origFormats  ==  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendDescription(it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    appendDescription(it.next());    }    	non-compiled	[CE]  ';'  expected	82	None	replace
374	[BUG]  [BUGGY]  Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendDescription(it.next());  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendDescription(it.next());  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendDescription(it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    appendDescription(it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
375	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  pattern.entrySet().iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  String>  it  =  pattern.entrySet().iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  String>  it  =  pattern.entrySet().iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  for(Iterator    <    String>    it    =    pattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
376	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  pattern.listIterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  String>  it  =  pattern.listIterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  String>  it  =  pattern.listIterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  for(Iterator    <    String>    it    =    pattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
377	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.formatDescription.entrySet().iterator();  [CE]  cannot  find  symbol  formatDescription  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  String>  it  =  this.formatDescription.entrySet().iterator();  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  String>  it  =  this.formatDescription.entrySet().iterator();	  Iterator    <    String>    it    =    this.formatDescription.iterator();    	non-compiled	[CE]  cannot  find  symbol  formatDescription	9	None	replace
378	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  false);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  false);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  false);  }	  if(toPattern    ==    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    i    +    1,    stripCustom,    false);    }    	non-compiled	[CE]  ';'  expected	1	None	replace
379	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(format.length);  [CE]  cannot  find  symbol  format  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(format.length);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(format.length);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(fmtCount);    	non-compiled	[CE]  cannot  find  symbol  format	111	None	replace
380	[BUG]  [BUGGY]  if(junit.framework.AssertionFailedError!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);  }  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework.AssertionFailedError!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework.AssertionFailedError!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    registry.registerFormat(this,    foundFormats);    	non-compiled	[CE]  not  a  statement	92	None	replace
381	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.AssertionFailedError:  it.  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.AssertionFailedError:  it.  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  registry.AssertionFailedError:  it.	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    registry.    	non-compiled	[CE]  not  a  statement	88	None	replace
382	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  chart.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  Object>  it  =  chart.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  chart.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
383	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(pattern.length());  [CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(pattern.length());  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(pattern.length());	  ArrayList    <    String>    foundDescriptions    =    new    ArrayList    <    String>(toPattern.length());    	non-compiled	[CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)	28	None	replace
384	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  Iterator  <  String>  it  =  pattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(toPattern  ==  null)  {  Iterator  <  String>  it  =  pattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern  ==  null)  {  Iterator  <  String>  it  =  pattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  Iterator    <    String>    it    =    pattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
385	[BUG]  [BUGGY]  Iterator  <  String>  it  =  pattern.iterator();  it.hasNext();)  {  toPattern.appendQuotedString(pattern,  pos,  it.next());  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  String>  it  =  pattern.iterator();  it.hasNext();)  {  toPattern.appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  String>  it  =  pattern.iterator();  it.hasNext();)  {  toPattern.appendQuotedString(pattern,  pos,  it.next());  }	  Iterator    <    String>    it    =    pattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
386	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  this.registry.entities.iterator();  [CE]  cannot  find  symbol  entities  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  Object>  it  =  this.registry.entities.iterator();  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  this.registry.entities.iterator();	  Iterator    <    Object>    it    =    registry.iterator();    	non-compiled	[CE]  cannot  find  symbol  entities	46	None	replace
387	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  new  Format[]  {  pattern  }  );  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  new  Format[]  {  pattern  }  );  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(2);    junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  new  Format[]  {  pattern  }  );	  	non-compiled	[CE]  not  a  statement	39	None	add
388	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundFormats);  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundFormats);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(2);    junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundFormats);	  	non-compiled	[CE]  not  a  statement	39	None	add
389	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  junit.framework.AssertionFailedError:  it.remove();  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  junit.framework.AssertionFailedError:  it.remove();  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(2);    junit.framework.AssertionFailedError:  it.remove();	  	non-compiled	[CE]  not  a  statement	39	None	add
390	[BUG]  [BUGGY]  if(junit.framework.AssertionFailedError)registry.registerFormat(DUMMY_PATTERN,  pattern);  [CE]  package  junit  does  not  exist  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework.AssertionFailedError)registry.registerFormat(DUMMY_PATTERN,  pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework.AssertionFailedError)registry.registerFormat(DUMMY_PATTERN,  pattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    registry.registerFormat(DUMMY_PATTERN,    pattern);    	non-compiled	[CE]  package  junit  does  not  exist	89	None	replace
391	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    registry.registerFormat(DUMMY_PATTERN,    pattern);    	non-compiled	[CE]  not  a  statement	89	None	replace
392	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  registry.  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  junit.framework.AssertionFailedError:  registry.  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	junit.framework.AssertionFailedError:  registry.	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.    	non-compiled	[CE]  not  a  statement	71	None	replace
393	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  char[]  c  =  pattern.toCharArray();  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	char[]  c  =  pattern.toCharArray();	  if(toPattern    ==    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    }    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	32	None	replace
394	[BUG]  [BUGGY]  if(c  ==  null)  {  if(toPattern!=  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(c  ==  null)  {  if(toPattern!=  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(c  ==  null)  {  if(toPattern!=  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }	  if(toPattern!=    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
395	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  p,  stripCustom,  true);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  p,  stripCustom,  true);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  p,  stripCustom,  true);  }	  if(fmtCount    ==    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    i,    stripCustom,    true);    }    	non-compiled	[CE]  ';'  expected	99	None	replace
396	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(format!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(format!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	23	None	replace
397	[BUG]  [BUGGY]  if(c  ==  null)  {  for(Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(c  ==  null)  {  for(Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(c  ==  null)  {  for(Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    pattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	94	None	replace
398	[BUG]  [BUGGY]  if(junit.framework.AssertionFailedError!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern;  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework.AssertionFailedError!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern;  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework.AssertionFailedError!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  toPattern;  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    toPattern;    	non-compiled	[CE]  not  a  statement	90	None	replace
399	[BUG]  [BUGGY]  if(junit.framework.AssertionFailedError!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern;  }  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework.AssertionFailedError!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern;  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework.AssertionFailedError!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  toPattern;  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    toPattern;    	non-compiled	[CE]  not  a  statement	90	None	replace
400	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos.getIndex()  +  1,  stripCustom,  true);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos.getIndex()  +  1,  stripCustom,  true);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos.getIndex()  +  1,  stripCustom,  true);  }	  if(fmtCount    ==    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    i    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  ';'  expected	107	None	replace
401	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  c.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  cannot  find  symbol  c  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  String>  it  =  c.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  String>  it  =  c.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  c	25	None	replace
402	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  left.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  cannot  find  symbol  left  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  String>  it  =  left.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  String>  it  =  left.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  for(Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  left	25	None	replace
403	[BUG]  [BUGGY]  if(junit.framework.AssertionFailedError!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  toPattern;  }  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework.AssertionFailedError!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  toPattern;  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework.AssertionFailedError!=  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  toPattern;  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    toPattern;    	non-compiled	[CE]  not  a  statement	74	None	replace
404	[BUG]  [BUGGY]  if(junit.framework.AssertionFailedError  ==  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  toPattern;  }  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework.AssertionFailedError  ==  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  toPattern;  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework.AssertionFailedError  ==  null)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  toPattern;  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    toPattern;    	non-compiled	[CE]  not  a  statement	74	None	replace
405	[BUG]  [BUGGY]  if(origFormats!=  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(origFormats!=  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(origFormats!=  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  ';'  expected	80	None	replace
406	[BUG]  [BUGGY]  if(origFormats  ==  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(origFormats  ==  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(origFormats  ==  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  ';'  expected	80	None	replace
407	[BUG]  [BUGGY]  Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
408	[BUG]  [BUGGY]  if(junit.framework.AssertionFailedError  <  =  this.registry.appendPattern(pattern))  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  this.registry.appendPattern(pattern);  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework.AssertionFailedError  <  =  this.registry.appendPattern(pattern))  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  this.registry.appendPattern(pattern);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework.AssertionFailedError  <  =  this.registry.appendPattern(pattern))  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  this.registry.appendPattern(pattern);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    this.registry.appendPattern(pattern);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
409	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  this.registry.appendPattern(pattern);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  this.registry.appendPattern(pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  this.registry.appendPattern(pattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    this.registry.appendPattern(pattern);    	non-compiled	[CE]  not  a  statement	12	None	replace
410	[BUG]  [BUGGY]  if(junit.framework.AssertionFailedError)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  this.registry.appendPattern(pattern);  }  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework.AssertionFailedError)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  this.registry.appendPattern(pattern);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework.AssertionFailedError)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  this.registry.appendPattern(pattern);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    this.registry.appendPattern(pattern);    	non-compiled	[CE]  not  a  statement	12	None	replace
411	[BUG]  [BUGGY]  if(junit.framework.AssertionFailedError  <  =  this.registry.appendPattern(pattern))  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  this.registry.appendPattern(pattern);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework.AssertionFailedError  <  =  this.registry.appendPattern(pattern))  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  this.registry.appendPattern(pattern);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework.AssertionFailedError  <  =  this.registry.appendPattern(pattern))  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  this.registry.appendPattern(pattern);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    this.registry.appendPattern(pattern);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
412	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(5);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	add	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(5);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(4);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	59	1	replace
413	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(5);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(5);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(5);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(4);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	59	1	replace
414	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  new  Format[]  {  pattern  }  );  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  new  Format[]  {  pattern  }  );  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  new  Format[]  {  pattern  }  );	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(DUMMY_PATTERN,    new    Format[]    {    pattern    }    );    	non-compiled	[CE]  not  a  statement	105	None	replace
415	[BUG]  [BUGGY]  if(junit.framework.AssertionFailedError)registry.registerFormat(DUMMY_PATTERN,  new  Format[]  {  pattern  }  );  [CE]  package  junit  does  not  exist  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework.AssertionFailedError)registry.registerFormat(DUMMY_PATTERN,  new  Format[]  {  pattern  }  );  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework.AssertionFailedError)registry.registerFormat(DUMMY_PATTERN,  new  Format[]  {  pattern  }  );	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(DUMMY_PATTERN,    new    Format[]    {    pattern    }    );    	non-compiled	[CE]  package  junit  does  not  exist	105	None	replace
416	[BUG]  [BUGGY]  if(junit.framework.AssertionFailedError)registerFormat(DUMMY_PATTERN,  new  Format[]  {  pattern  }  );  [CE]  package  junit  does  not  exist  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework.AssertionFailedError)registerFormat(DUMMY_PATTERN,  new  Format[]  {  pattern  }  );  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework.AssertionFailedError)registerFormat(DUMMY_PATTERN,  new  Format[]  {  pattern  }  );	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(DUMMY_PATTERN,    new    Format[]    {    pattern    }    );    	non-compiled	[CE]  package  junit  does  not  exist	105	None	replace
417	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  chart.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  Object>  it  =  chart.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  chart.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	  Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
418	[BUG]  [BUGGY]  Collection  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  junit.framework.AssertionFailedError:  it.remove();  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Collection  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  junit.framework.AssertionFailedError:  it.remove();  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Collection    <    Format>    foundFormats    =    new    ArrayList    <    Format>();    junit.framework.AssertionFailedError:  it.remove();	  	non-compiled	[CE]  not  a  statement	75	None	add
419	[BUG]  [BUGGY]  Collection  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  this);  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Collection  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  this);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Collection    <    Format>    foundFormats    =    new    ArrayList    <    Format>();    junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  this);	  	non-compiled	[CE]  not  a  statement	75	None	add
420	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  chart.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  Object>  it  =  chart.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  chart.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
421	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  [CE]  variable  foundFormats  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(4);    ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);	  	non-compiled	[CE]  variable  foundFormats  is  already  defined  in  method  applyPattern(String)	58	None	add
422	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  junit.framework.AssertionFailedError:  it.remove();  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  junit.framework.AssertionFailedError:  it.remove();  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(4);    junit.framework.AssertionFailedError:  it.remove();	  	non-compiled	[CE]  not  a  statement	58	None	add
423	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  new  Format[]  {  pattern  }  );  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  new  Format[]  {  pattern  }  );  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(4);    junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  new  Format[]  {  pattern  }  );	  	non-compiled	[CE]  not  a  statement	58	None	add
424	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundFormats);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundFormats);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(4);    junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundFormats);	  	non-compiled	[CE]  not  a  statement	58	None	add
425	[BUG]  [BUGGY]  if(c  ==  null)  {  for(Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(c  ==  null)  {  for(Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(c  ==  null)  {  for(Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	  if(c    ==    null)    {    for(Iterator    <    Object>    it    =    c.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	96	None	replace
426	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern,  ESCAPED_QUOTE);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern,  ESCAPED_QUOTE);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern,  ESCAPED_QUOTE);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(DUMMY_PATTERN,    pattern);    	non-compiled	[CE]  not  a  statement	72	None	replace
427	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  left.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  cannot  find  symbol  left  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  left.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  left.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  for(Iterator    <    Object>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  left	22	None	replace
428	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  this.descriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  cannot  find  symbol  descriptions  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  this.descriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  this.descriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  for(Iterator    <    Object>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  descriptions	22	None	replace
429	[BUG]  [BUGGY]  if(junit.framework.AssertionFailedError)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework.AssertionFailedError)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework.AssertionFailedError)  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    this.registry.applyPattern(pattern);    	non-compiled	[CE]  not  a  statement	11	None	replace
430	[BUG]  [BUGGY]  int  fmtCount  =  pattern.length()  /  2;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  int  fmtCount  =  pattern.length()  /  2;  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	int  fmtCount  =  pattern.length()  /  2;	  int    fmtCount    =    toPattern.length()    *    2;    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	45	None	replace
431	[BUG]  [BUGGY]  Iterator  <  String>  it  =  pattern.toPattern.iterator();  [CE]  cannot  find  symbol  toPattern  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  String>  it  =  pattern.toPattern.iterator();  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  String>  it  =  pattern.toPattern.iterator();	  Iterator    <    String>    it    =    this.toPattern.iterator();    	non-compiled	[CE]  cannot  find  symbol  toPattern	7	None	replace
432	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.toPattern.entrySet().iterator();  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  String>  it  =  this.toPattern.entrySet().iterator();  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  String>  it  =  this.toPattern.entrySet().iterator();	  Iterator    <    String>    it    =    this.toPattern.iterator();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
433	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(foundDescriptions,    pattern);    	non-compiled	[CE]  not  a  statement	56	None	replace
434	[BUG]  [BUGGY]  if(junit.framework.AssertionFailedError)registry.registerFormat(foundDescriptions,  pattern);  [CE]  package  junit  does  not  exist  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(junit.framework.AssertionFailedError)registry.registerFormat(foundDescriptions,  pattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(junit.framework.AssertionFailedError)registry.registerFormat(foundDescriptions,  pattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(foundDescriptions,    pattern);    	non-compiled	[CE]  package  junit  does  not  exist	56	None	replace
435	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern,  toPattern);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern,  toPattern);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern,  toPattern);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    registry.registerFormat(foundDescriptions,    pattern);    	non-compiled	[CE]  not  a  statement	56	None	replace
436	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  this.formatDescription.entrySet().iterator();  [CE]  cannot  find  symbol  formatDescription  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  Object>  it  =  this.formatDescription.entrySet().iterator();  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  this.formatDescription.entrySet().iterator();	  Iterator    <    Object>    it    =    this.formatDescription.iterator();    	non-compiled	[CE]  cannot  find  symbol  formatDescription	117	None	replace
437	[BUG]  [BUGGY]  if(it.hasNext())  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  it.remove();  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(it.hasNext())  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  it.remove();  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(it.hasNext())  {  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  it.remove();  }	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    it.remove();    	non-compiled	[CE]  not  a  statement	116	None	replace
438	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  this.toPattern.entrySet().iterator();  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  Iterator  <  Object>  it  =  this.toPattern.entrySet().iterator();  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  this.toPattern.entrySet().iterator();	  Iterator    <    Object>    it    =    this.toPattern.iterator();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
439	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  toPattern  =  new  Format[1];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(fmtCount  ==  0)  {  toPattern  =  new  Format[1];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(fmtCount  ==  0)  {  toPattern  =  new  Format[1];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }	  if(toPattern    ==    null)    {    toPattern    =    new    Format[1];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
440	[BUG]  [BUGGY]  if(origFormats!=  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  toPattern,  stripCustom,  false);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(origFormats!=  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  toPattern,  stripCustom,  false);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(origFormats!=  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  toPattern,  stripCustom,  false);  }	  if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    toPattern,    stripCustom,    true);    }    	non-compiled	[CE]  ';'  expected	120	None	replace
441	[BUG]  [BUGGY]  if(origFormats  ==  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  toPattern,  stripCustom,  true);  }  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(origFormats  ==  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  toPattern,  stripCustom,  true);  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(origFormats  ==  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  toPattern,  stripCustom,  true);  }	  if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    toPattern,    stripCustom,    true);    }    	non-compiled	[CE]  ';'  expected	120	None	replace
442	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  pattern.entrySet().iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  for(Iterator  <  Object>  it  =  pattern.entrySet().iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  pattern.entrySet().iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
443	[BUG]  [BUGGY]  if(origFormats  ==  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(origFormats  ==  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(origFormats  ==  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  if(toPattern!=    null)    {    for(Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	119	None	replace
444	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundDescriptions);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundDescriptions);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundDescriptions);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:    registry.registerFormat(DUMMY_PATTERN,    foundFormats);    	non-compiled	[CE]  not  a  statement	91	None	replace
445	[BUG]  [BUGGY]  if(origFormats!=  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(origFormats!=  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(origFormats!=  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	118	None	replace
446	[BUG]  [BUGGY]  boolean  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  it.remove();  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  boolean  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  it.remove();  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	boolean  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  it.remove();	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:    it.remove();    	non-compiled	[CE]  not  a  statement	104	None	replace
447	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  toPattern.length  *  2);  [CE]  cannot  find  symbol  length  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  toPattern.length  *  2);  [BUGGY]      ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  toPattern.length  *  2);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(toPattern,    toPattern.length);    	non-compiled	[CE]  cannot  find  symbol  length	50	None	replace
448	[BUG]  [BUGGY]  if(fmtCount  ==  1)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(fmtCount  ==  1)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(fmtCount  ==  1)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }	  if(fmtCount    ==    0)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i);    }    	non-compiled	[CE]  ';'  expected	60	None	replace
449	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  toPattern  =  new  Format[FmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(fmtCount  ==  0)  {  toPattern  =  new  Format[FmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(fmtCount  ==  0)  {  toPattern  =  new  Format[FmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }	  if(fmtCount    ==    0)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i);    }    	non-compiled	[CE]  ';'  expected	60	None	replace
450	[BUG]  [BUGGY]  if(c  ==  null)  {  toPattern  =  new  Format[1];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }      [BUGGY]  if(c  ==  null)  {  toPattern  =  new  Format[1];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [BUGGY]      ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(c  ==  null)  {  toPattern  =  new  Format[1];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }	  if(c    ==    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i);    }    	non-compiled	[CE]  ';'  expected	113	None	replace
