bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  false);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  false);  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  false);  }	      if(toPattern    ==    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    i    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
2	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    i    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
3	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern!=  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	20	None	replace
4	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	20	None	replace
5	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern!=  null)  {  for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	20	None	replace
6	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  cannot  find  symbol  foundDescriptions  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  foundDescriptions	20	None	replace
7	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.toPattern.iterator();  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  Iterator  <  String>  it  =  this.toPattern.iterator();  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  String>  it  =  this.toPattern.iterator();	      Iterator    <    String>    it    =    toPattern.iterator();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
8	[BUG]  [BUGGY]  Iterator  <  String>  it  =  registry.iterator();  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  Iterator  <  String>  it  =  registry.iterator();  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  String>  it  =  registry.iterator();	      Iterator    <    String>    it    =    toPattern.iterator();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
9	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.formatDescription.iterator();  [CE]  cannot  find  symbol  formatDescription  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  Iterator  <  String>  it  =  this.formatDescription.iterator();  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  String>  it  =  this.formatDescription.iterator();	      Iterator    <    String>    it    =    toPattern.iterator();    	non-compiled	[CE]  cannot  find  symbol  formatDescription	13	None	replace
10	[BUG]  [BUGGY]  Iterator  <  String>  it  =  register.iterator();  [CE]  cannot  find  symbol  register  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  Iterator  <  String>  it  =  register.iterator();  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  String>  it  =  register.iterator();	      Iterator    <    String>    it    =    toPattern.iterator();    	non-compiled	[CE]  cannot  find  symbol  register	13	None	replace
11	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);	  	non-compiled	[CE]  not  a  statement	16	None	add
12	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  this.registry.appendPattern(pattern);  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  this.registry.appendPattern(pattern);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:  this.registry.appendPattern(pattern);	  	non-compiled	[CE]  not  a  statement	16	None	add
13	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);	  	non-compiled	[CE]  not  a  statement	16	None	add
14	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);	  	non-compiled	[CE]  not  a  statement	16	None	add
15	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern!=  null)  {  for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  ';'  expected	21	None	replace
16	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  cannot  find  symbol  foundDescriptions  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  cannot  find  symbol  foundDescriptions	21	None	replace
17	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
18	[BUG]  [BUGGY]  if(toPattern!=  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern!=  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }	      if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
19	[BUG]  [BUGGY]  if(c  ==  null)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(c  ==  null)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(c  ==  null)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  }	      if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
20	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(fmtCount  ==  0)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(fmtCount  ==  0)  {  if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,	      if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i);    }    	non-compiled	[CE]  ')'  expected	22	None	replace
21	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern!=  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	      if(toPattern!=    null)    {    for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  ';'  expected	12	None	replace
22	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  cannot  find  symbol  foundDescriptions  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	      if(toPattern!=    null)    {    for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  foundDescriptions	12	None	replace
23	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    pattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	19	None	replace
24	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern!=  null)  {  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    pattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	19	None	replace
25	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  cannot  find  symbol  foundDescriptions  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    pattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  foundDescriptions	19	None	replace
26	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    pattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	19	None	replace
27	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>();  [CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>();  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>();	      	non-compiled	[CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)	5	None	replace
28	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(toPattern.length());  [CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(toPattern.length());  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(toPattern.length());	      	non-compiled	[CE]  variable  foundDescriptions  is  already  defined  in  method  applyPattern(String)	5	None	replace
29	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(origFormats.length);  [CE]  cannot  find  symbol  origFormats  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(origFormats.length);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(origFormats.length);	      	non-compiled	[CE]  cannot  find  symbol  origFormats	5	None	replace
30	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(toPattern.size());  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(toPattern.size());  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  String>  foundDescriptions  =  new  ArrayList  <  String>(toPattern.size());	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
31	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }	      if(toPattern!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
32	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }	      if(toPattern!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
33	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern!=  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	18	None	replace
34	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	18	None	replace
35	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern!=  null)  {  for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	18	None	replace
36	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(Iterator  <  Object>  it  =  toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(Iterator  <  Object>  it  =  toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern!=  null)  {  for(Iterator  <  Object>  it  =  toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    toPatterns.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  ';'  expected	15	None	replace
37	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  Iterator  <  Object>  it  =  toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    toPatterns.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
38	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i,  stripCustom,  true);  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i,  stripCustom,  true);  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    i,    stripCustom,    true);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
39	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	add	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	17	1	replace
40	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(2);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	17	1	replace
41	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  ';'  expected	11	None	replace
42	[BUG]  [BUGGY]  int  fmtCount  =  pattern.length();  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  int  fmtCount  =  pattern.length();  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	int  fmtCount  =  pattern.length();	      int    fmtCount    =    toPattern.length();    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	9	None	replace
43	[BUG]  [BUGGY]  int  fmtCount  =  toPattern.length()  -  1;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  int  fmtCount  =  toPattern.length()  -  1;  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	int  fmtCount  =  toPattern.length()  -  1;	      int    fmtCount    =    toPattern.length();    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	9	None	replace
44	[BUG]  [BUGGY]  int  fmtCount  =  toPattern.length()  +  1;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  int  fmtCount  =  toPattern.length()  +  1;  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	int  fmtCount  =  toPattern.length()  +  1;	      int    fmtCount    =    toPattern.length();    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	9	None	replace
45	[BUG]  [BUGGY]  int  fmtCount  =  toPattern.length()  *  2;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  int  fmtCount  =  toPattern.length()  *  2;  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	int  fmtCount  =  toPattern.length()  *  2;	      int    fmtCount    =    toPattern.length();    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	9	None	replace
46	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  registry.iterator();  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  Iterator  <  Object>  it  =  registry.iterator();  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  registry.iterator();	      Iterator    <    Object>    it    =    toPattern.iterator();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
47	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  this.toPattern.iterator();  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  Iterator  <  Object>  it  =  this.toPattern.iterator();  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  this.toPattern.iterator();	      Iterator    <    Object>    it    =    toPattern.iterator();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
48	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  register.iterator();  [CE]  cannot  find  symbol  register  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  Iterator  <  Object>  it  =  register.iterator();  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  register.iterator();	      Iterator    <    Object>    it    =    toPattern.iterator();    	non-compiled	[CE]  cannot  find  symbol  register	14	None	replace
49	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(origFormats);  [CE]  cannot  find  symbol  origFormats  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(origFormats);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(origFormats);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(toPattern);    	non-compiled	[CE]  cannot  find  symbol  origFormats	2	None	replace
50	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  toPattern.length);  [CE]  cannot  find  symbol  length  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  toPattern.length);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  toPattern.length);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(toPattern);    	non-compiled	[CE]  cannot  find  symbol  length	2	None	replace
51	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern.length);  [CE]  cannot  find  symbol  length  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern.length);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern.length);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(toPattern);    	non-compiled	[CE]  cannot  find  symbol  length	2	None	replace
52	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  origFormats);  [CE]  cannot  find  symbol  origFormats  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  origFormats);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern,  origFormats);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(toPattern);    	non-compiled	[CE]  cannot  find  symbol  origFormats	2	None	replace
53	[BUG]  [BUGGY]  Set  <  Format>  foundFormats  =  new  HashSet  <  Format>();  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  Set  <  Format>  foundFormats  =  new  HashSet  <  Format>();  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Set  <  Format>  foundFormats  =  new  HashSet  <  Format>();	  List    <    Format>    foundFormats    =    new    ArrayList    <    Format>();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
54	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern);	  	non-compiled	[CE]  not  a  statement	3	None	add
55	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  true);	  	non-compiled	[CE]  not  a  statement	3	None	add
56	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:  registry.registerFormat(foundDescriptions,  pattern);	  	non-compiled	[CE]  not  a  statement	3	None	add
57	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:  this.registry.applyPattern(pattern,  toPattern);	  	non-compiled	[CE]  not  a  statement	3	None	add
58	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	add	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	4	1	replace
59	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(4);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	4	1	replace
60	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(fmtCount  ==  0)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(fmtCount  ==  0)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }	      if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
61	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  new  Format[1];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  new  Format[1];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern  ==  null)  {  toPattern  =  new  Format[1];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }	      if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
62	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(Iterator  <  String>  it  =  pattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(Iterator  <  String>  it  =  pattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern!=  null)  {  for(Iterator  <  String>  it  =  pattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    pattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	19	None	replace
63	[BUG]  [BUGGY]  Iterator  <  String>  it  =  pattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  Iterator  <  String>  it  =  pattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  String>  it  =  pattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    pattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
64	[BUG]  [BUGGY]  for(Iterator  <  String>  it  =  pattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  for(Iterator  <  String>  it  =  pattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  String>  it  =  pattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    <    String>    it    =    pattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
65	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    i    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }  [CE]  cannot  find  symbol  start  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    i    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  cannot  find  symbol  start	10	None	replace
67	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  false);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  false);  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  false);  }	      if(toPattern    ==    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    i    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
68	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
69	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
70	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  [CE]  variable  foundFormats  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);	  	non-compiled	[CE]  variable  foundFormats  is  already  defined  in  method  applyPattern(String)	3	None	add
71	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:  registry.	  	non-compiled	[CE]  not  a  statement	3	None	add
72	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern);  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern);	  	non-compiled	[CE]  not  a  statement	3	None	add
73	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);	  	non-compiled	[CE]  not  a  statement	3	None	add
74	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  toPattern;  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  toPattern;  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:  toPattern;	  	non-compiled	[CE]  not  a  statement	3	None	add
75	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  Collection  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	add	Collection  <  Format>  foundFormats  =  new  ArrayList  <  Format>();	  List    <    Format>    foundFormats    =    new    ArrayList    <    Format>();    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	1	1	replace
76	[BUG]  [BUGGY]  Collection  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  Collection  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Collection  <  Format>  foundFormats  =  new  ArrayList  <  Format>();	  List    <    Format>    foundFormats    =    new    ArrayList    <    Format>();    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	1	1	replace
77	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  cannot  find  symbol  toPatterns  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  for(Iterator  <  Object>  it  =  toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    toPatterns.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol  toPatterns	15	None	replace
78	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
79	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
80	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	      	non-compiled	[CE]  ';'  expected	5	None	replace
81	[BUG]  [BUGGY]  ArrayList  <  String>  foundDescriptions  =  Lists.newArrayList();  [CE]  cannot  find  symbol  Lists  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  String>  foundDescriptions  =  Lists.newArrayList();  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  String>  foundDescriptions  =  Lists.newArrayList();	      	non-compiled	[CE]  cannot  find  symbol  Lists	5	None	replace
82	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendDescription(it.next());  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendDescription(it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendDescription(it.next());  }	      	non-compiled	[CE]  ';'  expected	5	None	replace
83	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  this.registry.iterator();  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  Iterator  <  Object>  it  =  this.registry.iterator();  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  this.registry.iterator();	      Iterator    <    Object>    it    =    toPattern.iterator();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
84	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
85	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	      if(toPattern!=    null)    {    for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
86	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	      if(toPattern!=    null)    {    for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
87	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.registry.iterator();  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  Iterator  <  String>  it  =  this.registry.iterator();  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  String>  it  =  this.registry.iterator();	      Iterator    <    String>    it    =    toPattern.iterator();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
88	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  registry.  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  registry.  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:  registry.	  	non-compiled	[CE]  not  a  statement	16	None	add
89	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern);  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  pattern);	  	non-compiled	[CE]  not  a  statement	16	None	add
90	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  toPattern;  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  toPattern;  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:  toPattern;	  	non-compiled	[CE]  not  a  statement	16	None	add
91	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundFormats);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundFormats);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundFormats);	  	non-compiled	[CE]  not  a  statement	16	None	add
92	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:  registry.registerFormat(this,  foundFormats);	  	non-compiled	[CE]  not  a  statement	16	None	add
93	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  cannot  find  symbol  start  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  cannot  find  symbol  start	6	None	replace
94	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	18	None	replace
95	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  for(Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
96	[BUG]  [BUGGY]  if(c  ==  null)  {  for(Iterator  <  Object>  it  =  c.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(c  ==  null)  {  for(Iterator  <  Object>  it  =  c.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(c  ==  null)  {  for(Iterator  <  Object>  it  =  c.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  ';'  expected	20	None	replace
97	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  this.toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    toPatterns.iterator();    it.hasNext();)    {    appendString(pattern,    it.next());    }    	non-compiled	[CE]  ';'  expected	15	None	replace
98	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    i,    stripCustom,    true);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
99	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i,  stripCustom,  true);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i,  stripCustom,  true);  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    i,    stripCustom,    true);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
100	[BUG]  [BUGGY]  int  fmtCount  =  this.toPattern.length();  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  int  fmtCount  =  this.toPattern.length();  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	int  fmtCount  =  this.toPattern.length();	      int    fmtCount    =    toPattern.length();    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	9	None	replace
101	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(8);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	add	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(8);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	4	1	replace
102	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(8);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(8);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(8);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	4	1	replace
103	[BUG]  [BUGGY]  Iterator  <  String>  it  =  pattern.iterator();  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  Iterator  <  String>  it  =  pattern.iterator();  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  String>  it  =  pattern.iterator();	      Iterator    <    String>    it    =    toPattern.iterator();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
104	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  it.remove();  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  it.remove();  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:  it.remove();	  	non-compiled	[CE]  not  a  statement	3	None	add
105	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  new  Format[]  {  pattern  }  );  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  new  Format[]  {  pattern  }  );  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  new  Format[]  {  pattern  }  );	  	non-compiled	[CE]  not  a  statement	3	None	add
106	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundFormats);  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundFormats);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(1);    junit.framework.AssertionFailedError:  registry.registerFormat(DUMMY_PATTERN,  foundFormats);	  	non-compiled	[CE]  not  a  statement	3	None	add
107	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    i    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
108	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    i    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
109	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos  +  1,  stripCustom,  true);  }	      if(toPattern    ==    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    i    +    1,    stripCustom,    true);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
110	[BUG]  [BUGGY]  for(Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  for(Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	for(Iterator  <  Object>  it  =  pattern.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	      if(toPattern    ==    null)    {    for(Iterator    <    Object>    it    =    toPattern.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
111	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(fmtCount);  [CE]  cannot  find  symbol  fmtCount  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(fmtCount);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(fmtCount);	  ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(toPattern);    	non-compiled	[CE]  cannot  find  symbol  fmtCount	2	None	replace
112	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }	      if(toPattern    ==    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
113	[BUG]  [BUGGY]  if(c  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(c  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(c  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }	      if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    i);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
114	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  [CE]  variable  foundFormats  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);	  	non-compiled	[CE]  variable  foundFormats  is  already  defined  in  method  applyPattern(String)	16	None	add
115	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  [CE]  variable  foundFormats  is  already  defined  in  method  applyPattern(String)  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);	  	non-compiled	[CE]  variable  foundFormats  is  already  defined  in  method  applyPattern(String)	16	None	add
116	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  it.remove();  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  junit.framework.AssertionFailedError:  it.remove();  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList    <    Format>    foundFormats    =    new    ArrayList    <    Format>(0);    junit.framework.AssertionFailedError:  it.remove();	  	non-compiled	[CE]  not  a  statement	16	None	add
117	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  this.formatDescription.iterator();  [CE]  cannot  find  symbol  formatDescription  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  Iterator  <  Object>  it  =  this.formatDescription.iterator();  [BUGGY]    ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	Iterator  <  Object>  it  =  this.formatDescription.iterator();	      Iterator    <    Object>    it    =    toPattern.iterator();    	non-compiled	[CE]  cannot  find  symbol  formatDescription	14	None	replace
118	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	      	non-compiled	[CE]  ';'  expected	5	None	replace
119	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern!=  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern!=  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	      	non-compiled	[CE]  ';'  expected	5	None	replace
120	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  toPattern,  stripCustom,  true);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }    [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  toPattern,  stripCustom,  true);  }  [BUGGY]    ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  toPattern,  stripCustom,  true);  }	      	non-compiled	[CE]  ';'  expected	5	None	replace
