bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  List  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  [BUGGY]  List  <  Format>  foundFormats  =  new  ArrayList  <  Format>();  [BUGGY]  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	List  <  Format>  foundFormats  =  new  ArrayList  <  Format>();	ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
2	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern);  [CE]  no  suitable  constructor  found  for  ArrayList(String)  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern);  [BUGGY]  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(toPattern);	ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(String)	1	None	replace
3	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  [BUGGY]  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	add	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);	ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	1	1	replace
4	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);  [BUGGY]  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(1);	ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	1	1	replace
5	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  foundFormats  [FE]          junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  [BUGGY]    [BUGGY]  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	  	ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  	non-compiled	[CE]  cannot  find  symbol  foundFormats	1	None	replace
6	[BUG]  [BUGGY]    if(toPattern  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  [BUGGY]    if(toPattern  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	    if(toPattern  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }		non-compiled	[CE]  ';'  expected	2	None	add
7	[BUG]  [BUGGY]    if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  [BUGGY]    if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	    if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }		non-compiled	[CE]  ';'  expected	2	None	add
8	[BUG]  [BUGGY]    if(toPattern  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i,  stripCustom,  true);  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  [BUGGY]    if(toPattern  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i,  stripCustom,  true);  }  [BUGGY]  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	    if(toPattern  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i,  stripCustom,  true);  }		non-compiled	[CE]  ';'  expected	2	None	add
9	[BUG]  [BUGGY]    int  fmtCount  =  toPattern.length();  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  [BUGGY]    int  fmtCount  =  toPattern.length();  [BUGGY]  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	    int  fmtCount  =  toPattern.length();		non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	2	None	add
10	[BUG]  [BUGGY]    if(toPattern  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  [BUGGY]    if(toPattern  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }  [BUGGY]  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	    if(toPattern  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  i  +  1,  stripCustom,  true);  }		non-compiled	[CE]  ';'  expected	2	None	add
11	[BUG]  [BUGGY]    if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  [BUGGY]    if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	    if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }		non-compiled	[CE]  ';'  expected	2	None	add
12	[BUG]  [BUGGY]    if(toPattern!=  null)  {  for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  [BUGGY]    if(toPattern!=  null)  {  for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	    if(toPattern!=  null)  {  for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }		non-compiled	[CE]  ';'  expected	2	None	add
13	[BUG]  [BUGGY]    Iterator  <  String>  it  =  toPattern.iterator();  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  [BUGGY]    Iterator  <  String>  it  =  toPattern.iterator();  [BUGGY]  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	    Iterator  <  String>  it  =  toPattern.iterator();		non-compiled	[CE]  cannot  find  symbol	2	None	add
14	[BUG]  [BUGGY]    Iterator  <  Object>  it  =  toPattern.iterator();  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  [BUGGY]    Iterator  <  Object>  it  =  toPattern.iterator();  [BUGGY]  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	    Iterator  <  Object>  it  =  toPattern.iterator();		non-compiled	[CE]  cannot  find  symbol	2	None	add
15	[BUG]  [BUGGY]    if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  [BUGGY]    if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	    if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  toPatterns.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }		non-compiled	[CE]  ';'  expected	2	None	add
16	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  [BUGGY]  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	add	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);	ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	1	1	replace
17	[BUG]  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  [BUGGY]  ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);  [BUGGY]  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	ArrayList  <  Format>  foundFormats  =  new  ArrayList  <  Format>(0);	ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	1	1	replace
18	[BUG]  [BUGGY]    if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  [BUGGY]    if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	    if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }		non-compiled	[CE]  ';'  expected	2	None	add
19	[BUG]  [BUGGY]    if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  pattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  [BUGGY]    if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  pattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	    if(toPattern  ==  null)  {  for(Iterator  <  String>  it  =  pattern.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }		non-compiled	[CE]  ';'  expected	2	None	add
20	[BUG]  [BUGGY]    if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  [BUGGY]    if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	    if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }		non-compiled	[CE]  ';'  expected	2	None	add
21	[BUG]  [BUGGY]    if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  [BUGGY]    if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	    if(toPattern  ==  null)  {  for(Iterator  <  Object>  it  =  toPattern.iterator();  it.hasNext();)  {  applyPattern(it.next());  }		non-compiled	[CE]  ';'  expected	2	None	add
22	[BUG]  [BUGGY]    if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  [BUGGY]    if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }  [BUGGY]  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	151	151	1	replace	    if(toPattern  ==  null)  {  toPattern  =  new  Format[fmtCount];  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  i);  }		non-compiled	[CE]  ';'  expected	2	None	add
