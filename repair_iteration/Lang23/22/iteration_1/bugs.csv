bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    if(format.length()  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [BUGGY]    if(format.length()  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	    if(format.length()  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }		non-compiled	[CE]  ';'  expected	44	None	add
2	[BUG]  [BUGGY]    if(format.length()  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [BUGGY]    if(format.length()  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	    if(format.length()  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }		non-compiled	[CE]  ';'  expected	44	None	add
3	[BUG]  [BUGGY]    if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [BUGGY]    if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	    if(format  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }		non-compiled	[CE]  ';'  expected	44	None	add
4	[BUG]  [BUGGY]    if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry  [CONTEXT]  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [BUGGY]    if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	    if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }		non-compiled	[CE]  ';'  expected	44	None	add
5	[BUG]  [BUGGY]    if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry  [CONTEXT]  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [BUGGY]    if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	    if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }		non-compiled	[CE]  ';'  expected	44	None	add
6	[BUG]  [BUGGY]  foundDescriptions.add(format);  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [BUGGY]  foundDescriptions.add(format);  [BUGGY]  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundDescriptions.add(format);	foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  	non-compiled	[CE]  ';'  expected	43	None	replace
7	[BUG]  [BUGGY]  foundFormats.add(format);  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [BUGGY]  foundFormats.add(format);  [BUGGY]  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundFormats.add(format);	foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  	non-compiled	[CE]  ';'  expected	43	None	replace
8	[BUG]  [BUGGY]  foundDescriptions.add(format,  formatDescription);  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [BUGGY]  foundDescriptions.add(format,  formatDescription);  [BUGGY]  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundDescriptions.add(format,  formatDescription);	foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  	non-compiled	[CE]  ';'  expected	43	None	replace
9	[BUG]  [BUGGY]  foundDescriptions.add(format,  DUMMY_PATTERN);  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [BUGGY]  foundDescriptions.add(format,  DUMMY_PATTERN);  [BUGGY]  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundDescriptions.add(format,  DUMMY_PATTERN);	foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  	non-compiled	[CE]  ';'  expected	43	None	replace
10	[BUG]  [BUGGY]    if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [BUGGY]    if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	    if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }		non-compiled	[CE]  ';'  expected	44	None	add
11	[BUG]  [BUGGY]    if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [BUGGY]    if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	    if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }		non-compiled	[CE]  ';'  expected	44	None	add
12	[BUG]  [BUGGY]    if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [BUGGY]    if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }  [BUGGY]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	    if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }		non-compiled	[CE]  ';'  expected	44	None	add
13	[BUG]  [BUGGY]    if(format  ==  null)  {  for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry  [CONTEXT]  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [BUGGY]    if(format  ==  null)  {  for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	    if(format  ==  null)  {  for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }		non-compiled	[CE]  ';'  expected	44	None	add
14	[BUG]  [BUGGY]    if(format!=  null)  {  for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry  [CONTEXT]  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [BUGGY]    if(format!=  null)  {  for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	    if(format!=  null)  {  for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }		non-compiled	[CE]  ';'  expected	44	None	add
15	[BUG]  [BUGGY]    int  fmtCount  =  pattern.length();  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [BUGGY]    int  fmtCount  =  pattern.length();  [BUGGY]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	    int  fmtCount  =  pattern.length();		non-compiled	[CE]  ';'  expected	44	None	add
16	[BUG]  [BUGGY]    if(format!=  null)  {  for(int  fmtCount  =  format.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [BUGGY]    if(format!=  null)  {  for(int  fmtCount  =  format.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [BUGGY]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	    if(format!=  null)  {  for(int  fmtCount  =  format.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }		non-compiled	[CE]  ';'  expected	44	None	add
17	[BUG]  [BUGGY]    if(format!=  null)  {  for(int  fmtCount  =  c.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [BUGGY]    if(format!=  null)  {  for(int  fmtCount  =  c.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [BUGGY]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	    if(format!=  null)  {  for(int  fmtCount  =  c.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }		non-compiled	[CE]  ';'  expected	44	None	add
18	[BUG]  [BUGGY]    if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry  [CONTEXT]  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [BUGGY]    if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	    if(format!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }		non-compiled	[CE]  ';'  expected	44	None	add
19	[BUG]  [BUGGY]    if(format!=  null)  {  for(int  fmtCount  =  format.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry  [CONTEXT]  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [BUGGY]    if(format!=  null)  {  for(int  fmtCount  =  format.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	    if(format!=  null)  {  for(int  fmtCount  =  format.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(DUMMY_PATTERN);  }		non-compiled	[CE]  ';'  expected	44	None	add
20	[BUG]  [BUGGY]  foundDescriptions.add(format  ==  null?  null  :  format);  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [BUGGY]  foundDescriptions.add(format  ==  null?  null  :  format);  [BUGGY]  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundDescriptions.add(format  ==  null?  null  :  format);	foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  	non-compiled	[CE]  ';'  expected	43	None	replace
21	[BUG]  [BUGGY]  foundDescriptions.add(format!=  null?  null  :  formatDescription);  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [BUGGY]  foundDescriptions.add(format!=  null?  null  :  formatDescription);  [BUGGY]  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundDescriptions.add(format!=  null?  null  :  formatDescription);	foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  	non-compiled	[CE]  ';'  expected	43	None	replace
22	[BUG]  [BUGGY]  foundFormats.add(format  ==  null?  null  :  format);  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [BUGGY]  foundFormats.add(format  ==  null?  null  :  format);  [BUGGY]  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundFormats.add(format  ==  null?  null  :  format);	foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  	non-compiled	[CE]  ';'  expected	43	None	replace
