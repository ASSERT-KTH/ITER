bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  if(format  <  DUMMY_PATTERN)  {  for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  ==  0)  {  if(format  <  DUMMY_PATTERN)  {  for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  ==  0)  {  if(format  <  DUMMY_PATTERN)  {  for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(format    <    DUMMY_PATTERN)    {    for(Iterator    it    =    origFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	89	None	replace
2	[BUG]  [BUGGY]  foundDescriptions.add(format,  START_FE);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  foundDescriptions.add(format,  START_FE);  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundDescriptions.add(format,  START_FE);	  foundDescriptions.add(format,    ESCAPED_QUOTE);    	non-compiled	[CE]  ';'  expected	10	None	replace
3	[BUG]  [BUGGY]  int  fmtCount  =  foundFormats.length()  -  1;  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  int  fmtCount  =  foundFormats.length()  -  1;  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	int  fmtCount  =  foundFormats.length()  -  1;	  int    fmtCount    =    foundFormats.length();    	non-compiled	[CE]  ';'  expected	31	None	replace
4	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.length();  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  int  fmtCount  =  foundDescriptions.length();  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	int  fmtCount  =  foundDescriptions.length();	  int    fmtCount    =    foundFormats.length();    	non-compiled	[CE]  ';'  expected	31	None	replace
5	[BUG]  [BUGGY]  int  fmtCount  =  foundFormats.length()  +  1;  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  int  fmtCount  =  foundFormats.length()  +  1;  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	int  fmtCount  =  foundFormats.length()  +  1;	  int    fmtCount    =    foundFormats.length();    	non-compiled	[CE]  ';'  expected	31	None	replace
6	[BUG]  [BUGGY]  int  fmtCount  =  foundFormats.size();  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  int  fmtCount  =  foundFormats.size();  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	int  fmtCount  =  foundFormats.size();	  int    fmtCount    =    foundFormats.length();    	non-compiled	[CE]  ';'  expected	31	None	replace
7	[BUG]  [BUGGY]  if(format  ==  null)  {  foundFormats.add(format);  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  foundFormats.add(format);  }  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  foundFormats.add(format);  }	  if(format!=    null)    {    foundDescriptions.add(format);    }    else    {    stripCustom.append(';');    }    	non-compiled	[CE]  ';'  expected	44	None	replace
8	[BUG]  [BUGGY]  Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }	  for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
9	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  fmtCount  =  format.length();  fmtCount  >  1)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  for(int  fmtCount  =  format.length();  fmtCount  >  1)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  for(int  fmtCount  =  format.length();  fmtCount  >  1)  {  stripCustom.append(END_FE);  }	  if(format    ==    null)    {    for(int    fmtCount    =    format.length();    fmtCount    >    0;    fmtCount++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	38	None	replace
10	[BUG]  [BUGGY]  if(format  ==  null)  {  foundFormats.add(format);  }  else  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  foundFormats.add(format);  }  else  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  foundFormats.add(format);  }  else  {  stripCustom.append(DUMMY_PATTERN);  }	  if(format!=    null)    {    foundFormats.add(format);    }    else    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	55	None	replace
11	[BUG]  [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(formatDescription);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(formatDescription);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(formatDescription);  }	  if(format!=    null)    {    for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(END_FMT).append(formatDescription);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
12	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(formatDescription);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(formatDescription);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(formatDescription);  }	  if(format!=    null)    {    for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(END_FMT).append(formatDescription);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
13	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(formatDescription);  }  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  ==  0)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(formatDescription);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  ==  0)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(formatDescription);  }	  if(format!=    null)    {    for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(END_FMT).append(formatDescription);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
14	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  ==  0)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  ==  0)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FE);  }	  if(format    ==    null)    {    for(int    i    =    start;    i    <    0;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
15	[BUG]  [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }	  if(format    ==    null)    {    for(Iterator    it    =    origFormats.iterator();    it.hasNext();)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	71	None	replace
16	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }	  if(format    ==    null)    {    for(Iterator    it    =    origFormats.iterator();    it.hasNext();)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	71	None	replace
17	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  ==  0)  {  for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  ==  0)  {  for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }	  if(format    ==    null)    {    for(Iterator    it    =    origFormats.iterator();    it.hasNext();)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	71	None	replace
18	[BUG]  [BUGGY]  if(formatDescription!=  null)  {  foundFormats.add(format,  formatDescription);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(formatDescription!=  null)  {  foundFormats.add(format,  formatDescription);  }  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(formatDescription!=  null)  {  foundFormats.add(format,  formatDescription);  }	  foundFormats.add(format,    formatDescription);    	non-compiled	[CE]  ';'  expected	18	None	replace
19	[BUG]  [BUGGY]  if(formatDescription!=  null)  {  foundFormats.add(format,  formatDescription);  }  else  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(formatDescription!=  null)  {  foundFormats.add(format,  formatDescription);  }  else  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(formatDescription!=  null)  {  foundFormats.add(format,  formatDescription);  }  else  {  stripCustom.append(DUMMY_PATTERN);  }	  foundFormats.add(format,    formatDescription);    	non-compiled	[CE]  ';'  expected	18	None	replace
20	[BUG]  [BUGGY]  if(formatDescription!=  null)  {  foundFormats.add(format,  formatDescription);  }  else  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(formatDescription!=  null)  {  foundFormats.add(format,  formatDescription);  }  else  {  stripCustom.append(END_FE);  }  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(formatDescription!=  null)  {  foundFormats.add(format,  formatDescription);  }  else  {  stripCustom.append(END_FE);  }	  foundFormats.add(format,    formatDescription);    	non-compiled	[CE]  ';'  expected	18	None	replace
21	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  ==  0)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  ==  0)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }	  if(format    ==    null)    {    for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(END_FE).append(formatDescription);    }    	non-compiled	[CE]  ';'  expected	74	None	replace
22	[BUG]  [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }	  if(format    ==    null)    {    for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(END_FE).append(formatDescription);    }    	non-compiled	[CE]  ';'  expected	74	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(END_FE);  }	  if(format.length()    ==    0)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	36	None	replace
24	[BUG]  [BUGGY]  if(format.length()!=  0)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()!=  0)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()!=  0)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(END_FE);  }	  if(format.length()    ==    0)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	36	None	replace
25	[BUG]  [BUGGY]  if(foundDescriptions.size()  ==  fmtCount)  {  for(int  i  =  0;  i  <  formatDescriptions.size();  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(foundDescriptions.size()  ==  fmtCount)  {  for(int  i  =  0;  i  <  formatDescriptions.size();  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(foundDescriptions.size()  ==  fmtCount)  {  for(int  i  =  0;  i  <  formatDescriptions.size();  i++)  {  stripCustom.append(END_FE);  }	  if(format.length()    ==    0)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	36	None	replace
26	[BUG]  [BUGGY]  if(format!=  null)  {  foundFormats.add(format,  format);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  foundFormats.add(format,  format);  }  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  foundFormats.add(format,  format);  }	  foundFormats.add(format,    format);    	non-compiled	[CE]  ';'  expected	73	None	replace
27	[BUG]  [BUGGY]  if(format!=  null)  {  foundFormats.add(format,  format);  }  else  {  stripCustom.append(';');  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  foundFormats.add(format,  format);  }  else  {  stripCustom.append(';');  }  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  foundFormats.add(format,  format);  }  else  {  stripCustom.append(';');  }	  foundFormats.add(format,    format);    	non-compiled	[CE]  ';'  expected	73	None	replace
28	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  foundFormats.add(format,  format);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  ==  0)  {  foundFormats.add(format,  format);  }  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  ==  0)  {  foundFormats.add(format,  format);  }	  foundFormats.add(format,    format);    	non-compiled	[CE]  ';'  expected	73	None	replace
29	[BUG]  [BUGGY]  if(format  ==  null)  {  foundFormats.add(format);  }  else  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  foundFormats.add(format);  }  else  {  stripCustom.append(END_FE);  }  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  foundFormats.add(format);  }  else  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    foundDescriptions.add(format);    }    else    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	82	None	replace
30	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  foundFormats.add(format);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  ==  0)  {  foundFormats.add(format);  }  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  ==  0)  {  foundFormats.add(format);  }	  foundFormats.add(format;    	non-compiled	[CE]  ';'  expected	57	None	replace
31	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  foundFormats.add(format);  }  else  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  ==  0)  {  foundFormats.add(format);  }  else  {  stripCustom.append(END_FE);  }  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  ==  0)  {  foundFormats.add(format);  }  else  {  stripCustom.append(END_FE);  }	  foundFormats.add(format;    	non-compiled	[CE]  ';'  expected	57	None	replace
32	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start  +  1;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start  +  1;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(int  i  =  start  +  1;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    i    =    start    +    fmtCount;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	66	None	replace
33	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  start  +  fmtCount;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  start  +  fmtCount;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  for(int  i  =  start  +  fmtCount;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    i    =    start    +    fmtCount;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	66	None	replace
34	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  start  +  1;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  start  +  1;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  for(int  i  =  start  +  1;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    i    =    start    +    fmtCount;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	66	None	replace
35	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  END_FE;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  END_FE;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  END_FE;  i++)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
36	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  fmtCount  =  format.length();  fmtCount  >  0)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(int  fmtCount  =  format.length();  fmtCount  >  0)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(int  fmtCount  =  format.length();  fmtCount  >  0)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    fmtCount    =    format.length();    fmtCount    >    1)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	40	None	replace
37	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  fmtCount  =  format.length();  fmtCount  >  0)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  for(int  fmtCount  =  format.length();  fmtCount  >  0)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  for(int  fmtCount  =  format.length();  fmtCount  >  0)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    fmtCount    =    format.length();    fmtCount    >    1)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	40	None	replace
38	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  start  +  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  start  +  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  for(int  i  =  start  +  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    i    =    start    +    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
39	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start  +  1;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start  +  1;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(int  i  =  start  +  1;  ++i)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    i    =    start    +    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
40	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  start  +  1;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  start  +  1;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  for(int  i  =  start  +  1;  ++i)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    i    =    start    +    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
41	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }	  if(format!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	63	None	replace
42	[BUG]  [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }	  if(format!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	63	None	replace
43	[BUG]  [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }	  if(format!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	63	None	replace
44	[BUG]  [BUGGY]  foundFormats.add(format  ==  null?  format  :  format);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  foundFormats.add(format  ==  null?  format  :  format);  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundFormats.add(format  ==  null?  format  :  format);	  foundFormats.add(format    ==    null?   "   "    :    format);    	non-compiled	[CE]  ';'  expected	72	None	replace
45	[BUG]  [BUGGY]  foundFormats.add(format  ==  null?  format  : "   ");  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  foundFormats.add(format  ==  null?  format  : "   ");  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundFormats.add(format  ==  null?  format  : "   ");	  foundFormats.add(format    ==    null?   "   "    :    format);    	non-compiled	[CE]  ';'  expected	72	None	replace
46	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  ==  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  ==  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    i    =    start;    i    <    0;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
47	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  fmtCount  =  foundFormats.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  for(int  fmtCount  =  foundFormats.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  for(int  fmtCount  =  foundFormats.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }	  if(format    ==    null)    {    for(int    fmtCount    =    c.length();    fmtCount    >    0;    fmtCount++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
48	[BUG]  [BUGGY]  int  fmtCount  =  format.length()  +  1;  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  int  fmtCount  =  format.length()  +  1;  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	int  fmtCount  =  format.length()  +  1;	  int    fmtCount    =    format.length();    	non-compiled	[CE]  ';'  expected	28	None	replace
49	[BUG]  [BUGGY]  int  fmtCount  =  format.length()  -  1;  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  int  fmtCount  =  format.length()  -  1;  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	int  fmtCount  =  format.length()  -  1;	  int    fmtCount    =    format.length();    	non-compiled	[CE]  ';'  expected	28	None	replace
50	[BUG]  [BUGGY]  char  fmtCount  =  format.length();  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  char  fmtCount  =  format.length();  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	char  fmtCount  =  format.length();	  int    fmtCount    =    format.length();    	non-compiled	[CE]  ';'  expected	28	None	replace
51	[BUG]  [BUGGY]  foundDescriptions.add(format  ==  QUOTE?  null  :  format);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  foundDescriptions.add(format  ==  QUOTE?  null  :  format);  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundDescriptions.add(format  ==  QUOTE?  null  :  format);	  foundDescriptions.add(format    ==    DUMMY_PATTERN?    null    :    format);    	non-compiled	[CE]  ';'  expected	62	None	replace
52	[BUG]  [BUGGY]  foundDescriptions.add(format  ==  ESCAPED_QUOTE?  null  :  format);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  foundDescriptions.add(format  ==  ESCAPED_QUOTE?  null  :  format);  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundDescriptions.add(format  ==  ESCAPED_QUOTE?  null  :  format);	  foundDescriptions.add(format    ==    DUMMY_PATTERN?    null    :    format);    	non-compiled	[CE]  ';'  expected	62	None	replace
53	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  start;  i  <  len;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  start;  i  <  len;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  for(int  i  =  start;  i  <  len;  ++i)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    i    =    start;    i    <    len;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	80	None	replace
54	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  for(int  i  =  start;  i  <  len;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  ==  0)  {  for(int  i  =  start;  i  <  len;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  ==  0)  {  for(int  i  =  start;  i  <  len;  ++i)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    i    =    start;    i    <    len;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	80	None	replace
55	[BUG]  [BUGGY]  if(pos.getIndex()  ==  0)  {  for(int  fmtCount  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(pos.getIndex()  ==  0)  {  for(int  fmtCount  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(pos.getIndex()  ==  0)  {  for(int  fmtCount  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	  if(format.length()    ==    0)    {    for(int    fmtCount    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	49	None	replace
56	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  numDescriptions;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  numDescriptions;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  numDescriptions;  i++)  {  stripCustom.append(END_FE);  }	  if(format    ==    null)    {    for(int    i    =    0;    i    <    numDescriptions;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	83	None	replace
57	[BUG]  [BUGGY]  foundFormats.add(format,  DEFAULT_QUOTE);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  foundFormats.add(format,  DEFAULT_QUOTE);  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundFormats.add(format,  DEFAULT_QUOTE);	  foundDescriptions.add(format,    DEFAULT_QUOTE);    	non-compiled	[CE]  ';'  expected	11	None	replace
58	[BUG]  [BUGGY]  foundDescriptions.add(format,  0);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  foundDescriptions.add(format,  0);  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundDescriptions.add(format,  0);	  foundDescriptions.add(format,    DEFAULT_QUOTE);    	non-compiled	[CE]  ';'  expected	11	None	replace
59	[BUG]  [BUGGY]  foundDescriptions.add(format,  DEFAULT_QUOTE  +  1);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  foundDescriptions.add(format,  DEFAULT_QUOTE  +  1);  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundDescriptions.add(format,  DEFAULT_QUOTE  +  1);	  foundDescriptions.add(format,    DEFAULT_QUOTE);    	non-compiled	[CE]  ';'  expected	11	None	replace
60	[BUG]  [BUGGY]  if(pos.getIndex()  ==  0)  {  for(int  i  =  start;  i  <  formatDescription.length();  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(pos.getIndex()  ==  0)  {  for(int  i  =  start;  i  <  formatDescription.length();  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(pos.getIndex()  ==  0)  {  for(int  i  =  start;  i  <  formatDescription.length();  i++)  {  stripCustom.append(END_FE);  }	  if(format.length()    ==    0)    {    for(int    i    =    start;    i    <    pos.getIndex();    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	54	None	replace
61	[BUG]  [BUGGY]  if(pos.getIndex()  <  fmtCount)  {  if(format.length()  ==  0)  {  for(int  i  =  start;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(pos.getIndex()  <  fmtCount)  {  if(format.length()  ==  0)  {  for(int  i  =  start;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(pos.getIndex()  <  fmtCount)  {  if(format.length()  ==  0)  {  for(int  i  =  start;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FE);  }	  if(format.length()    ==    0)    {    for(int    i    =    start;    i    <    pos.getIndex();    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	54	None	replace
62	[BUG]  [BUGGY]  if(pos.getIndex()  <  END_FE)  {  if(format.length()  ==  0)  {  for(int  i  =  start;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(pos.getIndex()  <  END_FE)  {  if(format.length()  ==  0)  {  for(int  i  =  start;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(pos.getIndex()  <  END_FE)  {  if(format.length()  ==  0)  {  for(int  i  =  start;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FE);  }	  if(format.length()    ==    0)    {    for(int    i    =    start;    i    <    pos.getIndex();    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	54	None	replace
63	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  for(int  fmtCount  =  format.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(c.length()  ==  0)  {  for(int  fmtCount  =  format.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(c.length()  ==  0)  {  for(int  fmtCount  =  format.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }	  if(format.length()    ==    0)    {    for(int    fmtCount    =    c.length();    fmtCount    >    0;    fmtCount++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
64	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  for(int  fmtCount  =  foundFormats.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  ==  0)  {  for(int  fmtCount  =  foundFormats.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  ==  0)  {  for(int  fmtCount  =  foundFormats.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }	  if(format.length()    ==    0)    {    for(int    fmtCount    =    c.length();    fmtCount    >    0;    fmtCount++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
65	[BUG]  [BUGGY]  for(int  fmtCount  =  foundFormats.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  for(int  fmtCount  =  foundFormats.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	for(int  fmtCount  =  foundFormats.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }	  if(format.length()    ==    0)    {    for(int    fmtCount    =    c.length();    fmtCount    >    0;    fmtCount++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
66	[BUG]  [BUGGY]  if(format.length()  <  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  <  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  <  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	  if(format.length()    <    =    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	92	None	replace
67	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	  if(format.length()    <    =    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	92	None	replace
68	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }	  Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
69	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  Iterator  <  Object>  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	Iterator  <  Object>  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }	  Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
70	[BUG]  [BUGGY]  ArrayList  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  ArrayList  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	ArrayList  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }	  Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
71	[BUG]  [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT).append(formatDescription);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT).append(formatDescription);  }	  if(format!=    null)    {    for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(START_FMT).append(formatDescription);    }    	non-compiled	[CE]  ';'  expected	75	None	replace
72	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(format    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	2	None	replace
73	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  ==  0)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  ==  0)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }	  if(format    ==    null)    {    for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	43	None	replace
74	[BUG]  [BUGGY]  for(int  fmtCount  =  format.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  for(int  fmtCount  =  format.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	for(int  fmtCount  =  format.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }	  if(format.length()    ==    0)    {    for(int    fmtCount    =    format.length();    fmtCount    >    0;    fmtCount++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	39	None	replace
75	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  for(int  fmtCount  =  format.length();  fmtCount  >=  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  ==  0)  {  for(int  fmtCount  =  format.length();  fmtCount  >=  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  ==  0)  {  for(int  fmtCount  =  format.length();  fmtCount  >=  0;  fmtCount++)  {  stripCustom.append(END_FE);  }	  if(format.length()    ==    0)    {    for(int    fmtCount    =    format.length();    fmtCount    >    0;    fmtCount++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	39	None	replace
76	[BUG]  [BUGGY]  int  fmtCount  =  Pattern.compile(pattern.length());  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  int  fmtCount  =  Pattern.compile(pattern.length());  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	int  fmtCount  =  Pattern.compile(pattern.length());	  int    fmtCount    =    pattern.length()    +    1;    	non-compiled	[CE]  ';'  expected	29	None	replace
77	[BUG]  [BUGGY]  Integer  fmtCount  =  pattern.length();  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  Integer  fmtCount  =  pattern.length();  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	Integer  fmtCount  =  pattern.length();	  int    fmtCount    =    pattern.length()    +    1;    	non-compiled	[CE]  ';'  expected	29	None	replace
78	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  start;  i  <  len;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  start;  i  <  len;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  for(int  i  =  start;  i  <  len;  i++)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    i    =    start;    i    <    len;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	90	None	replace
79	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  for(int  i  =  start;  i  <  len;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  ==  0)  {  for(int  i  =  start;  i  <  len;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  ==  0)  {  for(int  i  =  start;  i  <  len;  i++)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    i    =    start;    i    <    len;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	90	None	replace
80	[BUG]  [BUGGY]  foundDescriptions.add(format  ==  null?  format  :  format);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  foundDescriptions.add(format  ==  null?  format  :  format);  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundDescriptions.add(format  ==  null?  format  :  format);	  foundDescriptions.add(format    ==    null?   "   "    :    format);    	non-compiled	[CE]  ';'  expected	87	None	replace
81	[BUG]  [BUGGY]  foundDescriptions.add(format  ==  null?  format  :   " ");  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  foundDescriptions.add(format  ==  null?  format  :   " ");  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundDescriptions.add(format  ==  null?  format  :   " ");	  foundDescriptions.add(format    ==    null?   "   "    :    format);    	non-compiled	[CE]  ';'  expected	87	None	replace
82	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	42	None	replace
83	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(QUOTE);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(QUOTE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(QUOTE);  }	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	42	None	replace
84	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }	  Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
85	[BUG]  [BUGGY]  foundFormats.add(format,  START_FE);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  foundFormats.add(format,  START_FE);  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundFormats.add(format,  START_FE);	  foundFormats.add(format,    DUMMY_PATTERN);    	non-compiled	[CE]  ';'  expected	58	None	replace
86	[BUG]  [BUGGY]  if(format.length()  >  0)  {  for(int  fmtCount  =  format.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  >  0)  {  for(int  fmtCount  =  format.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  >  0)  {  for(int  fmtCount  =  format.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(format.length()    ==    0)    {    for(int    fmtCount    =    format.length();    fmtCount    >    0;    fmtCount++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
87	[BUG]  [BUGGY]  for(int  fmtCount  =  format.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  for(int  fmtCount  =  format.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	for(int  fmtCount  =  format.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(format.length()    ==    0)    {    for(int    fmtCount    =    format.length();    fmtCount    >    0;    fmtCount++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
88	[BUG]  [BUGGY]  foundFormats.add(format,  QUOTE);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  foundFormats.add(format,  QUOTE);  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundFormats.add(format,  QUOTE);	  foundDescriptions.add(format,    END_FE);    	non-compiled	[CE]  ';'  expected	81	None	replace
89	[BUG]  [BUGGY]  foundFormats.add(format  >=  null?  null  :  format);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  foundFormats.add(format  >=  null?  null  :  format);  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundFormats.add(format  >=  null?  null  :  format);	  foundFormats.add(format!=    null?    null    :    format);    	non-compiled	[CE]  ';'  expected	37	None	replace
90	[BUG]  [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }	  if(format!=    null)    {    for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(END_FE).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
91	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  ==  0)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  ==  0)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }	  if(format!=    null)    {    for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(END_FE).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
92	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fmtCount  -  1;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  for(int  i  =  0;  i  <  fmtCount  -  1;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	for(int  i  =  0;  i  <  fmtCount  -  1;  i++)  {  stripCustom.append(END_FE);  }	  for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
93	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fmtCount  &&  stripCustom.append(END_FE);  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  for(int  i  =  0;  i  <  fmtCount  &&  stripCustom.append(END_FE);  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	for(int  i  =  0;  i  <  fmtCount  &&  stripCustom.append(END_FE);  i++)  {  stripCustom.append(END_FE);  }	  for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
94	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fmtCount  -  2;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  for(int  i  =  0;  i  <  fmtCount  -  2;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	for(int  i  =  0;  i  <  fmtCount  -  2;  i++)  {  stripCustom.append(END_FE);  }	  for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
95	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  pos.getCount();  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  for(int  i  =  0;  i  <  pos.getCount();  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	for(int  i  =  0;  i  <  pos.getCount();  i++)  {  stripCustom.append(END_FE);  }	  for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
96	[BUG]  [BUGGY]  foundFormats.add(formatDescription  ==  null?  null  :  formatDescription);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  foundFormats.add(formatDescription  ==  null?  null  :  formatDescription);  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundFormats.add(formatDescription  ==  null?  null  :  formatDescription);	  foundFormats.add(format    ==    null?    null    :    formatDescription);    	non-compiled	[CE]  ';'  expected	86	None	replace
97	[BUG]  [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  this.origFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  for(Iterator  it  =  this.origFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  for(Iterator  it  =  this.origFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(format!=    null)    {    for(Iterator    it    =    this.origFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	70	None	replace
98	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  for(Iterator  it  =  this.origFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  ==  0)  {  for(Iterator  it  =  this.origFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  ==  0)  {  for(Iterator  it  =  this.origFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(format!=    null)    {    for(Iterator    it    =    this.origFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	70	None	replace
99	[BUG]  [BUGGY]  for(Iterator  it  =  this.origFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  for(Iterator  it  =  this.origFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	for(Iterator  it  =  this.origFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(format!=    null)    {    for(Iterator    it    =    this.origFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	70	None	replace
100	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }	  if(format.length()    ==    0)    {    for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
101	[BUG]  [BUGGY]  if(format.length()!=  0)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()!=  0)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()!=  0)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }	  if(format.length()    ==    0)    {    for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
102	[BUG]  [BUGGY]  int  fmtCount  =  this.format.length()  -  1;  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  int  fmtCount  =  this.format.length()  -  1;  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	int  fmtCount  =  this.format.length()  -  1;	  int    fmtCount    =    this.format.length();    	non-compiled	[CE]  ';'  expected	68	None	replace
103	[BUG]  [BUGGY]  int  fmtCount  =  this.format.length()  +  1;  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  int  fmtCount  =  this.format.length()  +  1;  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	int  fmtCount  =  this.format.length()  +  1;	  int    fmtCount    =    this.format.length();    	non-compiled	[CE]  ';'  expected	68	None	replace
104	[BUG]  [BUGGY]  if(format  ==  null)  {  foundFormats.add(format);  }  else  {  stripCustom.append('n');  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  foundFormats.add(format);  }  else  {  stripCustom.append('n');  }  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  foundFormats.add(format);  }  else  {  stripCustom.append('n');  }	  if(format!=    null)    {    foundFormats.add(format);    }    else    {    stripCustom.append('n');    }    	non-compiled	[CE]  ';'  expected	95	None	replace
105	[BUG]  [BUGGY]  if(format!=  null)  {  foundFormats.add(format,  formatDescription);  }  else  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  foundFormats.add(format,  formatDescription);  }  else  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  foundFormats.add(format,  formatDescription);  }  else  {  stripCustom.append(DUMMY_PATTERN);  }	  if(formatDescription!=    null)    {    foundDescriptions.add(format,    formatDescription);    }    else    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
106	[BUG]  [BUGGY]  if(format  ==  null)  {  foundFormats.add(format,  formatDescription);  }  else  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  foundFormats.add(format,  formatDescription);  }  else  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  foundFormats.add(format,  formatDescription);  }  else  {  stripCustom.append(DUMMY_PATTERN);  }	  if(formatDescription!=    null)    {    foundDescriptions.add(format,    formatDescription);    }    else    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
107	[BUG]  [BUGGY]  if(format!=  null)  {  foundFormats.add(format,  formatDescription);  }  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  foundFormats.add(format,  formatDescription);  }  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  foundFormats.add(format,  formatDescription);  }	  if(formatDescription!=    null)    {    foundDescriptions.add(format,    formatDescription);    }    else    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
108	[BUG]  [BUGGY]  if(format!=  null)  {  foundDescriptions.add(format,  formatDescription);  }  else  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  foundDescriptions.add(format,  formatDescription);  }  else  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  foundDescriptions.add(format,  formatDescription);  }  else  {  stripCustom.append(DUMMY_PATTERN);  }	  if(formatDescription!=    null)    {    foundDescriptions.add(format,    formatDescription);    }    else    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
109	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }	  if(format!=    null)    {    for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(END_FE).append(formatDescription);    }    	non-compiled	[CE]  ';'  expected	64	None	replace
110	[BUG]  [BUGGY]  if(format.length()  >=  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  >=  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  >=  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	  if(format.length()!=    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
111	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE,  formatDescription);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE,  formatDescription);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE,  formatDescription);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE,    formatDescription);    }    	non-compiled	[CE]  ';'  expected	21	None	replace
112	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE,  formatDescription);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE,  formatDescription);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE,  formatDescription);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE,    formatDescription);    }    	non-compiled	[CE]  ';'  expected	21	None	replace
113	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE,  formatDescription);  }  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE,  formatDescription);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FE,  formatDescription);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE,    formatDescription);    }    	non-compiled	[CE]  ';'  expected	21	None	replace
114	[BUG]  [BUGGY]  if(format.length()!=  0)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()!=  0)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()!=  0)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(format.length()    ==    0)    {    for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
115	[BUG]  [BUGGY]  if(format.length()  <  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  <  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  <  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	  if(format.length()    <    =    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	78	None	replace
116	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  for(int  fmtCount  =  0;  fmtCount  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  ==  0)  {  for(int  fmtCount  =  0;  fmtCount  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  ==  0)  {  for(int  fmtCount  =  0;  fmtCount  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	  if(format.length()    <    =    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	78	None	replace
117	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	  if(format    ==    null)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
118	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  foundFormats.add(format,  ESCAPED_QUOTE);  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  ==  0)  {  foundFormats.add(format,  ESCAPED_QUOTE);  }  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  ==  0)  {  foundFormats.add(format,  ESCAPED_QUOTE);  }	  foundFormats.add(format,    ESCAPED_QUOTE);    	non-compiled	[CE]  ';'  expected	67	None	replace
119	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  foundFormats.add(format,  ESCAPED_QUOTE);  }  else  {  stripCustom.append(STRING_QUOTE);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  ==  0)  {  foundFormats.add(format,  ESCAPED_QUOTE);  }  else  {  stripCustom.append(STRING_QUOTE);  }  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  ==  0)  {  foundFormats.add(format,  ESCAPED_QUOTE);  }  else  {  stripCustom.append(STRING_QUOTE);  }	  foundFormats.add(format,    ESCAPED_QUOTE);    	non-compiled	[CE]  ';'  expected	67	None	replace
120	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  foundFormats.add(format,  ESCAPED_QUOTE);  }  else  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  ==  0)  {  foundFormats.add(format,  ESCAPED_QUOTE);  }  else  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  ==  0)  {  foundFormats.add(format,  ESCAPED_QUOTE);  }  else  {  stripCustom.append(DUMMY_PATTERN);  }	  foundFormats.add(format,    ESCAPED_QUOTE);    	non-compiled	[CE]  ';'  expected	67	None	replace
121	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  fmtCount  =  pattern.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  for(int  fmtCount  =  pattern.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  for(int  fmtCount  =  pattern.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    fmtCount    =    pattern.length();    fmtCount    >    0;    fmtCount++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	69	None	replace
122	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  fmtCount  =  pattern.length();  fmtCount  >=  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(int  fmtCount  =  pattern.length();  fmtCount  >=  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(int  fmtCount  =  pattern.length();  fmtCount  >=  0;  fmtCount++)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    fmtCount    =    pattern.length();    fmtCount    >    0;    fmtCount++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	69	None	replace
123	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  fmtCount  =  pattern.length();  fmtCount  >=  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  for(int  fmtCount  =  pattern.length();  fmtCount  >=  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  for(int  fmtCount  =  pattern.length();  fmtCount  >=  0;  fmtCount++)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    fmtCount    =    pattern.length();    fmtCount    >    0;    fmtCount++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	69	None	replace
124	[BUG]  [BUGGY]  if(format.length()!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(format.length()    ==    0)    {    for(Iterator    it    =    origFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	41	None	replace
125	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  fmtCount  =  foundFormats.length();  fmtCount  >  1)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(int  fmtCount  =  foundFormats.length();  fmtCount  >  1)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(int  fmtCount  =  foundFormats.length();  fmtCount  >  1)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    fmtCount    =    foundFormats.length();    fmtCount    >    0;    fmtCount++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
126	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  fmtCount  =  format.length();  fmtCount++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  for(int  fmtCount  =  format.length();  fmtCount++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  for(int  fmtCount  =  format.length();  fmtCount++)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    fmtCount    =    format.length();    fmtCount++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	84	None	replace
127	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  fmtCount  =  pattern.length();  fmtCount++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(int  fmtCount  =  pattern.length();  fmtCount++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(int  fmtCount  =  pattern.length();  fmtCount++)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    fmtCount    =    format.length();    fmtCount++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	84	None	replace
128	[BUG]  [BUGGY]  if(format  ==  null)  {  foundFormats.add(format);  }  else  {  stripCustom.append(SUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  foundFormats.add(format);  }  else  {  stripCustom.append(SUMMY_PATTERN);  }  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  foundFormats.add(format);  }  else  {  stripCustom.append(SUMMY_PATTERN);  }	  if(format!=    null)    {    foundFormats.add(format);    }    else    {    stripCustom.append(SUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	56	None	replace
129	[BUG]  [BUGGY]  int  fmtCount  =  this.pattern.length()  -  1;  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  int  fmtCount  =  this.pattern.length()  -  1;  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	int  fmtCount  =  this.pattern.length()  -  1;	  int    fmtCount    =    this.pattern.length();    	non-compiled	[CE]  ';'  expected	79	None	replace
130	[BUG]  [BUGGY]  int  fmtCount  =  this.pattern.length()  +  1;  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  int  fmtCount  =  this.pattern.length()  +  1;  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	int  fmtCount  =  this.pattern.length()  +  1;	  int    fmtCount    =    this.pattern.length();    	non-compiled	[CE]  ';'  expected	79	None	replace
131	[BUG]  [BUGGY]  char  fmtCount  =  this.pattern.length();  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  char  fmtCount  =  this.pattern.length();  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	char  fmtCount  =  this.pattern.length();	  int    fmtCount    =    this.pattern.length();    	non-compiled	[CE]  ';'  expected	79	None	replace
132	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  if(format!=  null)  {  foundFormats.add(format);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  ==  0)  {  if(format!=  null)  {  foundFormats.add(format);  }  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  ==  0)  {  if(format!=  null)  {  foundFormats.add(format);  }	  if(format!=    null)    {    foundFormats.add(format);    }    else    {    stripCustom.append('[');    }    	non-compiled	[CE]  ';'  expected	16	None	replace
133	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  fmtCount  =  0;  fmtCount  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(int  fmtCount  =  0;  fmtCount  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(int  fmtCount  =  0;  fmtCount  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	  if(format.length()!=    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
134	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  fmtCount  =  findFormats.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(int  fmtCount  =  findFormats.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(int  fmtCount  =  findFormats.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    fmtCount    =    foundFormats.length();    fmtCount    >    0;    fmtCount++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
135	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  fmtCount  =  foundFormats.size();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(int  fmtCount  =  foundFormats.size();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(int  fmtCount  =  foundFormats.size();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    fmtCount    =    foundFormats.length();    fmtCount    >    0;    fmtCount++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
136	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numFormats;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  for(int  i  =  0;  i  <  numFormats;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	for(int  i  =  0;  i  <  numFormats;  i++)  {  stripCustom.append(END_FE);  }	  for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
137	[BUG]  [BUGGY]  int  i  =  0;  i  <  fmtCount  -  1;  i++)  {  stripCustom.append(END_FE);  }  [CE]  >  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  int  i  =  0;  i  <  fmtCount  -  1;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	int  i  =  0;  i  <  fmtCount  -  1;  i++)  {  stripCustom.append(END_FE);  }	  for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  >  expected	35	None	replace
138	[BUG]  [BUGGY]  for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }	  for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	51	None	replace
139	[BUG]  [BUGGY]  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }	  for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	51	None	replace
140	[BUG]  [BUGGY]  foundFormats.add(format,  DEFAULT_DUMMY_PATTERN);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  foundFormats.add(format,  DEFAULT_DUMMY_PATTERN);  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundFormats.add(format,  DEFAULT_DUMMY_PATTERN);	  foundFormats.add(format,    ESCAPED_QUOTE);    	non-compiled	[CE]  ';'  expected	67	None	replace
141	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  fmtCount  =  pattern.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(FINAL_FE);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(int  fmtCount  =  pattern.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(FINAL_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(int  fmtCount  =  pattern.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(FINAL_FE);  }	  if(format!=    null)    {    for(int    fmtCount    =    pattern.length();    fmtCount    >    0;    fmtCount++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	69	None	replace
142	[BUG]  [BUGGY]  if(format!=  null)  {  int  fmtCount  =  format.length();  for(int  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  int  fmtCount  =  format.length();  for(int  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  int  fmtCount  =  format.length();  for(int  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(format.length()    ==    0)    {    for(int    fmtCount    =    format.length();    fmtCount    >    0;    fmtCount++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
143	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  >=  0;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  >=  0;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(int  i  =  start;  i  >=  0;  ++i)  {  stripCustom.append(END_FE);  }	  if(format    ==    null)    {    for(int    i    =    start;    i    <    0;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
144	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  start;  i  >=  0;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  start;  i  >=  0;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  for(int  i  =  start;  i  >=  0;  ++i)  {  stripCustom.append(END_FE);  }	  if(format    ==    null)    {    for(int    i    =    start;    i    <    0;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
145	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start  +  1;  i  <  0;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start  +  1;  i  <  0;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(int  i  =  start  +  1;  i  <  0;  i++)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    i    =    start    +    fmtCount;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	66	None	replace
146	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  end;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  end;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(int  i  =  start;  i  <  end;  ++i)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    i    =    start;    i    <    len;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	80	None	replace
147	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(QUOTE);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(QUOTE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(QUOTE);  }	  Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
148	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(END_FE);  }	  if(format.length()    ==    0)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	36	None	replace
149	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  for(int  i  =  0;  i  <  foundFormats.size();  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  ==  0)  {  for(int  i  =  0;  i  <  foundFormats.size();  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  ==  0)  {  for(int  i  =  0;  i  <  foundFormats.size();  i++)  {  stripCustom.append(END_FE);  }	  if(format.length()    ==    0)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	36	None	replace
150	[BUG]  [BUGGY]  if(format  ==  null)  {  foundFormats.add(format);  }  else  {  stripCustom.append(';');  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  foundFormats.add(format);  }  else  {  stripCustom.append(';');  }  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  foundFormats.add(format);  }  else  {  stripCustom.append(';');  }	  if(format!=    null)    {    foundFormats.add(format);    }    else    {    stripCustom.append(';');    }    	non-compiled	[CE]  ';'  expected	14	None	replace
151	[BUG]  [BUGGY]  if(format!=  null)  {  foundFormats.add(format,  format);  }  else  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  foundFormats.add(format,  format);  }  else  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  foundFormats.add(format,  format);  }  else  {  stripCustom.append(DUMMY_PATTERN);  }	  foundFormats.add(format,    format);    	non-compiled	[CE]  ';'  expected	73	None	replace
152	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.origFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  Iterator  <  String>  it  =  this.origFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	Iterator  <  String>  it  =  this.origFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(format!=    null)    {    for(Iterator    it    =    this.origFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
153	[BUG]  [BUGGY]  foundFormats.add(formatDescription  ==  null?  null  :  format);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  foundFormats.add(formatDescription  ==  null?  null  :  format);  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundFormats.add(formatDescription  ==  null?  null  :  format);	  foundFormats.add(format    ==    null?    null    :    formatDescription);    	non-compiled	[CE]  ';'  expected	86	None	replace
154	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  fmtCount  =  format.length();  fmtCount  >  2)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(int  fmtCount  =  format.length();  fmtCount  >  2)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(int  fmtCount  =  format.length();  fmtCount  >  2)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    fmtCount    =    format.length();    fmtCount    >    1)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	40	None	replace
155	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }	  Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
156	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(QUOTE);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(QUOTE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(QUOTE);  }	  Iterator    <    String>    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
157	[BUG]  [BUGGY]  foundFormats.add(format  >>  null?  null  :  format);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  foundFormats.add(format  >>  null?  null  :  format);  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundFormats.add(format  >>  null?  null  :  format);	  foundFormats.add(format!=    null?    null    :    format);    	non-compiled	[CE]  ';'  expected	37	None	replace
158	[BUG]  [BUGGY]  if(format!=  null)  {  foundFormats.add(format,  formatDescription);  }  else  {  stripCustom.append(ESCAPED_QUOTE);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  foundFormats.add(format,  formatDescription);  }  else  {  stripCustom.append(ESCAPED_QUOTE);  }  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  foundFormats.add(format,  formatDescription);  }  else  {  stripCustom.append(ESCAPED_QUOTE);  }	  if(formatDescription!=    null)    {    foundDescriptions.add(format,    formatDescription);    }    else    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
159	[BUG]  [BUGGY]  foundFormats.add(format  ==  null?   "NULL "  :  format);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  foundFormats.add(format  ==  null?   "NULL "  :  format);  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundFormats.add(format  ==  null?   "NULL "  :  format);	  foundFormats.add(format    ==    null?   "   "    :    format);    	non-compiled	[CE]  ';'  expected	72	None	replace
160	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  fmtCount  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(int  fmtCount  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(int  fmtCount  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	  if(format.length()    ==    0)    {    for(int    fmtCount    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	49	None	replace
161	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    i    =    start;    i    <    len;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	90	None	replace
162	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  >=  0;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  >=  0;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(int  i  =  start;  i  >=  0;  i++)  {  stripCustom.append(END_FE);  }	  if(format    ==    null)    {    for(int    i    =    start;    i    <    0;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	46	None	replace
163	[BUG]  [BUGGY]  if(format  ==  null)  {  for(int  i  =  start;  i  >=  0;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  for(int  i  =  start;  i  >=  0;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  for(int  i  =  start;  i  >=  0;  i++)  {  stripCustom.append(END_FE);  }	  if(format    ==    null)    {    for(int    i    =    start;    i    <    0;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	46	None	replace
164	[BUG]  [BUGGY]  char  fmtCount  =  pattern.length();  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  char  fmtCount  =  pattern.length();  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	char  fmtCount  =  pattern.length();	  int    fmtCount    =    pattern.length()    +    1;    	non-compiled	[CE]  ';'  expected	29	None	replace
165	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  numFormats;  i++)  {  stripCustom.append(END_FE,  formatDescription);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  numFormats;  i++)  {  stripCustom.append(END_FE,  formatDescription);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  numFormats;  i++)  {  stripCustom.append(END_FE,  formatDescription);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE,    formatDescription);    }    	non-compiled	[CE]  ';'  expected	21	None	replace
166	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FE,  formatDescription);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FE,  formatDescription);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FE,  formatDescription);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE,    formatDescription);    }    	non-compiled	[CE]  ';'  expected	21	None	replace
167	[BUG]  [BUGGY]  foundFormats.add(formatDescription);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  foundFormats.add(formatDescription);  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundFormats.add(formatDescription);	  foundFormats.add(format;    	non-compiled	[CE]  ';'  expected	57	None	replace
168	[BUG]  [BUGGY]  for(int  fmtCount  =  c.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  for(int  fmtCount  =  c.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	for(int  fmtCount  =  c.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }	  if(format.length()    ==    0)    {    for(int    fmtCount    =    c.length();    fmtCount    >    0;    fmtCount++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
169	[BUG]  [BUGGY]  int  fmtCount  =  origFormats.length();  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  int  fmtCount  =  origFormats.length();  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	int  fmtCount  =  origFormats.length();	  int    fmtCount    =    foundFormats.length();    	non-compiled	[CE]  ';'  expected	31	None	replace
170	[BUG]  [BUGGY]  int  formatCount  =  format.length();  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  int  formatCount  =  format.length();  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	int  formatCount  =  format.length();	  if(format.length()    >    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	91	None	replace
171	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(DUMMY_PATTERN);  }	  if(format!=    null)    {    for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
172	[BUG]  [BUGGY]  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }	  if(format!=    null)    {    for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(END_FE).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
173	[BUG]  [BUGGY]  Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	Iterator  <  String>  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }	  if(format    ==    null)    {    for(Iterator    it    =    origFormats.iterator();    it.hasNext();)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
174	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start  +  2;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start  +  2;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(int  i  =  start  +  2;  ++i)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    i    =    start    +    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
175	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(int  i  =  start;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FE);  }	  if(format.length()    ==    0)    {    for(int    i    =    start;    i    <    pos.getIndex();    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	54	None	replace
176	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  for(int  i  =  start;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	for(int  i  =  start;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FE);  }	  if(format.length()    ==    0)    {    for(int    i    =    start;    i    <    pos.getIndex();    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	54	None	replace
177	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  for(int  i  =  start  +  1;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  ==  0)  {  for(int  i  =  start  +  1;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  ==  0)  {  for(int  i  =  start  +  1;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FE);  }	  if(format.length()    ==    0)    {    for(int    i    =    start;    i    <    pos.getIndex();    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	54	None	replace
178	[BUG]  [BUGGY]  foundDescriptions.add(format!=  ESCAPED_QUOTE?  null  :  format);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  foundDescriptions.add(format!=  ESCAPED_QUOTE?  null  :  format);  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundDescriptions.add(format!=  ESCAPED_QUOTE?  null  :  format);	  foundDescriptions.add(format    ==    DUMMY_PATTERN?    null    :    format);    	non-compiled	[CE]  ';'  expected	62	None	replace
179	[BUG]  [BUGGY]  foundFormats.add(format  ==  ESCAPED_QUOTE?  null  :  format);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  foundFormats.add(format  ==  ESCAPED_QUOTE?  null  :  format);  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundFormats.add(format  ==  ESCAPED_QUOTE?  null  :  format);	  foundDescriptions.add(format    ==    DUMMY_PATTERN?    null    :    format);    	non-compiled	[CE]  ';'  expected	62	None	replace
180	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE  +  1);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE  +  1);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE  +  1);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
181	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }	  if(format    <    DUMMY_PATTERN)    {    for(Iterator    it    =    origFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	89	None	replace
182	[BUG]  [BUGGY]  foundFormats.add(format,  DEMY_PATTERN);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  foundFormats.add(format,  DEMY_PATTERN);  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundFormats.add(format,  DEMY_PATTERN);	  foundFormats.add(format,    ESCAPED_QUOTE);    	non-compiled	[CE]  ';'  expected	67	None	replace
183	[BUG]  [BUGGY]  if(format.length()  >  0)  {  for(int  i  =  start;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  >  0)  {  for(int  i  =  start;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  >  0)  {  for(int  i  =  start;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FE);  }	  if(format.length()    ==    0)    {    for(int    i    =    start;    i    <    pos.getIndex();    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	54	None	replace
184	[BUG]  [BUGGY]  if(format.length()  >=  0)  {  for(int  i  =  start;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  >=  0)  {  for(int  i  =  start;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  >=  0)  {  for(int  i  =  start;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FE);  }	  if(format.length()    ==    0)    {    for(int    i    =    start;    i    <    pos.getIndex();    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	54	None	replace
185	[BUG]  [BUGGY]  if(format.length()  <  0)  {  for(int  i  =  start;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  <  0)  {  for(int  i  =  start;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  <  0)  {  for(int  i  =  start;  i  <  pos.getIndex();  i++)  {  stripCustom.append(END_FE);  }	  if(format.length()    ==    0)    {    for(int    i    =    start;    i    <    pos.getIndex();    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	54	None	replace
186	[BUG]  [BUGGY]  if(format  ==  null)  {  foundDescriptions.add(format);  }  else  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  foundDescriptions.add(format);  }  else  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  foundDescriptions.add(format);  }  else  {  stripCustom.append(DUMMY_PATTERN);  }	  if(format!=    null)    {    foundDescriptions.add(format);    }    else    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	53	None	replace
187	[BUG]  [BUGGY]  if(format  ==  null)  {  foundDescriptions.add(format);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  foundDescriptions.add(format);  }  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  foundDescriptions.add(format);  }	  if(format!=    null)    {    foundDescriptions.add(format);    }    else    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	53	None	replace
188	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  for(int  fmtCount  =  format.length();  fmtCount++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  ==  0)  {  for(int  fmtCount  =  format.length();  fmtCount++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  ==  0)  {  for(int  fmtCount  =  format.length();  fmtCount++)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    fmtCount    =    format.length();    fmtCount++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	84	None	replace
189	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  format.length();  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(int  i  =  format.length();  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(int  i  =  format.length();  i  <  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    fmtCount    =    format.length();    fmtCount++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	84	None	replace
190	[BUG]  [BUGGY]  if(format  <  0)  {  for(int  fmtCount  =  c.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  <  0)  {  for(int  fmtCount  =  c.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  <  0)  {  for(int  fmtCount  =  c.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }	  if(format    >=    null)    {    for(int    fmtCount    =    c.length();    fmtCount    >    0;    fmtCount++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	65	None	replace
191	[BUG]  [BUGGY]  if(format.length()  >  0)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  >  0)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  >  0)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(format.length()    ==    0)    {    for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
192	[BUG]  [BUGGY]  if(origFormats!=  null)  {  for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(origFormats!=  null)  {  for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(origFormats!=  null)  {  for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(format.length()    ==    0)    {    for(Iterator    it    =    origFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	41	None	replace
193	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT).append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT).append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  stripCustom.append(START_FMT).append(DUMMY_PATTERN);  }	  if(format!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	63	None	replace
194	[BUG]  [BUGGY]  if(format  >=  null)  {  for(int  fmtCount  =  foundFormats.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  >=  null)  {  for(int  fmtCount  =  foundFormats.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  >=  null)  {  for(int  fmtCount  =  foundFormats.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    fmtCount    =    foundFormats.length();    fmtCount    >    0;    fmtCount++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
195	[BUG]  [BUGGY]  if(formatDescription!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(formatDescription!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(formatDescription!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }	  if(format    ==    null)    {    for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(END_FE).append(formatDescription);    }    	non-compiled	[CE]  ';'  expected	74	None	replace
196	[BUG]  [BUGGY]  if(format  <  END_FE)  {  for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  <  END_FE)  {  for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  <  END_FE)  {  for(Iterator  it  =  origFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }	  if(format    ==    null)    {    for(Iterator    it    =    origFormats.iterator();    it.hasNext();)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	71	None	replace
197	[BUG]  [BUGGY]  if(formatDescription!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(formatDescription!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(formatDescription!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT);  }	  if(formatDescription!=    null)    {    for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	88	None	replace
198	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT);  }	  if(formatDescription!=    null)    {    for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	88	None	replace
199	[BUG]  [BUGGY]  if(formatDescription!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(formatDescription);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(formatDescription!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(formatDescription);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(formatDescription!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FMT).append(formatDescription);  }	  if(formatDescription!=    null)    {    for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	88	None	replace
200	[BUG]  [BUGGY]  if(format.length()  <  0)  {  for(int  fmtCount  =  format.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  <  0)  {  for(int  fmtCount  =  format.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  <  0)  {  for(int  fmtCount  =  format.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(format.length()    ==    0)    {    for(int    fmtCount    =    format.length();    fmtCount    >    0;    fmtCount++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
201	[BUG]  [BUGGY]  if(format  <  0)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  <  0)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  <  0)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    i    =    start;    i    <    0;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
202	[BUG]  [BUGGY]  if(formatDescription!=  null)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(formatDescription!=  null)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(formatDescription!=  null)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    i    =    start;    i    <    0;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
203	[BUG]  [BUGGY]  if(format!=  null)  {  for(int  i  =  start  +  2;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(int  i  =  start  +  2;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(int  i  =  start  +  2;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    i    =    start    +    fmtCount;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	66	None	replace
204	[BUG]  [BUGGY]  if(format  >=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  >=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  >=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    numFormats;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	59	None	replace
205	[BUG]  [BUGGY]  if(format.length()  <  =  0)  {  for(int  fmtCount  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  <  =  0)  {  for(int  fmtCount  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  <  =  0)  {  for(int  fmtCount  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	  if(format.length()    ==    0)    {    for(int    fmtCount    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
206	[BUG]  [BUGGY]  if(format.length()  >  0)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  >  0)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  >  0)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }	  if(format.length()    ==    0)    {    for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
207	[BUG]  [BUGGY]  if(format.length()  >  0)  {  for(int  fmtCount  =  format.length();  fmtCount  >  1)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  >  0)  {  for(int  fmtCount  =  format.length();  fmtCount  >  1)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  >  0)  {  for(int  fmtCount  =  format.length();  fmtCount  >  1)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    fmtCount    =    format.length();    fmtCount    >    1)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	40	None	replace
208	[BUG]  [BUGGY]  if(format  <  0)  {  for(int  i  =  0;  i  <  numDescriptions;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  <  0)  {  for(int  i  =  0;  i  <  numDescriptions;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  <  0)  {  for(int  i  =  0;  i  <  numDescriptions;  i++)  {  stripCustom.append(END_FE);  }	  if(format    ==    null)    {    for(int    i    =    0;    i    <    numDescriptions;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	83	None	replace
209	[BUG]  [BUGGY]  if(format.length()  >  0)  {  for(int  fmtCount  =  c.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  >  0)  {  for(int  fmtCount  =  c.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  >  0)  {  for(int  fmtCount  =  c.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }	  if(format.length()    ==    0)    {    for(int    fmtCount    =    c.length();    fmtCount    >    0;    fmtCount++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
210	[BUG]  [BUGGY]  if(format.length()  ==  0)  {  for(int  fmtCount  =  pattern.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  ==  0)  {  for(int  fmtCount  =  pattern.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  ==  0)  {  for(int  fmtCount  =  pattern.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }	  if(format.length()    ==    0)    {    for(int    fmtCount    =    c.length();    fmtCount    >    0;    fmtCount++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
211	[BUG]  [BUGGY]  if(format.length()  >  0)  {  for(int  fmtCount  =  format.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  >  0)  {  for(int  fmtCount  =  format.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  >  0)  {  for(int  fmtCount  =  format.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }	  if(format.length()    ==    0)    {    for(int    fmtCount    =    format.length();    fmtCount    >    0;    fmtCount++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	39	None	replace
212	[BUG]  [BUGGY]  foundDescriptions.add(format,  DEMY_PATTERN);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  foundDescriptions.add(format,  DEMY_PATTERN);  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundDescriptions.add(format,  DEMY_PATTERN);	  foundDescriptions.add(format,    ESCAPED_QUOTE);    	non-compiled	[CE]  ';'  expected	10	None	replace
213	[BUG]  [BUGGY]  foundDescriptions.add(format,  DEMY_QUOTE);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  foundDescriptions.add(format,  DEMY_QUOTE);  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundDescriptions.add(format,  DEMY_QUOTE);	  foundDescriptions.add(format,    ESCAPED_QUOTE);    	non-compiled	[CE]  ';'  expected	10	None	replace
214	[BUG]  [BUGGY]  if(format  <  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  <  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  <  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    i    =    start;    i    <    0;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
215	[BUG]  [BUGGY]  int  fmtCount  =  origFormats.length;  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  int  fmtCount  =  origFormats.length;  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	int  fmtCount  =  origFormats.length;	  int    fmtCount    =    foundFormats.length();    	non-compiled	[CE]  ';'  expected	31	None	replace
216	[BUG]  [BUGGY]  int  fmtCount  =  foundFormats.length  -  1;  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  int  fmtCount  =  foundFormats.length  -  1;  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	int  fmtCount  =  foundFormats.length  -  1;	  int    fmtCount    =    foundFormats.length();    	non-compiled	[CE]  ';'  expected	31	None	replace
217	[BUG]  [BUGGY]  foundFormats.add(format,  END_FE);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  foundFormats.add(format,  END_FE);  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundFormats.add(format,  END_FE);	  foundFormats.add(format,    DUMMY_PATTERN);    	non-compiled	[CE]  ';'  expected	58	None	replace
218	[BUG]  [BUGGY]  foundFormats.add(format!=  null?  format  :  format);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  foundFormats.add(format!=  null?  format  :  format);  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundFormats.add(format!=  null?  format  :  format);	  foundFormats.add(format    ==    null?   "   "    :    format);    	non-compiled	[CE]  ';'  expected	72	None	replace
219	[BUG]  [BUGGY]  if(formatDescription!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(formatDescription!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(formatDescription!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }	  if(format!=    null)    {    for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(END_FE).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
220	[BUG]  [BUGGY]  if(format  ==  null)  {  foundFormats.add(format);  }  else  {  stripCustom.append('[');  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  foundFormats.add(format);  }  else  {  stripCustom.append('[');  }  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  foundFormats.add(format);  }  else  {  stripCustom.append('[');  }	  if(format!=    null)    {    foundFormats.add(format);    }    else    {    stripCustom.append('[');    }    	non-compiled	[CE]  ';'  expected	16	None	replace
221	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	Iterator  <  String>  it  =  foundDescriptions.iterator();	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	42	None	replace
222	[BUG]  [BUGGY]  if(format  <  0)  {  for(int  i  =  0;  i  <  numFormats;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  <  0)  {  for(int  i  =  0;  i  <  numFormats;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  <  0)  {  for(int  i  =  0;  i  <  numFormats;  i++)  {  stripCustom.append(END_FE);  }	  if(format    ==    null)    {    for(int    i    =    0;    i    <    numFormats;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	60	None	replace
223	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  this.origFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  this.origFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(Iterator  it  =  this.origFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE).append(formatDescription);  }	  if(format!=    null)    {    for(Iterator    it    =    this.origFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	70	None	replace
224	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  this.origFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  this.origFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  for(Iterator  it  =  this.origFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(Iterator    it    =    this.origFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	70	None	replace
225	[BUG]  [BUGGY]  if(format  ==  null)  {  foundDescriptions.add(format);  }  else  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  foundDescriptions.add(format);  }  else  {  stripCustom.append(END_FE);  }  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  foundDescriptions.add(format);  }  else  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    foundDescriptions.add(format);    }    else    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	82	None	replace
226	[BUG]  [BUGGY]  if(formatDescription!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(formatDescription!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(formatDescription!=  null)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	33	None	replace
227	[BUG]  [BUGGY]  if(format  >=  null)  {  for(int  fmtCount  =  pattern.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  >=  null)  {  for(int  fmtCount  =  pattern.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  >=  null)  {  for(int  fmtCount  =  pattern.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    fmtCount    =    pattern.length();    fmtCount    >    0;    fmtCount++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	69	None	replace
228	[BUG]  [BUGGY]  if(format  <  0)  {  for(int  fmtCount  =  format.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  <  0)  {  for(int  fmtCount  =  format.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  <  0)  {  for(int  fmtCount  =  format.length();  fmtCount  >  0;  fmtCount++)  {  stripCustom.append(END_FE);  }	  if(format    >=    null)    {    for(int    fmtCount    =    format.length();    fmtCount    >    0;    fmtCount++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	85	None	replace
229	[BUG]  [BUGGY]  foundDescriptions.add(format  ==  format?  null  :  format);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  foundDescriptions.add(format  ==  format?  null  :  format);  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundDescriptions.add(format  ==  format?  null  :  format);	  foundDescriptions.add(format    ==    DUMMY_PATTERN?    null    :    format);    	non-compiled	[CE]  ';'  expected	62	None	replace
230	[BUG]  [BUGGY]  if(format  >=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE,  formatDescription);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  >=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE,  formatDescription);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  >=  null)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE,  formatDescription);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE,    formatDescription);    }    	non-compiled	[CE]  ';'  expected	21	None	replace
231	[BUG]  [BUGGY]  if(format  <  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE,  formatDescription);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  <  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE,  formatDescription);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  <  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE,  formatDescription);  }	  if(format!=    null)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE,    formatDescription);    }    	non-compiled	[CE]  ';'  expected	21	None	replace
232	[BUG]  [BUGGY]  Iterator  <  String>  it  =  pattern.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  Iterator  <  String>  it  =  pattern.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	Iterator  <  String>  it  =  pattern.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }	  Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
233	[BUG]  [BUGGY]  Iterator  <  String>  it  =  c.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  Iterator  <  String>  it  =  c.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	Iterator  <  String>  it  =  c.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }	  Iterator    <    String>    it    =    origFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
234	[BUG]  [BUGGY]  if(format.length()  >  0)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  >  0)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  >  0)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(END_FE);  }	  if(format.length()    ==    0)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	36	None	replace
235	[BUG]  [BUGGY]  if(format.length()  <  0)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format.length()  <  0)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format.length()  <  0)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  i++)  {  stripCustom.append(END_FE);  }	  if(format.length()    ==    0)    {    for(int    i    =    0;    i    <    foundDescriptions.size();    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	36	None	replace
236	[BUG]  [BUGGY]  if(format  ==  null)  {  foundDescriptions.add(format);  }  else  {  stripCustom.append(';');  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  foundDescriptions.add(format);  }  else  {  stripCustom.append(';');  }  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  foundDescriptions.add(format);  }  else  {  stripCustom.append(';');  }	  if(format!=    null)    {    foundDescriptions.add(format);    }    else    {    stripCustom.append(';');    }    	non-compiled	[CE]  ';'  expected	44	None	replace
237	[BUG]  [BUGGY]  if(format!=  null)  {  foundDescriptions.add(format,  DEFAULT_QUOTE);  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format!=  null)  {  foundDescriptions.add(format,  DEFAULT_QUOTE);  }  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format!=  null)  {  foundDescriptions.add(format,  DEFAULT_QUOTE);  }	  foundDescriptions.add(format,    DEFAULT_QUOTE);    	non-compiled	[CE]  ';'  expected	11	None	replace
238	[BUG]  [BUGGY]  for(Iterator  it  =  c.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  for(Iterator  it  =  c.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	for(Iterator  it  =  c.iterator();  it.hasNext();)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(format    <    DUMMY_PATTERN)    {    for(Iterator    it    =    origFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	89	None	replace
239	[BUG]  [BUGGY]  if(format  <  0)  {  for(int  i  =  start  +  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  <  0)  {  for(int  i  =  start  +  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  <  0)  {  for(int  i  =  start  +  fmtCount;  ++i)  {  stripCustom.append(END_FE);  }	  if(format!=    null)    {    for(int    i    =    start    +    fmtCount;    ++i)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
240	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundFormats.iterator();  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  Iterator  <  String>  it  =  foundFormats.iterator();  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	Iterator  <  String>  it  =  foundFormats.iterator();	  for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	51	None	replace
241	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundFormats.iterator();  while(it.hasNext())  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  Iterator  <  String>  it  =  foundFormats.iterator();  while(it.hasNext())  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	Iterator  <  String>  it  =  foundFormats.iterator();  while(it.hasNext())  {  stripCustom.append(DUMMY_PATTERN);  }	  for(Iterator    it    =    foundFormats.iterator();    it.hasNext();)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	51	None	replace
242	[BUG]  [BUGGY]  if(format  ==  null)  {  foundDescriptions.add(format,  formatDescription);  }  else  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  ==  null)  {  foundDescriptions.add(format,  formatDescription);  }  else  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  ==  null)  {  foundDescriptions.add(format,  formatDescription);  }  else  {  stripCustom.append(DUMMY_PATTERN);  }	  if(formatDescription!=    null)    {    foundDescriptions.add(format,    formatDescription);    }    else    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
243	[BUG]  [BUGGY]  if(format  <  DUMMY_PATTERN)  {  foundDescriptions.add(format,  formatDescription);  }  else  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  if(format  <  DUMMY_PATTERN)  {  foundDescriptions.add(format,  formatDescription);  }  else  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	if(format  <  DUMMY_PATTERN)  {  foundDescriptions.add(format,  formatDescription);  }  else  {  stripCustom.append(DUMMY_PATTERN);  }	  if(formatDescription!=    null)    {    foundDescriptions.add(format,    formatDescription);    }    else    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
244	[BUG]  [BUGGY]  foundFormats.add(format!=  null?  null  :  formatDescription);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);      [BUGGY]  foundFormats.add(format!=  null?  null  :  formatDescription);  [BUGGY]      Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(       "Unreadable  format  element  at  position       "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	181	181	1	replace	foundFormats.add(format!=  null?  null  :  formatDescription);	  foundFormats.add(format    ==    null?    null    :    formatDescription);    	non-compiled	[CE]  ';'  expected	86	None	replace
