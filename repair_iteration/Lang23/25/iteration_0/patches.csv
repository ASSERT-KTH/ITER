bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(c[pos.getIndex()  -  1]!=  END_FE)  {  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [BUGGY]  if(c[pos.getIndex()  -  1]!=  END_FE)  {  [BUGGY]  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	184	184	1	replace	if(c[pos.getIndex()  -  1]!=  END_FE)  {	if  (c[pos.getIndex()]  !=  END_FE)  {  	non-compiled	[CE]  ';'  expected	49	None	replace
2	[BUG]  [BUGGY]  if(c[pos.getIndex()  -  1]  ==  END_FE)  {  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [BUGGY]  if(c[pos.getIndex()  -  1]  ==  END_FE)  {  [BUGGY]  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	184	184	1	replace	if(c[pos.getIndex()  -  1]  ==  END_FE)  {	if  (c[pos.getIndex()]  !=  END_FE)  {  	non-compiled	[CE]  ';'  expected	49	None	replace
3	[BUG]  [BUGGY]  if(pos.getIndex()  >=  END_FE)  {  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [BUGGY]  if(pos.getIndex()  >=  END_FE)  {  [BUGGY]  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	184	184	1	replace	if(pos.getIndex()  >=  END_FE)  {	if  (c[pos.getIndex()]  !=  END_FE)  {  	non-compiled	[CE]  ';'  expected	49	None	replace
4	[BUG]  [BUGGY]    [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry  [CONTEXT]  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [BUGGY]    [BUGGY]  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	184	184	1	replace	  	if  (c[pos.getIndex()]  !=  END_FE)  {  	non-compiled	[CE]  ';'  expected	49	None	replace
5	[BUG]  [BUGGY]    if(!stripCustom.isEmpty())  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT);  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [BUGGY]    if(!stripCustom.isEmpty())  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT);  }  [BUGGY]  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	184	184	1	replace	    if(!stripCustom.isEmpty())  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT);  }		non-compiled	[CE]  ';'  expected	50	None	add
6	[BUG]  [BUGGY]    if(stripCustom!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT);  }  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [BUGGY]    if(stripCustom!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT);  }  [BUGGY]  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	184	184	1	replace	    if(stripCustom!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(START_FMT);  }		non-compiled	[CE]  ';'  expected	50	None	add
7	[BUG]  [BUGGY]    if(!stripCustom.isEmpty())  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [BUGGY]    if(!stripCustom.isEmpty())  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	184	184	1	replace	    if(!stripCustom.isEmpty())  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }		non-compiled	[CE]  ';'  expected	50	None	add
8	[BUG]  [BUGGY]    if(stripCustom!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry  [CONTEXT]  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [BUGGY]    if(stripCustom!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	184	184	1	replace	    if(stripCustom!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }		non-compiled	[CE]  ';'  expected	50	None	add
9	[BUG]  [BUGGY]    if(!stripCustom.isEmpty())  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry  [CONTEXT]  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [BUGGY]    if(!stripCustom.isEmpty())  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }  [BUGGY]  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	184	184	1	replace	    if(!stripCustom.isEmpty())  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(START_FMT);  }		non-compiled	[CE]  ';'  expected	50	None	add
10	[BUG]  [BUGGY]  if(c[pos.getIndex()  ]  ==  END_FE)  {  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [BUGGY]  if(c[pos.getIndex()  ]  ==  END_FE)  {  [BUGGY]  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	184	184	1	replace	if(c[pos.getIndex()  ]  ==  END_FE)  {	if  (c[pos.getIndex()]  !=  END_FE)  {  	non-compiled	[CE]  ';'  expected	49	None	replace
11	[BUG]  [BUGGY]    ArrayList  <  String>  foundFormats  =  new  ArrayList  <  String>(foundDescriptions.size());  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [BUGGY]    ArrayList  <  String>  foundFormats  =  new  ArrayList  <  String>(foundDescriptions.size());  [BUGGY]  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	184	184	1	replace	    ArrayList  <  String>  foundFormats  =  new  ArrayList  <  String>(foundDescriptions.size());		non-compiled	[CE]  ';'  expected	50	None	add
12	[BUG]  [BUGGY]    char  c  =  pattern.charAt(pos);  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [BUGGY]    char  c  =  pattern.charAt(pos);  [BUGGY]  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	184	184	1	replace	    char  c  =  pattern.charAt(pos);		non-compiled	[CE]  ';'  expected	50	None	add
13	[BUG]  [BUGGY]    ArrayList  <  String>  foundFormats  =  new  ArrayList  <  String>();  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [BUGGY]    ArrayList  <  String>  foundFormats  =  new  ArrayList  <  String>();  [BUGGY]  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	184	184	1	replace	    ArrayList  <  String>  foundFormats  =  new  ArrayList  <  String>();		non-compiled	[CE]  ';'  expected	50	None	add
14	[BUG]  [BUGGY]    char  c  =  pattern.charAt(i);  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry  [CONTEXT]  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [BUGGY]    char  c  =  pattern.charAt(i);  [BUGGY]  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	184	184	1	replace	    char  c  =  pattern.charAt(i);		non-compiled	[CE]  ';'  expected	50	None	add
15	[BUG]  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry  [CONTEXT]  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [BUGGY]    ArrayList  foundFormats  =  new  ArrayList();  [BUGGY]  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	184	184	1	replace	    ArrayList  foundFormats  =  new  ArrayList();		non-compiled	[CE]  ';'  expected	50	None	add
16	[BUG]  [BUGGY]  if(c[pos.getIndex()  +  1]!=  END_FE)  {  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [BUGGY]  if(c[pos.getIndex()  +  1]!=  END_FE)  {  [BUGGY]  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	184	184	1	replace	if(c[pos.getIndex()  +  1]!=  END_FE)  {	if  (c[pos.getIndex()]  !=  END_FE)  {  	non-compiled	[CE]  ';'  expected	49	None	replace
17	[BUG]  [BUGGY]    char[]  c  =  pattern.toCharArray();  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [BUGGY]    char[]  c  =  pattern.toCharArray();  [BUGGY]  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	184	184	1	replace	    char[]  c  =  pattern.toCharArray();		non-compiled	[CE]  ';'  expected	50	None	add
18	[BUG]  [BUGGY]    char[]  c  =  pattern.toPattern();  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [BUGGY]    char[]  c  =  pattern.toPattern();  [BUGGY]  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	184	184	1	replace	    char[]  c  =  pattern.toPattern();		non-compiled	[CE]  ';'  expected	50	None	add
19	[BUG]  [BUGGY]    char[]  c  =  it.next();  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  [BUGGY]    char[]  c  =  it.next();  [BUGGY]  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  next(pos);  }  }  super.applyPattern(stripCustom.toString());  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	184	184	1	replace	    char[]  c  =  it.next();		non-compiled	[CE]  ';'  expected	50	None	add
