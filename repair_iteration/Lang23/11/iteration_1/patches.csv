bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  start  =  pos.getIndex()  +  1;  int  start  =  pos.getIndex()  +  1;  [CE]  variable  start  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  start  =  pos.getIndex()  +  1;  int  start  =  pos.getIndex()  +  1;  [BUGGY]    int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int    start    =    pos.getIndex()    +    1;    int  start  =  pos.getIndex()  +  1;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  applyPattern(String)	9	None	add
2	[BUG]  [BUGGY]  int  start  =  pos.getIndex()  +  1;  int  pos  =  pos.getIndex()  +  1;  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  start  =  pos.getIndex()  +  1;  int  pos  =  pos.getIndex()  +  1;  [BUGGY]    int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int    start    =    pos.getIndex()    +    1;    int  pos  =  pos.getIndex()  +  1;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	9	None	add
3	[BUG]  [BUGGY]  int  start  =  pos.getIndex()  +  1;  char[]  c  =  pattern.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  start  =  pos.getIndex()  +  1;  char[]  c  =  pattern.toCharArray();  [BUGGY]    int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int    start    =    pos.getIndex()    +    1;    char[]  c  =  pattern.toCharArray();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	9	None	add
4	[BUG]  [BUGGY]  int  start  =  pos.getIndex()  +  1;  Integer  pos  =  pos.getIndex()  +  1;  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  start  =  pos.getIndex()  +  1;  Integer  pos  =  pos.getIndex()  +  1;  [BUGGY]    int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int    start    =    pos.getIndex()    +    1;    Integer  pos  =  pos.getIndex()  +  1;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	9	None	add
5	[BUG]  [BUGGY]  int  start  =  pos.getIndex()  +  1;  Integer  start  =  pos.getIndex()  +  1;  [CE]  variable  start  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  start  =  pos.getIndex()  +  1;  Integer  start  =  pos.getIndex()  +  1;  [BUGGY]    int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int    start    =    pos.getIndex()    +    1;    Integer  start  =  pos.getIndex()  +  1;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  applyPattern(String)	9	None	add
6	[BUG]  [BUGGY]  int  start  =  c.getIndex();  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  start  =  c.getIndex();  [BUGGY]    int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  c.getIndex();	  int    start    =    pattern.getIndex();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
7	[BUG]  [BUGGY]  int  start  =  pattern.getIndex()  -  1;  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  start  =  pattern.getIndex()  -  1;  [BUGGY]    int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pattern.getIndex()  -  1;	  int    start    =    pattern.getIndex();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
8	[BUG]  [BUGGY]  int  start  =  this.pattern.getIndex();  [CE]  pattern  has  private  access  in  MessageFormat  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  start  =  this.pattern.getIndex();  [BUGGY]    int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  this.pattern.getIndex();	  int    start    =    pattern.getIndex();    	non-compiled	[CE]  pattern  has  private  access  in  MessageFormat	8	None	replace
9	[BUG]  [BUGGY]  char[]  c  =  it.toString();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  char[]  c  =  it.toString();  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char[]  c  =  it.toString();	      char[]    c    =    it.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	18	None	replace
10	[BUG]  [BUGGY]  char[]  c  =  it.toPattern();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  char[]  c  =  it.toPattern();  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char[]  c  =  it.toPattern();	      char[]    c    =    it.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	18	None	replace
11	[BUG]  [BUGGY]  int  start  =  c.getIndex()  -  1;  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  start  =  c.getIndex()  -  1;  [BUGGY]    int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  c.getIndex()  -  1;	  int    start    =    pos.getIndex()    -    1;    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
12	[BUG]  [BUGGY]  int  start  =  pattern.getStartIndex();  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  start  =  pattern.getStartIndex();  [BUGGY]    int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pattern.getStartIndex();	  int    start    =    pos.getStartIndex();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
13	[BUG]  [BUGGY]  int  start  =  c.getStartIndex();  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  start  =  c.getStartIndex();  [BUGGY]    int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  c.getStartIndex();	  int    start    =    pos.getStartIndex();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
14	[BUG]  [BUGGY]  int  start  =  pos.getStartIndex()  -  1;  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  start  =  pos.getStartIndex()  -  1;  [BUGGY]    int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pos.getStartIndex()  -  1;	  int    start    =    pos.getStartIndex();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
15	[BUG]  [BUGGY]      int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  [CE]  variable  i  is  already  defined  in  method  applyPattern(String)  [FE]    IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	        int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  applyPattern(String)	20	None	add
16	[BUG]  [BUGGY]      int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  Int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  Int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	        int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    Int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
17	[BUG]  [BUGGY]      int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  [CE]  variable  i  is  already  defined  in  method  applyPattern(String)  [FE]        IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	        int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  applyPattern(String)	20	None	add
18	[BUG]  [BUGGY]      int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(i);  [CE]  variable  i  is  already  defined  in  method  applyPattern(String)  [FE]          IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(i);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	        int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(i);	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  applyPattern(String)	20	None	add
19	[BUG]  [BUGGY]  int  start  =  pos.getIndex()  -  1;  int  start  =  pos.getIndex()  -  1;  [CE]  variable  start  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  start  =  pos.getIndex()  -  1;  int  start  =  pos.getIndex()  -  1;  [BUGGY]    int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int    start    =    pos.getIndex()    -    1;    int  start  =  pos.getIndex()  -  1;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  applyPattern(String)	11	None	add
20	[BUG]  [BUGGY]  int  start  =  pos.getIndex()  -  1;  int  pos  =  pos.getIndex()  -  1;  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  start  =  pos.getIndex()  -  1;  int  pos  =  pos.getIndex()  -  1;  [BUGGY]    int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int    start    =    pos.getIndex()    -    1;    int  pos  =  pos.getIndex()  -  1;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	11	None	add
21	[BUG]  [BUGGY]  int  start  =  pos.getIndex()  -  1;  int  fmtCount  =  pos.getIndex()  -  1;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  start  =  pos.getIndex()  -  1;  int  fmtCount  =  pos.getIndex()  -  1;  [BUGGY]    int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int    start    =    pos.getIndex()    -    1;    int  fmtCount  =  pos.getIndex()  -  1;	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	11	None	add
22	[BUG]  [BUGGY]  int  start  =  pos.getIndex()  -  1;  char[]  c  =  pattern.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  start  =  pos.getIndex()  -  1;  char[]  c  =  pattern.toCharArray();  [BUGGY]    int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int    start    =    pos.getIndex()    -    1;    char[]  c  =  pattern.toCharArray();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	11	None	add
23	[BUG]  [BUGGY]  int  start  =  pos.getIndex()  -  1;  Integer  pos  =  pos.getIndex()  -  1;  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  start  =  pos.getIndex()  -  1;  Integer  pos  =  pos.getIndex()  -  1;  [BUGGY]    int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int    start    =    pos.getIndex()    -    1;    Integer  pos  =  pos.getIndex()  -  1;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	11	None	add
24	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  index));  stripCustom.append(END_FE).append(fmtCount);  [CE]  cannot  find  symbol  index  [FE]    IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  index));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  index));  stripCustom.append(END_FE).append(fmtCount);	      pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  cannot  find  symbol  index	15	None	replace
25	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  [CE]  ')'  expected  [FE]      IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);	      pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  ')'  expected	15	None	replace
26	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  0));  stripCustom.append(END_FE).append(fmtCount);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  0));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  0));  stripCustom.append(END_FE).append(fmtCount);	      pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	15	None	replace
27	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  start));  stripCustom.append(END_FE).append(fmtCount);  [CE]  cannot  find  symbol  start  [FE]          IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  start));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  start));  stripCustom.append(END_FE).append(fmtCount);	      pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  cannot  find  symbol  start	15	None	replace
28	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(FIELD_QUOTE);  [CE]  cannot  find  symbol  FIELD_QUOTE  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(FIELD_QUOTE);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(FIELD_QUOTE);	      int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(FIELD_QUOTE);    	non-compiled	[CE]  cannot  find  symbol  FIELD_QUOTE	4	None	replace
29	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_QUOTE);  [CE]  possible  loss  of  precision  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_QUOTE);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_QUOTE);	      int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(FIELD_QUOTE);    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
30	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(FIELD_QUOTE);  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(FIELD_QUOTE);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(FIELD_QUOTE);	      int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(FIELD_QUOTE);    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	4	None	replace
31	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(FIELD_QUOTE);  [CE]  cannot  find  symbol  start  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  i  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(FIELD_QUOTE);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(FIELD_QUOTE);	      int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(FIELD_QUOTE);    	non-compiled	[CE]  cannot  find  symbol  start	4	None	replace
32	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);  [CE]  possible  loss  of  precision  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);	      int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
33	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);  [CE]  cannot  find  symbol  FIELD_QUOTE  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);	      int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);    	non-compiled	[CE]  cannot  find  symbol  FIELD_QUOTE	3	None	replace
34	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(FIELD_QUOTE).append(END_FE);  [CE]  possible  loss  of  precision  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(FIELD_QUOTE).append(END_FE);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(FIELD_QUOTE).append(END_FE);	      int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
35	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  [CE]  possible  loss  of  precision  [FE]    IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);	      int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  possible  loss  of  precision	6	None	replace
36	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(i);  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]      IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(i);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(i);	      int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	6	None	replace
37	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);  [CE]  possible  loss  of  precision  [FE]        IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);	      int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  possible  loss  of  precision	6	None	replace
38	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  pos));  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	add	        pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,  pos));	  	compilable	  [FE]  IllegalArgumentException  	16	5	add
39	[BUG]  [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  pos));  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  pos));  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	        pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,  pos));	  	compilable	  [FE]  IllegalArgumentException  	16	5	add
40	[BUG]  [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  int  pos.setIndex(readArgumentIndex(pattern,  pos));  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  int  pos.setIndex(readArgumentIndex(pattern,  pos));  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	        pos.setIndex(readArgumentIndex(pattern,    pos));    int  pos.setIndex(readArgumentIndex(pattern,  pos));	  	non-compiled	[CE]  ';'  expected	16	None	add
41	[BUG]  [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  p));  [CE]  cannot  find  symbol  p  [FE]        IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  p));  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	        pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,  p));	  	non-compiled	[CE]  cannot  find  symbol  p	16	None	add
42	[BUG]  [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  pos));  break;  [CE]  unreachable  statement  [FE]          IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  pos));  break;  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	        pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,  pos));  break;	  	non-compiled	[CE]  unreachable  statement	16	None	add
43	[BUG]  [BUGGY]  char[]  c  =  toPattern.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  char[]  c  =  toPattern.toCharArray();  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char[]  c  =  toPattern.toCharArray();	      char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	19	None	replace
44	[BUG]  [BUGGY]  char[]  c  =  pattern.toPattern();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  char[]  c  =  pattern.toPattern();  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char[]  c  =  pattern.toPattern();	      char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	19	None	replace
45	[BUG]  [BUGGY]  char[]  c  =  pattern.toString();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  char[]  c  =  pattern.toString();  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char[]  c  =  pattern.toString();	      char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	19	None	replace
46	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  [CE]  possible  loss  of  precision  [FE]    IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);	      int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  possible  loss  of  precision	21	None	replace
47	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(i);  [CE]  cannot  find  symbol  start  [FE]      IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(i);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(i);	      int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  cannot  find  symbol  start	21	None	replace
48	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(i);  [CE]  cannot  find  symbol  index  [FE]        IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  i  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(i);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(i);	      int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  cannot  find  symbol  index	21	None	replace
49	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  [CE]  cannot  find  symbol  start  [FE]          IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);	      int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  cannot  find  symbol  start	21	None	replace
50	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	add	        pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);	  	compilable	  [FE]  IllegalArgumentException  	14	5	add
51	[BUG]  [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	        pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);	  	compilable	  [FE]  IllegalArgumentException  	14	5	add
52	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	add	        pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);	  	compilable	  [FE]  IllegalArgumentException  	14	5	add
53	[BUG]  [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	        pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);	  	compilable	  [FE]  IllegalArgumentException  	14	5	add
54	[BUG]  [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  int  pos  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]        IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  int  pos  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	        pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    int  pos  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	14	None	add
55	[BUG]  [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  int  index  =  readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  int  index  =  readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	        pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    int  index  =  readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);	  	non-compiled	[CE]  ';'  expected	14	None	add
56	[BUG]  [BUGGY]      int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  [CE]  variable  i  is  already  defined  in  method  applyPattern(String)  [FE]    IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	        int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  applyPattern(String)	5	None	add
57	[BUG]  [BUGGY]      int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  Int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  Int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	        int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    Int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
58	[BUG]  [BUGGY]      int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  [CE]  variable  i  is  already  defined  in  method  applyPattern(String)  [FE]        IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	        int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  applyPattern(String)	5	None	add
59	[BUG]  [BUGGY]      int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  int  i  =  readArgumentIndex(pattern,  pos);  StripCustom.append(END_FE).append(i);  [CE]  variable  i  is  already  defined  in  method  applyPattern(String)  [FE]          IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  int  i  =  readArgumentIndex(pattern,  pos);  StripCustom.append(END_FE).append(i);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	        int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    int  i  =  readArgumentIndex(pattern,  pos);  StripCustom.append(END_FE).append(i);	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  applyPattern(String)	5	None	add
60	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  index));  [CE]  cannot  find  symbol  index  [FE]    IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  index));  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  index));	      pos.setIndex(readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  cannot  find  symbol  index	17	None	replace
61	[BUG]  [BUGGY]  pos.setIndex(readStringIndex(pattern,  pos));  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  pos.setIndex(readStringIndex(pattern,  pos));  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readStringIndex(pattern,  pos));	      pos.setIndex(readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
62	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  next(pos));  [CE]  ')'  expected  [FE]        IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  next(pos));  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  next(pos));	      pos.setIndex(readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  ')'  expected	17	None	replace
63	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  0));  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  0));  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  0));	      pos.setIndex(readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	17	None	replace
64	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(c,  pos);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]    IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  i  =  readArgumentIndex(c,  pos);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(c,  pos);	      int    i    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	2	None	replace
65	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  [CE]  cannot  find  symbol  start  [FE]      IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(pos));	      int    i    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  cannot  find  symbol  start	2	None	replace
66	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  pos);  [CE]  possible  loss  of  precision  [FE]        IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  char  i  =  readArgumentIndex(pattern,  pos);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  pos);	      int    i    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
67	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(p,  pos);  [CE]  cannot  find  symbol  p  [FE]          IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  i  =  readArgumentIndex(p,  pos);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(p,  pos);	      int    i    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  cannot  find  symbol  p	2	None	replace
68	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(FIELD_PATTERN);  [CE]  cannot  find  symbol  FIELD_PATTERN  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(FIELD_PATTERN);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(FIELD_PATTERN);	      int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(FIELD_PATTERN);    	non-compiled	[CE]  cannot  find  symbol  FIELD_PATTERN	7	None	replace
69	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_PATTERN);  [CE]  possible  loss  of  precision  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_PATTERN);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_PATTERN);	      int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(FIELD_PATTERN);    	non-compiled	[CE]  possible  loss  of  precision	7	None	replace
70	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(FIELD_PATTERN);  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(FIELD_PATTERN);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(FIELD_PATTERN);	      int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(FIELD_PATTERN);    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	7	None	replace
71	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(FIELD_PATTERN);  [CE]  cannot  find  symbol  start  [FE]                      junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  i  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(FIELD_PATTERN);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(FIELD_PATTERN);	      int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(FIELD_PATTERN);    	non-compiled	[CE]  cannot  find  symbol  start	7	None	replace
72	[BUG]  [BUGGY]      int  i  =  readArgumentIndex(pattern,  pos);  int  i  =  readArgumentIndex(pattern,  pos);  [CE]  variable  i  is  already  defined  in  method  applyPattern(String)  [FE]    IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      int  i  =  readArgumentIndex(pattern,  pos);  int  i  =  readArgumentIndex(pattern,  pos);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	        int    i    =    readArgumentIndex(pattern,    pos);    int  i  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  applyPattern(String)	1	None	add
73	[BUG]  [BUGGY]      int  i  =  readArgumentIndex(pattern,  pos);  Int  i  =  readArgumentIndex(pattern,  pos);  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      int  i  =  readArgumentIndex(pattern,  pos);  Int  i  =  readArgumentIndex(pattern,  pos);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	        int    i    =    readArgumentIndex(pattern,    pos);    Int  i  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
74	[BUG]  [BUGGY]      int  i  =  readArgumentIndex(pattern,  pos);  char  i  =  readArgumentIndex(pattern,  pos);  [CE]  variable  i  is  already  defined  in  method  applyPattern(String)  [FE]        IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      int  i  =  readArgumentIndex(pattern,  pos);  char  i  =  readArgumentIndex(pattern,  pos);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	        int    i    =    readArgumentIndex(pattern,    pos);    char  i  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  applyPattern(String)	1	None	add
75	[BUG]  [BUGGY]      int  i  =  readArgumentIndex(pattern,  pos);  int  i  =  readArgumentIndex(pattern,  pos));  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      int  i  =  readArgumentIndex(pattern,  pos);  int  i  =  readArgumentIndex(pattern,  pos));  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	        int    i    =    readArgumentIndex(pattern,    pos);    int  i  =  readArgumentIndex(pattern,  pos));	  	non-compiled	[CE]  ';'  expected	1	None	add
76	[BUG]  [BUGGY]  int  start  =  pattern.getIndex()  +  1;  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  start  =  pattern.getIndex()  +  1;  [BUGGY]    int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pattern.getIndex()  +  1;	  int    start    =    pos.getIndex()    +    1;    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
77	[BUG]  [BUGGY]  int  start  =  c.getIndex()  +  1;  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  start  =  c.getIndex()  +  1;  [BUGGY]    int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  c.getIndex()  +  1;	  int    start    =    pos.getIndex()    +    1;    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
78	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]    IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0));  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(0));	      int    i    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	2	None	replace
79	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  i));  stripCustom.append(END_FE).append(fmtCount);  [CE]  cannot  find  symbol  i  [FE]    IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  i));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  i));  stripCustom.append(END_FE).append(fmtCount);	      pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  cannot  find  symbol  i	15	None	replace
80	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  -1));  stripCustom.append(END_FE).append(fmtCount);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]      IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  -1));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  -1));  stripCustom.append(END_FE).append(fmtCount);	      pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	15	None	replace
81	[BUG]  [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.setIndex(readArgumentIndex(pattern,  pos));  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.setIndex(readArgumentIndex(pattern,  pos));  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	        pos.setIndex(readArgumentIndex(pattern,    pos));    int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.setIndex(readArgumentIndex(pattern,  pos));	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
82	[BUG]  [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(index);  [CE]  variable  index  is  already  defined  in  method  applyPattern(String)  [FE]      IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(index);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	        pos.setIndex(readArgumentIndex(pattern,    pos));    int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(index);	  	non-compiled	[CE]  variable  index  is  already  defined  in  method  applyPattern(String)	16	None	add
83	[BUG]  [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.setIndex(readArgumentIndex(pattern,  pos);  [CE]  ')'  expected  [FE]        IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.setIndex(readArgumentIndex(pattern,  pos);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	        pos.setIndex(readArgumentIndex(pattern,    pos));    int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.setIndex(readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  ')'  expected	16	None	add
84	[BUG]  [BUGGY]  int  start  =  fmtCount.getStartIndex();  [CE]  int  cannot  be  dereferenced  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  start  =  fmtCount.getStartIndex();  [BUGGY]    int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  fmtCount.getStartIndex();	  int    start    =    pos.getStartIndex();    	non-compiled	[CE]  int  cannot  be  dereferenced	13	None	replace
85	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  }  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  if(c.length()  ==  0)  {  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(c.length()  ==  0)  {  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  }	      int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
86	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(i);  [CE]  cannot  find  symbol  start  [FE]      IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(i);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(i);	      int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  cannot  find  symbol  start	21	None	replace
87	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  [CE]  cannot  find  symbol  index  [FE]        IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);	      int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  cannot  find  symbol  index	21	None	replace
88	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_QUOTE);  }  [CE]  cannot  find  symbol  FIELD_QUOTE  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  if(stripCustom!=  null)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_QUOTE);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(stripCustom!=  null)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_QUOTE);  }	      int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(FIELD_QUOTE);    	non-compiled	[CE]  cannot  find  symbol  FIELD_QUOTE	4	None	replace
89	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_FMT);  [CE]  cannot  find  symbol  FIELD_FMT  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_FMT);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_FMT);	      int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(FIELD_QUOTE);    	non-compiled	[CE]  cannot  find  symbol  FIELD_FMT	4	None	replace
90	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  }  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  if(c.length()  ==  0)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(c.length()  ==  0)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  }	      int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
91	[BUG]  [BUGGY]  int  start  =  pos.getIndex()  +  1;  char[]  c  =  it.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  start  =  pos.getIndex()  +  1;  char[]  c  =  it.toCharArray();  [BUGGY]    int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int    start    =    pos.getIndex()    +    1;    char[]  c  =  it.toCharArray();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	9	None	add
92	[BUG]  [BUGGY]      int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  int  i  =  readArgumentIndex(pattern,  next(pos));  StripCustom.append(END_FE).append(i);  [CE]  variable  i  is  already  defined  in  method  applyPattern(String)  [FE]    IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  int  i  =  readArgumentIndex(pattern,  next(pos));  StripCustom.append(END_FE).append(i);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	        int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    int  i  =  readArgumentIndex(pattern,  next(pos));  StripCustom.append(END_FE).append(i);	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  applyPattern(String)	20	None	add
93	[BUG]  [BUGGY]  char[]  c  =  this.pattern.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  char[]  c  =  this.pattern.toCharArray();  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char[]  c  =  this.pattern.toCharArray();	      char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	19	None	replace
94	[BUG]  [BUGGY]  int  start  =  pos.getIndex()  -  1;  char[]  c  =  it.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  start  =  pos.getIndex()  -  1;  char[]  c  =  it.toCharArray();  [BUGGY]    int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int    start    =    pos.getIndex()    -    1;    char[]  c  =  it.toCharArray();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	11	None	add
95	[BUG]  [BUGGY]  int  start  =  pos.getIndex()  -  1;  Integer  start  =  pos.getIndex()  -  1;  [CE]  variable  start  is  already  defined  in  method  applyPattern(String)  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  start  =  pos.getIndex()  -  1;  Integer  start  =  pos.getIndex()  -  1;  [BUGGY]    int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int    start    =    pos.getIndex()    -    1;    Integer  start  =  pos.getIndex()  -  1;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  applyPattern(String)	11	None	add
96	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount));  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]    IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount));  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  fmtCount));	      pos.setIndex(readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	17	None	replace
97	[BUG]  [BUGGY]  int  start  =  fmtCount.getIndex();  [CE]  int  cannot  be  dereferenced  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  start  =  fmtCount.getIndex();  [BUGGY]    int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  fmtCount.getIndex();	  int    start    =    pattern.getIndex();    	non-compiled	[CE]  int  cannot  be  dereferenced	8	None	replace
98	[BUG]  [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);  [CE]  variable  index  is  already  defined  in  method  applyPattern(String)  [FE]    IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	        pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);	  	non-compiled	[CE]  variable  index  is  already  defined  in  method  applyPattern(String)	14	None	add
99	[BUG]  [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  StripCustom.append(END_FE).append(fmtCount);  [CE]  cannot  find  symbol  StripCustom  [FE]      IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  StripCustom.append(END_FE).append(fmtCount);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	        pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  StripCustom.append(END_FE).append(fmtCount);	  	non-compiled	[CE]  cannot  find  symbol  StripCustom	14	None	add
100	[BUG]  [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(FIN_FE).append(fmtCount);  [CE]  cannot  find  symbol  FIN_FE  [FE]        IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(FIN_FE).append(fmtCount);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	        pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(FIN_FE).append(fmtCount);	  	non-compiled	[CE]  cannot  find  symbol  FIN_FE	14	None	add
101	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(FIELD_FE).append(FIELD_QUOTE);  [CE]  cannot  find  symbol  FIELD_QUOTE  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(FIELD_FE).append(FIELD_QUOTE);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(FIELD_FE).append(FIELD_QUOTE);	      int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);    	non-compiled	[CE]  cannot  find  symbol  FIELD_QUOTE	3	None	replace
102	[BUG]  [BUGGY]  int  start  =  pos.getIndex()  +  1;  char[]  c  =  pattern.toCharArray();  int  start  =  pos.getIndex()  +  1;  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  start  =  pos.getIndex()  +  1;  char[]  c  =  pattern.toCharArray();  int  start  =  pos.getIndex()  +  1;  [BUGGY]    int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int    start    =    pos.getIndex()    +    1;    char[]  c  =  pattern.toCharArray();  int  start  =  pos.getIndex()  +  1;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	9	None	add
103	[BUG]  [BUGGY]  int  start  =  pos.getIndex()  +  1;  char[]  c  =  pattern.toCharArray();  start  =  pos.getIndex()  +  1;  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  start  =  pos.getIndex()  +  1;  char[]  c  =  pattern.toCharArray();  start  =  pos.getIndex()  +  1;  [BUGGY]    int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int    start    =    pos.getIndex()    +    1;    char[]  c  =  pattern.toCharArray();  start  =  pos.getIndex()  +  1;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	9	None	add
104	[BUG]  [BUGGY]  int  i  =  getArgumentIndex(pattern,  pos);  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  i  =  getArgumentIndex(pattern,  pos);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  getArgumentIndex(pattern,  pos);	      int    i    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
105	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(FIELD_FMT);  [CE]  cannot  find  symbol  FIELD_FMT  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(FIELD_FMT);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(FIELD_FMT);	      int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(FIELD_PATTERN);    	non-compiled	[CE]  cannot  find  symbol  FIELD_FMT	7	None	replace
106	[BUG]  [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(FINAL_FE).append(fmtCount);  [CE]  cannot  find  symbol  FINAL_FE  [FE]    IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(FINAL_FE).append(fmtCount);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	        pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(FINAL_FE).append(fmtCount);	  	non-compiled	[CE]  cannot  find  symbol  FINAL_FE	14	None	add
107	[BUG]  [BUGGY]  if(c.length()  >  0)  {  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  }  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  if(c.length()  >  0)  {  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(c.length()  >  0)  {  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  }	      int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
108	[BUG]  [BUGGY]  int  start  =  pos.getIndex()  -  1;  char[]  c  =  pattern.toCharArray();  int  start  =  pos.getIndex()  -  1;  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  start  =  pos.getIndex()  -  1;  char[]  c  =  pattern.toCharArray();  int  start  =  pos.getIndex()  -  1;  [BUGGY]    int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int    start    =    pos.getIndex()    -    1;    char[]  c  =  pattern.toCharArray();  int  start  =  pos.getIndex()  -  1;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	11	None	add
109	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount));  stripCustom.append(END_FE).append(fmtCount);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]    IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  fmtCount));  stripCustom.append(END_FE).append(fmtCount);	      pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	15	None	replace
110	[BUG]  [BUGGY]      int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  int  i  =  readArgumentIndex(pattern,  first(pos));  stripCustom.append(END_FE).append(i);  [CE]  variable  i  is  already  defined  in  method  applyPattern(String)  [FE]    IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  int  i  =  readArgumentIndex(pattern,  first(pos));  stripCustom.append(END_FE).append(i);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	        int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    int  i  =  readArgumentIndex(pattern,  first(pos));  stripCustom.append(END_FE).append(i);	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  applyPattern(String)	20	None	add
111	[BUG]  [BUGGY]  char[]  c  =  iterator.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  char[]  c  =  iterator.toCharArray();  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char[]  c  =  iterator.toCharArray();	      char[]    c    =    it.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	18	None	replace
112	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);	      int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	3	None	replace
113	[BUG]  [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.append(START_FE).append(index);  [CE]  variable  index  is  already  defined  in  method  applyPattern(String)  [FE]    IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.append(START_FE).append(index);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	        pos.setIndex(readArgumentIndex(pattern,    pos));    int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.append(START_FE).append(index);	  	non-compiled	[CE]  variable  index  is  already  defined  in  method  applyPattern(String)	16	None	add
114	[BUG]  [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  int  pos  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(c);  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]      IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]      pos.setIndex(readArgumentIndex(pattern,  pos));  int  pos  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(c);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	        pos.setIndex(readArgumentIndex(pattern,    pos));    int  pos  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(c);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	16	None	add
115	[BUG]  [BUGGY]  int  start  =  pos.getStartIndex()  +  1;  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  int  start  =  pos.getStartIndex()  +  1;  [BUGGY]    int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pos.getStartIndex()  +  1;	  int    start    =    pos.getStartIndex();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
116	[BUG]  [BUGGY]  if(c.length()  >  0)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  }  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  if(c.length()  >  0)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(c.length()  >  0)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  }	      int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
117	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  }  [CE]  cannot  find  symbol  start  [FE]      IllegalArgumentException    [CONTEXT]    char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);    [BUGGY]  if(stripCustom!=  null)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(stripCustom!=  null)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  }	      int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  cannot  find  symbol  start	6	None	replace
