bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  start,  fmtCount));  stripCustom.append(END_FE).append(fmtCount);  [CE]  cannot  find  symbol  start  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  start,  fmtCount));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  start,  fmtCount));  stripCustom.append(END_FE).append(fmtCount);	  pos.setIndex(readArgumentIndex(pattern,    fmtCount));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  cannot  find  symbol  start	109	None	replace
2	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  index),  stripCustom.append(END_FE).append(fmtCount);  [CE]  ')'  expected  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  index),  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  index),  stripCustom.append(END_FE).append(fmtCount);	  pos.setIndex(readArgumentIndex(pattern,    fmtCount));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  ')'  expected	109	None	replace
3	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount,  0));  stripCustom.append(END_FE).append(fmtCount);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount,  0));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  fmtCount,  0));  stripCustom.append(END_FE).append(fmtCount);	  pos.setIndex(readArgumentIndex(pattern,    fmtCount));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	109	None	replace
4	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);	          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    int    index    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	98	None	replace
5	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	add	                pos.setIndex(readArgumentIndex(pattern,        pos));        stripCustom.append(END_FE).append(fmtCount);        pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(START_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);	  	compilable	  [FE]  IllegalArgumentException  	52	5	add
6	[BUG]  [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	                pos.setIndex(readArgumentIndex(pattern,        pos));        stripCustom.append(END_FE).append(fmtCount);        pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(START_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);	  	compilable	  [FE]  IllegalArgumentException  	52	5	add
7	[BUG]  [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);  [CE]  variable  index  is  already  defined  in  method  applyPattern(String)  [FE]      IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	                pos.setIndex(readArgumentIndex(pattern,        pos));        stripCustom.append(END_FE).append(fmtCount);        pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(START_FE).append(fmtCount);    int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);	  	non-compiled	[CE]  variable  index  is  already  defined  in  method  applyPattern(String)	52	None	add
8	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	add	                pos.setIndex(readArgumentIndex(pattern,        pos));        stripCustom.append(END_FE).append(fmtCount);        pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(START_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);	  	compilable	  [FE]  IllegalArgumentException  	52	5	add
9	[BUG]  [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	                pos.setIndex(readArgumentIndex(pattern,        pos));        stripCustom.append(END_FE).append(fmtCount);        pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(START_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);	  	compilable	  [FE]  IllegalArgumentException  	52	5	add
10	[BUG]  [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);  int  pos  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]          IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);  int  pos  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	                pos.setIndex(readArgumentIndex(pattern,        pos));        stripCustom.append(END_FE).append(fmtCount);        pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(START_FE).append(fmtCount);    int  pos  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	52	None	add
11	[BUG]  [BUGGY]  pos.setIndex(index);  stripCustom.append(END_FE).append(fmtCount);  [CE]  cannot  find  symbol  index  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(index);  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(index);  stripCustom.append(END_FE).append(fmtCount);	          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    int    index    =    readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  cannot  find  symbol  index	55	None	replace
12	[BUG]  [BUGGY]  pos.setIndex(readCount);  stripCustom.append(END_FE).append(fmtCount);  [CE]  cannot  find  symbol  readCount  [FE]                IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readCount);  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readCount);  stripCustom.append(END_FE).append(fmtCount);	          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    int    index    =    readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  cannot  find  symbol  readCount	55	None	replace
13	[BUG]  [BUGGY]  int  start  =  c.getStartIndex()  -  1;  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  c.getStartIndex()  -  1;  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  c.getStartIndex()  -  1;	  int    start    =    c.getIndex()    -    1;    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
14	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(FIELD_QUOTE);  [CE]  possible  loss  of  precision  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(FIELD_QUOTE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(FIELD_QUOTE);	  int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(FIELD_QUOTE);    	non-compiled	[CE]  possible  loss  of  precision	28	None	replace
15	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(FIELD_QUOTE);  [CE]  cannot  find  symbol  FIELD_QUOTE  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(FIELD_QUOTE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(FIELD_QUOTE);	  int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(FIELD_QUOTE);    	non-compiled	[CE]  cannot  find  symbol  FIELD_QUOTE	28	None	replace
16	[BUG]  [BUGGY]  pos  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(c);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(c);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(c);	          pos.setIndex(readArgumentIndex(pattern,    pos));    int    pos    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(c);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	114	None	replace
17	[BUG]  [BUGGY]  int  pos  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(c);  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  pos  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(c);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  pos  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(c);	          pos.setIndex(readArgumentIndex(pattern,    pos));    int    pos    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(c);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	114	None	replace
18	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount));  int  pos  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(c);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount));  int  pos  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(c);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  fmtCount));  int  pos  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(c);	          pos.setIndex(readArgumentIndex(pattern,    pos));    int    pos    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(c);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	114	None	replace
19	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount));  stripCustom.append(END_FE).append(c);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount));  stripCustom.append(END_FE).append(c);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  fmtCount));  stripCustom.append(END_FE).append(c);	          pos.setIndex(readArgumentIndex(pattern,    pos));    int    pos    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(c);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	114	None	replace
20	[BUG]  [BUGGY]  int  pos  =  readArgumentIndex(pattern,  pos);  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  pos  =  readArgumentIndex(pattern,  pos);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  pos  =  readArgumentIndex(pattern,  pos);	          pos.setIndex(readArgumentIndex(pattern,    pos));    int    pos.setIndex(readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	40	None	replace
21	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  Integer  start  =  pos.getIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	add	Integer  start  =  pos.getIndex();	  int    start    =    pos.getIndex()    +    1;    Integer    start    =    pos.getIndex()    +    1;    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	5	1	replace
22	[BUG]  [BUGGY]  Integer  start  =  pos.getIndex();  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  Integer  start  =  pos.getIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	Integer  start  =  pos.getIndex();	  int    start    =    pos.getIndex()    +    1;    Integer    start    =    pos.getIndex()    +    1;    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	5	1	replace
23	[BUG]  [BUGGY]  int  start  =  pos.getIndex();  Integer  start  =  pos.getIndex();  [CE]  variable  start  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  pos.getIndex();  Integer  start  =  pos.getIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pos.getIndex();  Integer  start  =  pos.getIndex();	  int    start    =    pos.getIndex()    +    1;    Integer    start    =    pos.getIndex()    +    1;    	non-compiled	[CE]  variable  start  is  already  defined  in  method  applyPattern(String)	5	None	replace
24	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  Integer  start  =  pos.getIndex()  +  1;  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	add	Integer  start  =  pos.getIndex()  +  1;	  int    start    =    pos.getIndex()    +    1;    Integer    start    =    pos.getIndex()    +    1;    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	5	1	replace
25	[BUG]  [BUGGY]  Integer  start  =  pos.getIndex()  +  1;  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  Integer  start  =  pos.getIndex()  +  1;  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	Integer  start  =  pos.getIndex()  +  1;	  int    start    =    pos.getIndex()    +    1;    Integer    start    =    pos.getIndex()    +    1;    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	5	1	replace
26	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  }  [CE]  cannot  find  symbol  start  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(fmtCount  >  0)  {  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(fmtCount  >  0)  {  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  }	          int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  cannot  find  symbol  start	15	None	replace
27	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(i);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(i);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(i);	  int    i    =    readArgumentIndex(pattern,    index);    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	48	None	replace
28	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(i);  [CE]  cannot  find  symbol  start  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(i);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(i);	  int    i    =    readArgumentIndex(pattern,    index);    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  cannot  find  symbol  start	48	None	replace
29	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(c,  pos);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(c,  pos);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(c,  pos);	  int    i    =    readArgumentIndex(c,    pos);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	64	None	replace
30	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(c,  pos,  stripCustom);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(c,  pos,  stripCustom);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(c,  pos,  stripCustom);	  int    i    =    readArgumentIndex(c,    pos);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	64	None	replace
31	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(c,  start,  pos);  [CE]  cannot  find  symbol  start  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(c,  start,  pos);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(c,  start,  pos);	  int    i    =    readArgumentIndex(c,    pos);    	non-compiled	[CE]  cannot  find  symbol  start	64	None	replace
32	[BUG]  [BUGGY]  Integer  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  [CE]  cannot  find  symbol  start  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  Integer  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	Integer  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);	          int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    Int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  cannot  find  symbol  start	57	None	replace
33	[BUG]  [BUGGY]  char[]  c  =  toPattern.toString();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  toPattern.toString();  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char[]  c  =  toPattern.toString();	  char[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	43	None	replace
34	[BUG]  [BUGGY]  char[]  c  =  toPattern.toCharArray(fmtCount);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  toPattern.toCharArray(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char[]  c  =  toPattern.toCharArray(fmtCount);	  char[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	43	None	replace
35	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  start));  [CE]  cannot  find  symbol  start  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  start));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  start));	          pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,    p));    	non-compiled	[CE]  cannot  find  symbol  start	41	None	replace
36	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  }  [CE]  cannot  find  symbol  start  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(fmtCount  >  0)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(fmtCount  >  0)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  }	          int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    int    i    =    readArgumentIndex(pattern,    pos);    StripCustom.append(END_FE).append(i);    	non-compiled	[CE]  cannot  find  symbol  start	59	None	replace
37	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  fmtCount);  StripCustom.append(END_FE).append(i);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  fmtCount);  StripCustom.append(END_FE).append(i);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  fmtCount);  StripCustom.append(END_FE).append(i);	          int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    int    i    =    readArgumentIndex(pattern,    pos);    StripCustom.append(END_FE).append(i);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	59	None	replace
38	[BUG]  [BUGGY]  pos.setIndex(readValueIndex(pattern,  0));  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readValueIndex(pattern,  0));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readValueIndex(pattern,  0));	          pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
39	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);	  int    i    =    readArgumentIndex(pattern,    next(0));    stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	112	None	replace
40	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(FIELD_QUOTE).append(END_FE);  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(FIELD_QUOTE).append(END_FE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(FIELD_QUOTE).append(END_FE);	  int    i    =    readArgumentIndex(pattern,    next(0));    stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	112	None	replace
41	[BUG]  [BUGGY]  Int  i  =  readArgumentIndex(pattern,  pos);  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  Int  i  =  readArgumentIndex(pattern,  pos);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	Int  i  =  readArgumentIndex(pattern,  pos);	          int    i    =    readArgumentIndex(pattern,    pos);    Int    i    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
42	[BUG]  [BUGGY]  Int  i  =  readArgumentIndex(pattern,  fmtCount);  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  Int  i  =  readArgumentIndex(pattern,  fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	Int  i  =  readArgumentIndex(pattern,  fmtCount);	          int    i    =    readArgumentIndex(pattern,    pos);    Int    i    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
43	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  fmtCount);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  fmtCount);	          int    i    =    readArgumentIndex(pattern,    pos);    Int    i    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	73	None	replace
44	[BUG]  [BUGGY]  char[]  c  =  iterator.toString();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  iterator.toString();  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char[]  c  =  iterator.toString();	  char[]    c    =    iterator.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	111	None	replace
45	[BUG]  [BUGGY]  char[]  c  =  iterator.toCharArray(fmtCount);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  iterator.toCharArray(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char[]  c  =  iterator.toCharArray(fmtCount);	  char[]    c    =    iterator.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	111	None	replace
46	[BUG]  [BUGGY]  int  start  =  pattern.getIndex();  char[]  c  =  pattern.toCharArray();  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  pattern.getIndex();  char[]  c  =  pattern.toCharArray();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pattern.getIndex();  char[]  c  =  pattern.toCharArray();	  int    start    =    pos.getIndex()    +    1;    char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
47	[BUG]  [BUGGY]  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();	  int    start    =    pos.getIndex()    +    1;    char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	3	None	replace
48	[BUG]  [BUGGY]  Integer  start  =  pattern.getIndex();  char[]  c  =  pattern.toCharArray();  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  Integer  start  =  pattern.getIndex();  char[]  c  =  pattern.toCharArray();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	Integer  start  =  pattern.getIndex();  char[]  c  =  pattern.toCharArray();	  int    start    =    pos.getIndex()    +    1;    char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
49	[BUG]  [BUGGY]  int  start  =  pos.getIndex();  int  pos  =  pos.getIndex();  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  pos.getIndex();  int  pos  =  pos.getIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pos.getIndex();  int  pos  =  pos.getIndex();	  int    start    =    pos.getIndex()    +    1;    int    pos    =    pos.getIndex()    +    1;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	2	None	replace
50	[BUG]  [BUGGY]  int  pos  =  pos.getIndex();  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  pos  =  pos.getIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  pos  =  pos.getIndex();	  int    start    =    pos.getIndex()    +    1;    int    pos    =    pos.getIndex()    +    1;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	2	None	replace
51	[BUG]  [BUGGY]  int  start  =  pattern.getIndex();  int  pos  =  pattern.getIndex();  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  pattern.getIndex();  int  pos  =  pattern.getIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pattern.getIndex();  int  pos  =  pattern.getIndex();	  int    start    =    pos.getIndex()    +    1;    int    pos    =    pos.getIndex()    +    1;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
52	[BUG]  [BUGGY]  int  start  =  pattern.getIndex();  int  pos  =  pattern.getIndex()  +  1;  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  pattern.getIndex();  int  pos  =  pattern.getIndex()  +  1;  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pattern.getIndex();  int  pos  =  pattern.getIndex()  +  1;	  int    start    =    pos.getIndex()    +    1;    int    pos    =    pos.getIndex()    +    1;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
53	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  0));  pos.setIndex(readArgumentIndex(pattern,  0));  break;  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  0));  pos.setIndex(readArgumentIndex(pattern,  0));  break;  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  0));  pos.setIndex(readArgumentIndex(pattern,  0));  break;	          pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,    pos));    break;    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	42	None	replace
54	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount));  pos.setIndex(readArgumentIndex(pattern,  pos));  break;  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount));  pos.setIndex(readArgumentIndex(pattern,  pos));  break;  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  fmtCount));  pos.setIndex(readArgumentIndex(pattern,  pos));  break;	          pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,    pos));    break;    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	42	None	replace
55	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount));  break;  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount));  break;  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  fmtCount));  break;	          pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,    pos));    break;    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	42	None	replace
56	[BUG]  [BUGGY]  int  start  =  pattern.getStartIndex()  +  1;  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  pattern.getStartIndex()  +  1;  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pattern.getStartIndex()  +  1;	  int    start    =    pos.getStartIndex()    +    1;    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
57	[BUG]  [BUGGY]  int  start  =  c.getStartIndex()  +  1;  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  c.getStartIndex()  +  1;  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  c.getStartIndex()  +  1;	  int    start    =    pos.getStartIndex()    +    1;    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
58	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(FIELD_QUOTE);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(FIELD_QUOTE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(FIELD_QUOTE);	  int    i    =    readArgumentIndex(pattern,    start);    stripCustom.append(END_FE).append(FIELD_QUOTE);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	31	None	replace
59	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(FIELD_QUOTE);  [CE]  cannot  find  symbol  index  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(FIELD_QUOTE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(FIELD_QUOTE);	  int    i    =    readArgumentIndex(pattern,    start);    stripCustom.append(END_FE).append(FIELD_QUOTE);    	non-compiled	[CE]  cannot  find  symbol  index	31	None	replace
60	[BUG]  [BUGGY]  int  start  =  this.pattern.getIndex()  -  1;  [CE]  pattern  has  private  access  in  MessageFormat  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  this.pattern.getIndex()  -  1;  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  this.pattern.getIndex()  -  1;	  int    start    =    this.pattern.getIndex();    	non-compiled	[CE]  pattern  has  private  access  in  MessageFormat	8	None	replace
61	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  pos));  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  pos));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  pos));	          int    i    =    readArgumentIndex(pattern,    pos);    int    i    =    readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  ';'  expected	75	None	replace
62	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  index));  [CE]  ';'  expected  [FE]                IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  index));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  index));	          int    i    =    readArgumentIndex(pattern,    pos);    int    i    =    readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  ';'  expected	75	None	replace
63	[BUG]  [BUGGY]  Integer  i  =  readArgumentIndex(pattern,  pos);  [CE]  cannot  find  symbol  start  [FE]                  IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  Integer  i  =  readArgumentIndex(pattern,  pos);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	Integer  i  =  readArgumentIndex(pattern,  pos);	          int    i    =    readArgumentIndex(pattern,    pos);    int    i    =    readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  cannot  find  symbol  start	75	None	replace
64	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  pos  +  1));  [CE]  ';'  expected  [FE]                    IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  pos  +  1));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  pos  +  1));	          int    i    =    readArgumentIndex(pattern,    pos);    int    i    =    readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  ';'  expected	75	None	replace
65	[BUG]  [BUGGY]  pos  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);  [CE]  incompatible  types  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);	          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    int    pos    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  incompatible  types	54	None	replace
66	[BUG]  [BUGGY]  int  pos  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  pos  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  pos  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);	          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    int    pos    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	54	None	replace
67	[BUG]  [BUGGY]  int  start  =  pattern.getIndex()  -  1;  char[]  c  =  pattern.toCharArray();  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  pattern.getIndex()  -  1;  char[]  c  =  pattern.toCharArray();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pattern.getIndex()  -  1;  char[]  c  =  pattern.toCharArray();	  int    start    =    pos.getIndex()    -    1;    char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
68	[BUG]  [BUGGY]  Integer  pos  =  pos.getIndex();  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  Integer  pos  =  pos.getIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	Integer  pos  =  pos.getIndex();	  int    start    =    pos.getIndex()    +    1;    Integer    pos    =    pos.getIndex()    +    1;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	4	None	replace
69	[BUG]  [BUGGY]  Integer  pos  =  pos.getIndex()  +  1;  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  Integer  pos  =  pos.getIndex()  +  1;  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	Integer  pos  =  pos.getIndex()  +  1;	  int    start    =    pos.getIndex()    +    1;    Integer    pos    =    pos.getIndex()    +    1;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	4	None	replace
70	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  next(pos)));  stripCustom.append(END_FE).append(fmtCount);  [CE]  cannot  find  symbol  start  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  next(pos)));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  next(pos)));  stripCustom.append(END_FE).append(fmtCount);	  pos.setIndex(readArgumentIndex(pattern,    start));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  cannot  find  symbol  start	27	None	replace
71	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(FIELD_QUOTE);  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(FIELD_QUOTE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(FIELD_QUOTE);	  int    i    =    readArgumentIndex(pattern,    next(0));    stripCustom.append(END_FE).append(FIELD_QUOTE);    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	30	None	replace
72	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(FIELD_QUOTE,  fmtCount);  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(FIELD_QUOTE,  fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(FIELD_QUOTE,  fmtCount);	  int    i    =    readArgumentIndex(pattern,    next(0));    stripCustom.append(END_FE).append(FIELD_QUOTE);    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	30	None	replace
73	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(1));  stripCustom.append(END_FE).append(i);  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(1));  stripCustom.append(END_FE).append(i);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(1));  stripCustom.append(END_FE).append(i);	          int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    int    i    =    readArgumentIndex(pattern,    next(0));    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	18	None	replace
74	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(START_FE).append(i);  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(START_FE).append(i);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(START_FE).append(i);	          int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    int    i    =    readArgumentIndex(pattern,    next(0));    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	18	None	replace
75	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  0));  stripCustom.append(START_FE).append(fmtCount);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]    IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  0));  stripCustom.append(START_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  0));  stripCustom.append(START_FE).append(fmtCount);	          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	51	None	replace
76	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  start,  fmtCount));  [CE]  cannot  find  symbol  start  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  start,  fmtCount));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  start,  fmtCount));	  pos.setIndex(readArgumentIndex(pattern,    fmtCount));    	non-compiled	[CE]  cannot  find  symbol  start	96	None	replace
77	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  index,  fmtCount));  [CE]  cannot  find  symbol  index  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  index,  fmtCount));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  index,  fmtCount));	  pos.setIndex(readArgumentIndex(pattern,    fmtCount));    	non-compiled	[CE]  cannot  find  symbol  index	96	None	replace
78	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount,  0));  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount,  0));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  fmtCount,  0));	  pos.setIndex(readArgumentIndex(pattern,    fmtCount));    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	96	None	replace
79	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount,  index));  [CE]  cannot  find  symbol  index  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount,  index));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  fmtCount,  index));	  pos.setIndex(readArgumentIndex(pattern,    fmtCount));    	non-compiled	[CE]  cannot  find  symbol  index	96	None	replace
80	[BUG]  [BUGGY]  String  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);  [CE]  incompatible  types  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  String  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	String  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);	  char    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);    	non-compiled	[CE]  incompatible  types	32	None	replace
81	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);	  char    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	32	None	replace
82	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CE]  cannot  find  symbol  index  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);	  int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  cannot  find  symbol  index	87	None	replace
83	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(index);  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(index);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(index);	  int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	87	None	replace
84	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(FIELD_PATTERN);  [CE]  possible  loss  of  precision  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(FIELD_PATTERN);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(FIELD_PATTERN);	  int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(FIELD_PATTERN);    	non-compiled	[CE]  possible  loss  of  precision	68	None	replace
85	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(FIELD_PATTERN);  [CE]  cannot  find  symbol  FIELD_PATTERN  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(FIELD_PATTERN);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(FIELD_PATTERN);	  int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(FIELD_PATTERN);    	non-compiled	[CE]  cannot  find  symbol  FIELD_PATTERN	68	None	replace
86	[BUG]  [BUGGY]  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  start  =  pos.getIndex();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  start  =  pos.getIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  start  =  pos.getIndex();	  int    start    =    pos.getIndex()    +    1;    char[]    c    =    pattern.toCharArray();    start    =    pos.getIndex()    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	103	None	replace
87	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray();  start  =  pos.getIndex();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  pattern.toCharArray();  start  =  pos.getIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char[]  c  =  pattern.toCharArray();  start  =  pos.getIndex();	  int    start    =    pos.getIndex()    +    1;    char[]    c    =    pattern.toCharArray();    start    =    pos.getIndex()    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	103	None	replace
88	[BUG]  [BUGGY]  int  start  =  pattern.getIndex();  char[]  c  =  pattern.toCharArray();  start  =  pos.getIndex();  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  pattern.getIndex();  char[]  c  =  pattern.toCharArray();  start  =  pos.getIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pattern.getIndex();  char[]  c  =  pattern.toCharArray();  start  =  pos.getIndex();	  int    start    =    pos.getIndex()    +    1;    char[]    c    =    pattern.toCharArray();    start    =    pos.getIndex()    +    1;    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
89	[BUG]  [BUGGY]  Integer  start  =  pattern.getIndex();  char[]  c  =  pattern.toCharArray();  start  =  pos.getIndex();  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  Integer  start  =  pattern.getIndex();  char[]  c  =  pattern.toCharArray();  start  =  pos.getIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	Integer  start  =  pattern.getIndex();  char[]  c  =  pattern.toCharArray();  start  =  pos.getIndex();	  int    start    =    pos.getIndex()    +    1;    char[]    c    =    pattern.toCharArray();    start    =    pos.getIndex()    +    1;    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
90	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  start,  next(pos));  [CE]  ')'  expected  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  start,  next(pos));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  start,  next(pos));	  pos.setIndex(readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  ')'  expected	62	None	replace
91	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  next(0));  [CE]  ')'  expected  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  next(0));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  next(0));	  pos.setIndex(readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  ')'  expected	62	None	replace
92	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(i);  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(i);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(i);	  int    i    =    readArgumentIndex(pattern,    next(0));    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	36	None	replace
93	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(fmtCount);  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(fmtCount);	  int    i    =    readArgumentIndex(pattern,    next(0));    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	36	None	replace
94	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(i,  fmtCount);  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(i,  fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(i,  fmtCount);	  int    i    =    readArgumentIndex(pattern,    next(0));    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	36	None	replace
95	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  index,  -1));  stripCustom.append(END_FE).append(fmtCount);  [CE]  cannot  find  symbol  index  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  index,  -1));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  index,  -1));  stripCustom.append(END_FE).append(fmtCount);	  pos.setIndex(readArgumentIndex(pattern,    -1));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  cannot  find  symbol  index	80	None	replace
96	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  -1),  stripCustom.append(END_FE).append(fmtCount);  [CE]  ')'  expected  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  -1),  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  -1),  stripCustom.append(END_FE).append(fmtCount);	  pos.setIndex(readArgumentIndex(pattern,    -1));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  ')'  expected	80	None	replace
97	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  -1));  stripCustom.append(END_FE).append(fmtCount  +  1);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  -1));  stripCustom.append(END_FE).append(fmtCount  +  1);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  -1));  stripCustom.append(END_FE).append(fmtCount  +  1);	  pos.setIndex(readArgumentIndex(pattern,    -1));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	80	None	replace
98	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pos,  pos);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pos,  pos);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pos,  pos);	  int    i    =    readArgumentIndex(p,    pos);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	67	None	replace
99	[BUG]  [BUGGY]  if(pos.length()  >  0)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  }  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(pos.length()  >  0)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(pos.length()  >  0)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  }	  if(c.length()    >    0)    {    int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    }    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
100	[BUG]  [BUGGY]  int  start  =  pos.getIndex();  int  start  =  pos.getIndex();  [CE]  variable  start  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  pos.getIndex();  int  start  =  pos.getIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pos.getIndex();  int  start  =  pos.getIndex();	  int    start    =    pos.getIndex()    -    1;    int    start    =    pos.getIndex()    -    1;    	non-compiled	[CE]  variable  start  is  already  defined  in  method  applyPattern(String)	19	None	replace
101	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  0,  fmtCount));  stripCustom.append(END_FE).append(fmtCount);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  0,  fmtCount));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  0,  fmtCount));  stripCustom.append(END_FE).append(fmtCount);	  pos.setIndex(readArgumentIndex(pattern,    0));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	26	None	replace
102	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  0));  stripCustom.append(END_FE).append(fmtCount  +  1);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  0));  stripCustom.append(END_FE).append(fmtCount  +  1);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  0));  stripCustom.append(END_FE).append(fmtCount  +  1);	  pos.setIndex(readArgumentIndex(pattern,    0));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	26	None	replace
103	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  0),  fmtCount);  stripCustom.append(END_FE).append(fmtCount);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  0),  fmtCount);  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  0),  fmtCount);  stripCustom.append(END_FE).append(fmtCount);	  pos.setIndex(readArgumentIndex(pattern,    0));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	26	None	replace
104	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos),  fmtCount);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos),  fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(pos),  fmtCount);	  int    i    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	65	None	replace
105	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos  +  1));  [CE]  bad  operand  types  for  binary  operator  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos  +  1));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(pos  +  1));	  int    i    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	65	None	replace
106	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos),  0);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos),  0);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(pos),  0);	  int    i    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	65	None	replace
107	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  pos));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	add	                pos.setIndex(readArgumentIndex(pattern,        pos));        pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  pos));	  	compilable	  [FE]  IllegalArgumentException  	38	5	add
108	[BUG]  [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  pos));  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  pos));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	                pos.setIndex(readArgumentIndex(pattern,        pos));        pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  pos));	  	compilable	  [FE]  IllegalArgumentException  	38	5	add
109	[BUG]  [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,  pos));  int  pos.setIndex(readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  pos));  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,  pos));  int  pos.setIndex(readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  pos));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	                pos.setIndex(readArgumentIndex(pattern,        pos));        pos.setIndex(readArgumentIndex(pattern,    pos));    int  pos.setIndex(readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  pos));	  	non-compiled	[CE]  ';'  expected	38	None	add
110	[BUG]  [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,  pos));  int  pos  =  readArgumentIndex(pattern,  pos);  pos.setIndex(readArgumentIndex(pattern,  pos));  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]        IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,  pos));  int  pos  =  readArgumentIndex(pattern,  pos);  pos.setIndex(readArgumentIndex(pattern,  pos));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	                pos.setIndex(readArgumentIndex(pattern,        pos));        pos.setIndex(readArgumentIndex(pattern,    pos));    int  pos  =  readArgumentIndex(pattern,  pos);  pos.setIndex(readArgumentIndex(pattern,  pos));	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	38	None	add
111	[BUG]  [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,  pos));  int  index  =  readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  pos));  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,  pos));  int  index  =  readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  pos));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	                pos.setIndex(readArgumentIndex(pattern,        pos));        pos.setIndex(readArgumentIndex(pattern,    pos));    int  index  =  readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  pos));	  	non-compiled	[CE]  ';'  expected	38	None	add
112	[BUG]  [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,  pos));  int  pos  =  readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  pos));  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,  pos));  int  pos  =  readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  pos));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	                pos.setIndex(readArgumentIndex(pattern,        pos));        pos.setIndex(readArgumentIndex(pattern,    pos));    int  pos  =  readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  pos));	  	non-compiled	[CE]  ';'  expected	38	None	add
113	[BUG]  [BUGGY]  String  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_PATTERN);  [CE]  incompatible  types  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  String  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_PATTERN);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	String  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_PATTERN);	  char    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(FIELD_PATTERN);    	non-compiled	[CE]  incompatible  types	69	None	replace
114	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(FIELD_PATTERN);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(FIELD_PATTERN);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(FIELD_PATTERN);	  char    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(FIELD_PATTERN);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	69	None	replace
115	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount));  stripCustom.append(END_FE).append(index);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount));  stripCustom.append(END_FE).append(index);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  fmtCount));  stripCustom.append(END_FE).append(index);	          pos.setIndex(readArgumentIndex(pattern,    pos));    int    index    =    readArgumentIndex(pattern,    pos);    stripCustom.append(START_FE).append(index);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	113	None	replace
116	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount));  stripCustom.append(START_FE).append(index);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount));  stripCustom.append(START_FE).append(index);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  fmtCount));  stripCustom.append(START_FE).append(index);	          pos.setIndex(readArgumentIndex(pattern,    pos));    int    index    =    readArgumentIndex(pattern,    pos);    stripCustom.append(START_FE).append(index);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	113	None	replace
117	[BUG]  [BUGGY]  int  index  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(START_FE).append(index);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  index  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(START_FE).append(index);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  index  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(START_FE).append(index);	          pos.setIndex(readArgumentIndex(pattern,    pos));    int    index    =    readArgumentIndex(pattern,    pos);    stripCustom.append(START_FE).append(index);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	113	None	replace
118	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(fmtCount);  [CE]  ')'  expected  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(fmtCount);	  pos.setIndex(readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  ')'  expected	25	None	replace
119	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  start,  pos));  stripCustom.append(END_FE).append(fmtCount);  [CE]  cannot  find  symbol  start  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  start,  pos));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  start,  pos));  stripCustom.append(END_FE).append(fmtCount);	  pos.setIndex(readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  cannot  find  symbol  start	25	None	replace
120	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  [CE]  ')'  expected  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);	  pos.setIndex(readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  ')'  expected	25	None	replace
121	[BUG]  [BUGGY]  pos.setIndex(readStringIndex(pattern,  index));  [CE]  cannot  find  symbol  index  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readStringIndex(pattern,  index));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readStringIndex(pattern,  index));	  pos.setIndex(readStringIndex(pattern,    pos));    	non-compiled	[CE]  cannot  find  symbol  index	61	None	replace
122	[BUG]  [BUGGY]  pos.setIndex(readStringIndex(pattern,  fmtCount));  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readStringIndex(pattern,  fmtCount));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readStringIndex(pattern,  fmtCount));	  pos.setIndex(readStringIndex(pattern,    pos));    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
123	[BUG]  [BUGGY]  pos.setIndex(readStringIndex(p,  pos));  [CE]  cannot  find  symbol  p  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readStringIndex(p,  pos));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readStringIndex(p,  pos));	  pos.setIndex(readStringIndex(pattern,    pos));    	non-compiled	[CE]  cannot  find  symbol  p	61	None	replace
124	[BUG]  [BUGGY]  pos.setIndex(readStringIndex(c,  pos));  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readStringIndex(c,  pos));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readStringIndex(c,  pos));	  pos.setIndex(readStringIndex(pattern,    pos));    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
125	[BUG]  [BUGGY]  int  start  =  pattern.getIndex();  Integer  start  =  pattern.getIndex()  -  1;  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  pattern.getIndex();  Integer  start  =  pattern.getIndex()  -  1;  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pattern.getIndex();  Integer  start  =  pattern.getIndex()  -  1;	  int    start    =    pos.getIndex()    -    1;    Integer    start    =    pos.getIndex()    -    1;    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
126	[BUG]  [BUGGY]  int  start  =  pattern.getIndex()  -  1;  int  pos  =  pattern.getIndex()  -  1;  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  pattern.getIndex()  -  1;  int  pos  =  pattern.getIndex()  -  1;  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pattern.getIndex()  -  1;  int  pos  =  pattern.getIndex()  -  1;	  int    start    =    pos.getIndex()    -    1;    int    pos    =    pos.getIndex()    -    1;    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
127	[BUG]  [BUGGY]  int  start  =  it.getIndex()  -  1;  char[]  c  =  pattern.toCharArray();  [CE]  cannot  find  symbol  it  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  it.getIndex()  -  1;  char[]  c  =  pattern.toCharArray();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  it.getIndex()  -  1;  char[]  c  =  pattern.toCharArray();	  int    start    =    pos.getIndex()    -    1;    char[]    c    =    it.toCharArray();    	non-compiled	[CE]  cannot  find  symbol  it	94	None	replace
128	[BUG]  [BUGGY]  int  start  =  pos.getIndex();  char[]  c  =  it.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  pos.getIndex();  char[]  c  =  it.toCharArray();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pos.getIndex();  char[]  c  =  it.toCharArray();	  int    start    =    pos.getIndex()    -    1;    char[]    c    =    it.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	94	None	replace
129	[BUG]  [BUGGY]  int  start  =  pattern.getIndex()  -  1;  char[]  c  =  it.toCharArray();  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  pattern.getIndex()  -  1;  char[]  c  =  it.toCharArray();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pattern.getIndex()  -  1;  char[]  c  =  it.toCharArray();	  int    start    =    pos.getIndex()    -    1;    char[]    c    =    it.toCharArray();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
130	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(FIELD_FMT);  [CE]  possible  loss  of  precision  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(FIELD_FMT);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(FIELD_FMT);	  int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(FIELD_FMT);    	non-compiled	[CE]  possible  loss  of  precision	105	None	replace
131	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(FIELD_FMT);  [CE]  cannot  find  symbol  FIELD_FMT  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(FIELD_FMT);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(FIELD_FMT);	  int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(FIELD_FMT);    	non-compiled	[CE]  cannot  find  symbol  FIELD_FMT	105	None	replace
132	[BUG]  [BUGGY]  String  i  =  readArgumentIndex(pattern,  pos);  [CE]  incompatible  types  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  String  i  =  readArgumentIndex(pattern,  pos);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	String  i  =  readArgumentIndex(pattern,  pos);	  char    i    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  incompatible  types	66	None	replace
133	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  index);  [CE]  cannot  find  symbol  index  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  index);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  index);	  char    i    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  cannot  find  symbol  index	66	None	replace
134	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  pos,  fmtCount);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  pos,  fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  pos,  fmtCount);	  char    i    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	66	None	replace
135	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  pos  +  1);  [CE]  bad  operand  types  for  binary  operator  [FE]                  IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  pos  +  1);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  pos  +  1);	  char    i    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	66	None	replace
136	[BUG]  [BUGGY]  Integer  start  =  pos.getIndex();  int  start  =  pos.getIndex();  [CE]  variable  start  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  Integer  start  =  pos.getIndex();  int  start  =  pos.getIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	Integer  start  =  pos.getIndex();  int  start  =  pos.getIndex();	  int    start    =    pos.getIndex()    +    1;    int    start    =    pos.getIndex()    +    1;    	non-compiled	[CE]  variable  start  is  already  defined  in  method  applyPattern(String)	1	None	replace
137	[BUG]  [BUGGY]  char  start  =  pos.getIndex();  int  start  =  pos.getIndex();  [CE]  possible  loss  of  precision  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  start  =  pos.getIndex();  int  start  =  pos.getIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  start  =  pos.getIndex();  int  start  =  pos.getIndex();	  int    start    =    pos.getIndex()    +    1;    int    start    =    pos.getIndex()    +    1;    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
138	[BUG]  [BUGGY]  Integer  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_QUOTE);  [CE]  cannot  find  symbol  FIELD_QUOTE  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  Integer  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_QUOTE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	Integer  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_QUOTE);	  if(stripCustom!=    null)    {    int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(FIELD_QUOTE);    }    	non-compiled	[CE]  cannot  find  symbol  FIELD_QUOTE	88	None	replace
139	[BUG]  [BUGGY]  if(c!=  null)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_QUOTE);  }  [CE]  cannot  find  symbol  FIELD_QUOTE  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(c!=  null)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_QUOTE);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(c!=  null)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_QUOTE);  }	  if(stripCustom!=    null)    {    int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(FIELD_QUOTE);    }    	non-compiled	[CE]  cannot  find  symbol  FIELD_QUOTE	88	None	replace
140	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(i);  [CE]  possible  loss  of  precision  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(i);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(i);	  int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(START_FE).append(i);    	non-compiled	[CE]  possible  loss  of  precision	47	None	replace
141	[BUG]  [BUGGY]  String  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  [CE]  incompatible  types  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  String  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	String  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);	  char    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  incompatible  types	46	None	replace
142	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  [CE]  possible  loss  of  precision  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);	  char    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  possible  loss  of  precision	46	None	replace
143	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(i);  [CE]  cannot  find  symbol  index  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(i);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(i);	  char    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  cannot  find  symbol  index	46	None	replace
144	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(i);  [CE]  possible  loss  of  precision  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(i);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(i);	  int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(QUOTE).append(i);    	non-compiled	[CE]  possible  loss  of  precision	86	None	replace
145	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(fmtCount);  [CE]  cannot  find  symbol  start  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(fmtCount);	  int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(QUOTE).append(i);    	non-compiled	[CE]  cannot  find  symbol  start	86	None	replace
146	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(FIELD_FE).append(FIELD_QUOTE);  [CE]  possible  loss  of  precision  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(FIELD_FE).append(FIELD_QUOTE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(FIELD_FE).append(FIELD_QUOTE);	  int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(FIELD_FE).append(FIELD_QUOTE);    	non-compiled	[CE]  possible  loss  of  precision	101	None	replace
147	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(FIELD_FE).append(FIELD_QUOTE);  [CE]  cannot  find  symbol  FIELD_QUOTE  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(FIELD_FE).append(FIELD_QUOTE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(FIELD_FE).append(FIELD_QUOTE);	  int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(FIELD_FE).append(FIELD_QUOTE);    	non-compiled	[CE]  cannot  find  symbol  FIELD_QUOTE	101	None	replace
148	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(FIELD_FE).append(FIELD_QUOTE);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(FIELD_FE).append(FIELD_QUOTE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(FIELD_FE).append(FIELD_QUOTE);	  int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(FIELD_FE).append(FIELD_QUOTE);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	101	None	replace
149	[BUG]  [BUGGY]  if(pos.length()  ==  0)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  }  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(pos.length()  ==  0)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(pos.length()  ==  0)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  }	  if(c.length()    ==    0)    {    int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    }    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
150	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  pos,  fmtCount);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  pos,  fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  pos,  fmtCount);	          int    i    =    readArgumentIndex(pattern,    pos);    int    i    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	72	None	replace
151	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  index);  [CE]  cannot  find  symbol  index  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  index);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  index);	          int    i    =    readArgumentIndex(pattern,    pos);    int    i    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  cannot  find  symbol  index	72	None	replace
152	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount));  stripCustom.setIndex(readArgumentIndex(pattern,  pos);  [CE]  ')'  expected  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount));  stripCustom.setIndex(readArgumentIndex(pattern,  pos);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  fmtCount));  stripCustom.setIndex(readArgumentIndex(pattern,  pos);	          pos.setIndex(readArgumentIndex(pattern,    pos));    int    index    =    readArgumentIndex(pattern,    pos);    stripCustom.setIndex(readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  ')'  expected	83	None	replace
153	[BUG]  [BUGGY]  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.setIndex(readArgumentIndex(pattern,  pos);  [CE]  ')'  expected  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.setIndex(readArgumentIndex(pattern,  pos);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.setIndex(readArgumentIndex(pattern,  pos);	          pos.setIndex(readArgumentIndex(pattern,    pos));    int    index    =    readArgumentIndex(pattern,    pos);    stripCustom.setIndex(readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  ')'  expected	83	None	replace
154	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  0));  stripCustom.setIndex(readArgumentIndex(pattern,  0);  [CE]  ')'  expected  [FE]                IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  0));  stripCustom.setIndex(readArgumentIndex(pattern,  0);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  0));  stripCustom.setIndex(readArgumentIndex(pattern,  0);	          pos.setIndex(readArgumentIndex(pattern,    pos));    int    index    =    readArgumentIndex(pattern,    pos);    stripCustom.setIndex(readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  ')'  expected	83	None	replace
155	[BUG]  [BUGGY]  if(c!=  null)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  }  [CE]  cannot  find  symbol  start  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(c!=  null)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(c!=  null)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  }	  if(stripCustom!=    null)    {    int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    }    	non-compiled	[CE]  cannot  find  symbol  start	117	None	replace
156	[BUG]  [BUGGY]  String  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);  [CE]  incompatible  types  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  String  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	String  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);	  char    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  incompatible  types	37	None	replace
157	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount  +  1);  [CE]  possible  loss  of  precision  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount  +  1);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount  +  1);	  char    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  possible  loss  of  precision	37	None	replace
158	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(fmtCount);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(fmtCount);	  char    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	37	None	replace
159	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);  [CE]  cannot  find  symbol  start  [FE]                  IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);	  char    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  cannot  find  symbol  start	37	None	replace
160	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  next(pos)));  [CE]  cannot  find  symbol  start  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  next(pos)));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  next(pos)));	  pos.setIndex(readArgumentIndex(pattern,    index));    	non-compiled	[CE]  cannot  find  symbol  start	60	None	replace
161	[BUG]  [BUGGY]  int  start  =  pattern.getStartIndex()  -  1;  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  pattern.getStartIndex()  -  1;  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pattern.getStartIndex()  -  1;	  int    start    =    pattern.getStartIndex();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
162	[BUG]  [BUGGY]  int  start  =  this.pattern.getStartIndex();  [CE]  pattern  has  private  access  in  MessageFormat  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  this.pattern.getStartIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  this.pattern.getStartIndex();	  int    start    =    pattern.getStartIndex();    	non-compiled	[CE]  pattern  has  private  access  in  MessageFormat	12	None	replace
163	[BUG]  [BUGGY]  Integer  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  [CE]  cannot  find  symbol  start  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  Integer  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	Integer  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);	          int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    Int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  cannot  find  symbol  start	16	None	replace
164	[BUG]  [BUGGY]  if(pos.length()  >  0)  {  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  }  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(pos.length()  >  0)  {  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(pos.length()  >  0)  {  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  }	  if(c.length()    >    0)    {    int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    }    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
165	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos),  (0));  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos),  (0));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(pos),  (0));	  int    i    =    readArgumentIndex(pattern,    next(0));    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	78	None	replace
166	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0),  pos);  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0),  pos);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(0),  pos);	  int    i    =    readArgumentIndex(pattern,    next(0));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	78	None	replace
167	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray();  int  start  =  pos.getIndex();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  pattern.toCharArray();  int  start  =  pos.getIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char[]  c  =  pattern.toCharArray();  int  start  =  pos.getIndex();	  int    start    =    pos.getIndex()    -    1;    char[]    c    =    pattern.toCharArray();    int    start    =    pos.getIndex()    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	108	None	replace
168	[BUG]  [BUGGY]  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  int  start  =  pos.getIndex();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  int  start  =  pos.getIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  int  start  =  pos.getIndex();	  int    start    =    pos.getIndex()    -    1;    char[]    c    =    pattern.toCharArray();    int    start    =    pos.getIndex()    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	108	None	replace
169	[BUG]  [BUGGY]  Integer  start  =  pattern.getIndex();  char[]  c  =  pattern.toCharArray();  int  start  =  pos.getIndex();  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  Integer  start  =  pattern.getIndex();  char[]  c  =  pattern.toCharArray();  int  start  =  pos.getIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	Integer  start  =  pattern.getIndex();  char[]  c  =  pattern.toCharArray();  int  start  =  pos.getIndex();	  int    start    =    pos.getIndex()    -    1;    char[]    c    =    pattern.toCharArray();    int    start    =    pos.getIndex()    -    1;    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
170	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  first(pos));  stripCustom.append(END_FE).append(i);  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  first(pos));  stripCustom.append(END_FE).append(i);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  first(pos));  stripCustom.append(END_FE).append(i);	          int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    int    i    =    readArgumentIndex(pattern,    first(pos));    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
171	[BUG]  [BUGGY]  int  start  =  it.getIndex();  char[]  c  =  it.toCharArray();  [CE]  cannot  find  symbol  it  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  it.getIndex();  char[]  c  =  it.toCharArray();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  it.getIndex();  char[]  c  =  it.toCharArray();	  int    start    =    pos.getIndex()    +    1;    char[]    c    =    it.toCharArray();    	non-compiled	[CE]  cannot  find  symbol  it	91	None	replace
172	[BUG]  [BUGGY]  int  start  =  it.getIndex()  +  1;  char[]  c  =  pattern.toCharArray();  [CE]  cannot  find  symbol  it  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  it.getIndex()  +  1;  char[]  c  =  pattern.toCharArray();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  it.getIndex()  +  1;  char[]  c  =  pattern.toCharArray();	  int    start    =    pos.getIndex()    +    1;    char[]    c    =    it.toCharArray();    	non-compiled	[CE]  cannot  find  symbol  it	91	None	replace
173	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);  [CE]  possible  loss  of  precision  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);	  int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);    	non-compiled	[CE]  possible  loss  of  precision	33	None	replace
174	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(END_FE);  [CE]  cannot  find  symbol  start  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(END_FE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(END_FE);	  int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);    	non-compiled	[CE]  cannot  find  symbol  start	33	None	replace
175	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	add	                pos.setIndex(readArgumentIndex(pattern,        pos));        stripCustom.append(END_FE).append(fmtCount);        pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);	  	compilable	  [FE]  IllegalArgumentException  	50	5	add
176	[BUG]  [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	                pos.setIndex(readArgumentIndex(pattern,        pos));        stripCustom.append(END_FE).append(fmtCount);        pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);	  	compilable	  [FE]  IllegalArgumentException  	50	5	add
177	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	add	                pos.setIndex(readArgumentIndex(pattern,        pos));        stripCustom.append(END_FE).append(fmtCount);        pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);	  	compilable	  [FE]  IllegalArgumentException  	50	5	add
178	[BUG]  [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	                pos.setIndex(readArgumentIndex(pattern,        pos));        stripCustom.append(END_FE).append(fmtCount);        pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);	  	compilable	  [FE]  IllegalArgumentException  	50	5	add
179	[BUG]  [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(FIELD_FE).append(fmtCount);  [CE]  cannot  find  symbol  FIELD_FE  [FE]        IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(FIELD_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	                pos.setIndex(readArgumentIndex(pattern,        pos));        stripCustom.append(END_FE).append(fmtCount);        pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(FIELD_FE).append(fmtCount);	  	non-compiled	[CE]  cannot  find  symbol  FIELD_FE	50	None	add
180	[BUG]  [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(STRING_FE).append(fmtCount);  [CE]  cannot  find  symbol  STRING_FE  [FE]          IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(STRING_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	                pos.setIndex(readArgumentIndex(pattern,        pos));        stripCustom.append(END_FE).append(fmtCount);        pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(STRING_FE).append(fmtCount);	  	non-compiled	[CE]  cannot  find  symbol  STRING_FE	50	None	add
181	[BUG]  [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(FINAL_FE).append(fmtCount);  [CE]  cannot  find  symbol  FINAL_FE  [FE]            IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(FINAL_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	                pos.setIndex(readArgumentIndex(pattern,        pos));        stripCustom.append(END_FE).append(fmtCount);        pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(FINAL_FE).append(fmtCount);	  	non-compiled	[CE]  cannot  find  symbol  FINAL_FE	50	None	add
182	[BUG]  [BUGGY]  int  index  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(index);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  index  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(index);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  index  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(index);	          pos.setIndex(readArgumentIndex(pattern,    pos));    int    index    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	82	None	replace
183	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount));  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(index);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount));  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(index);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  fmtCount));  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(index);	          pos.setIndex(readArgumentIndex(pattern,    pos));    int    index    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	82	None	replace
184	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(FIELD_PATTERN);  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(FIELD_PATTERN);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(FIELD_PATTERN);	  int    i    =    readArgumentIndex(pattern,    next(0));    stripCustom.append(END_FE).append(FIELD_PATTERN);    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	70	None	replace
185	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(FIELD_PATTERN,  fmtCount);  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(FIELD_PATTERN,  fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(FIELD_PATTERN,  fmtCount);	  int    i    =    readArgumentIndex(pattern,    next(0));    stripCustom.append(END_FE).append(FIELD_PATTERN);    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	70	None	replace
186	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(1));  stripCustom.append(END_FE).append(FIELD_PATTERN);  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(1));  stripCustom.append(END_FE).append(FIELD_PATTERN);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  next(1));  stripCustom.append(END_FE).append(FIELD_PATTERN);	  int    i    =    readArgumentIndex(pattern,    next(0));    stripCustom.append(END_FE).append(FIELD_PATTERN);    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	70	None	replace
187	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(FIELD_PATTERN);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(FIELD_PATTERN);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(FIELD_PATTERN);	  int    i    =    readArgumentIndex(pattern,    start);    stripCustom.append(END_FE).append(FIELD_PATTERN);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	71	None	replace
188	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(FIELD_PATTERN);  [CE]  cannot  find  symbol  index  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(FIELD_PATTERN);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(FIELD_PATTERN);	  int    i    =    readArgumentIndex(pattern,    start);    stripCustom.append(END_FE).append(FIELD_PATTERN);    	non-compiled	[CE]  cannot  find  symbol  index	71	None	replace
189	[BUG]  [BUGGY]  int  fmtCount  =  pos.getIndex();  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  fmtCount  =  pos.getIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  fmtCount  =  pos.getIndex();	  int    start    =    pos.getIndex()    -    1;    int    fmtCount    =    pos.getIndex()    -    1;    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	21	None	replace
190	[BUG]  [BUGGY]  int  start  =  pos.getIndex();  int  fmtCount  =  pos.getIndex();  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  pos.getIndex();  int  fmtCount  =  pos.getIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pos.getIndex();  int  fmtCount  =  pos.getIndex();	  int    start    =    pos.getIndex()    -    1;    int    fmtCount    =    pos.getIndex()    -    1;    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	21	None	replace
191	[BUG]  [BUGGY]  int  start  =  pattern.getIndex()  -  1;  int  fmtCount  =  pattern.getIndex()  -  1;  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  pattern.getIndex()  -  1;  int  fmtCount  =  pattern.getIndex()  -  1;  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pattern.getIndex()  -  1;  int  fmtCount  =  pattern.getIndex()  -  1;	  int    start    =    pos.getIndex()    -    1;    int    fmtCount    =    pos.getIndex()    -    1;    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
192	[BUG]  [BUGGY]  int  start  =  pos.getIndex();  int  fmtCount  =  pattern.getIndex();  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  pos.getIndex();  int  fmtCount  =  pattern.getIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pos.getIndex();  int  fmtCount  =  pattern.getIndex();	  int    start    =    pos.getIndex()    -    1;    int    fmtCount    =    pos.getIndex()    -    1;    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	21	None	replace
193	[BUG]  [BUGGY]  String  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(FIELD_QUOTE).append(END_FE);  [CE]  incompatible  types  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  String  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(FIELD_QUOTE).append(END_FE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	String  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(FIELD_QUOTE).append(END_FE);	  char    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(FIELD_QUOTE).append(END_FE);    	non-compiled	[CE]  incompatible  types	34	None	replace
194	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(FIELD_QUOTE).append(END_FE);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(FIELD_QUOTE).append(END_FE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(FIELD_QUOTE).append(END_FE);	  char    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(FIELD_QUOTE).append(END_FE);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	34	None	replace
195	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(FIELD_QUOTE).append(END_FE);  [CE]  cannot  find  symbol  FIELD_QUOTE  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(FIELD_QUOTE).append(END_FE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(FIELD_QUOTE).append(END_FE);	  char    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(FIELD_QUOTE).append(END_FE);    	non-compiled	[CE]  cannot  find  symbol  FIELD_QUOTE	34	None	replace
196	[BUG]  [BUGGY]  int  i  =  getArgumentIndex(c,  pos);  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  getArgumentIndex(c,  pos);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  getArgumentIndex(c,  pos);	  int    i    =    getArgumentIndex(pattern,    pos);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
197	[BUG]  [BUGGY]  int  i  =  getIndex(pattern,  pos);  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  getIndex(pattern,  pos);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  getIndex(pattern,  pos);	  int    i    =    getArgumentIndex(pattern,    pos);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
198	[BUG]  [BUGGY]  int  i  =  getArgumentIndex(pattern,  next(pos));  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  getArgumentIndex(pattern,  next(pos));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  getArgumentIndex(pattern,  next(pos));	  int    i    =    getArgumentIndex(pattern,    pos);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
199	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_FMT);  [CE]  possible  loss  of  precision  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_FMT);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_FMT);	  int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(FIELD_FMT);    	non-compiled	[CE]  possible  loss  of  precision	89	None	replace
200	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(FIELD_FMT);  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(FIELD_FMT);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(FIELD_FMT);	  int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(FIELD_FMT);    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	89	None	replace
201	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(FIELD_FMT);  [CE]  cannot  find  symbol  start  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(FIELD_FMT);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(FIELD_FMT);	  int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(FIELD_FMT);    	non-compiled	[CE]  cannot  find  symbol  start	89	None	replace
202	[BUG]  [BUGGY]  String  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_QUOTE);  [CE]  incompatible  types  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  String  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_QUOTE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	String  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_QUOTE);	  char    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(FIELD_QUOTE);    	non-compiled	[CE]  incompatible  types	29	None	replace
203	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(FIELD_QUOTE);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(FIELD_QUOTE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(FIELD_QUOTE);	  char    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(FIELD_QUOTE);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	29	None	replace
204	[BUG]  [BUGGY]  String  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  [CE]  incompatible  types  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  String  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	String  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);	  char    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  incompatible  types	35	None	replace
205	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(i);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(i);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(i);	  char    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	35	None	replace
206	[BUG]  [BUGGY]  int  start  =  fmtCount.getStartIndex()  +  1;  [CE]  int  cannot  be  dereferenced  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  fmtCount.getStartIndex()  +  1;  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  fmtCount.getStartIndex()  +  1;	  int    start    =    fmtCount.getStartIndex();    	non-compiled	[CE]  int  cannot  be  dereferenced	84	None	replace
207	[BUG]  [BUGGY]  int  start  =  pattern.getIndex();  int  start  =  pos.getIndex();  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  pattern.getIndex();  int  start  =  pos.getIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pattern.getIndex();  int  start  =  pos.getIndex();	  int    start    =    pos.getIndex()    +    1;    char[]    c    =    pattern.toCharArray();    int    start    =    pos.getIndex()    +    1;    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
208	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount  +  1);  [CE]  cannot  find  symbol  start  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount  +  1);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount  +  1);	  int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  cannot  find  symbol  start	49	None	replace
209	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(fmtCount);  [CE]  cannot  find  symbol  start  [FE]                IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(fmtCount);	  int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  cannot  find  symbol  start	49	None	replace
210	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount));  stripCustom.setIndex(readArgumentIndex(pattern,  pos));  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount));  stripCustom.setIndex(readArgumentIndex(pattern,  pos));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  fmtCount));  stripCustom.setIndex(readArgumentIndex(pattern,  pos));	          pos.setIndex(readArgumentIndex(pattern,    pos));    int    index    =    readArgumentIndex(pattern,    pos);    stripCustom.setIndex(readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	81	None	replace
211	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount));  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.setIndex(readArgumentIndex(pattern,  pos));  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount));  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.setIndex(readArgumentIndex(pattern,  pos));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  fmtCount));  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.setIndex(readArgumentIndex(pattern,  pos));	          pos.setIndex(readArgumentIndex(pattern,    pos));    int    index    =    readArgumentIndex(pattern,    pos);    stripCustom.setIndex(readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	81	None	replace
212	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  0));  stripCustom.setIndex(readArgumentIndex(pattern,  0));  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  0));  stripCustom.setIndex(readArgumentIndex(pattern,  0));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  0));  stripCustom.setIndex(readArgumentIndex(pattern,  0));	          pos.setIndex(readArgumentIndex(pattern,    pos));    int    index    =    readArgumentIndex(pattern,    pos);    stripCustom.setIndex(readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	81	None	replace
213	[BUG]  [BUGGY]  if(pos.length()  ==  0)  {  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  }  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(pos.length()  ==  0)  {  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(pos.length()  ==  0)  {  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  }	  if(c.length()    ==    0)    {    int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    }    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
214	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  index,  0));  [CE]  cannot  find  symbol  index  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  index,  0));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  index,  0));	  pos.setIndex(readArgumentIndex(pattern,    0));    	non-compiled	[CE]  cannot  find  symbol  index	63	None	replace
215	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  0,  fmtCount));  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  0,  fmtCount));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  0,  fmtCount));	  pos.setIndex(readArgumentIndex(pattern,    0));    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	63	None	replace
216	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  start,  0));  [CE]  cannot  find  symbol  start  [FE]                  IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  start,  0));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  start,  0));	  pos.setIndex(readArgumentIndex(pattern,    0));    	non-compiled	[CE]  cannot  find  symbol  start	63	None	replace
217	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  0),  fmtCount);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  0),  fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  0),  fmtCount);	  pos.setIndex(readArgumentIndex(pattern,    0));    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	63	None	replace
218	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  StripCustom.append(END_FE).append(i);  [CE]  cannot  find  symbol  StripCustom  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  StripCustom.append(END_FE).append(i);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(pos));  StripCustom.append(END_FE).append(i);	          int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    int    i    =    readArgumentIndex(pattern,    next(pos));    StripCustom.append(END_FE).append(i);    	non-compiled	[CE]  cannot  find  symbol  StripCustom	92	None	replace
219	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount++);  [CE]  possible  loss  of  precision  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount++);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount++);	  char    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  possible  loss  of  precision	37	None	replace
220	[BUG]  [BUGGY]  Char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  Char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	Char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);	  char    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
221	[BUG]  [BUGGY]  if(stripCustom  ==  null)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_QUOTE);  }  [CE]  cannot  find  symbol  FIELD_QUOTE  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(stripCustom  ==  null)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_QUOTE);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(stripCustom  ==  null)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_QUOTE);  }	  if(stripCustom!=    null)    {    int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(FIELD_QUOTE);    }    	non-compiled	[CE]  cannot  find  symbol  FIELD_QUOTE	88	None	replace
222	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0),  fmtCount);  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0),  fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(0),  fmtCount);	  int    i    =    readArgumentIndex(pattern,    next(0));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	78	None	replace
223	[BUG]  [BUGGY]  Int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  Int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	Int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);	          int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    Int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
224	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  }  [CE]  cannot  find  symbol  start  [FE]    IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(fmtCount  >  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(fmtCount  >  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  }	          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  cannot  find  symbol  start	51	None	replace
225	[BUG]  [BUGGY]  if(c  ==  null)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  int  pos  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount  [CE]  ')'  expected  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(c  ==  null)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  int  pos  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(c  ==  null)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  int  pos  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount	          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    int    pos    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  ')'  expected	54	None	replace
226	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(QUOTE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	add	                pos.setIndex(readArgumentIndex(pattern,        pos));        stripCustom.append(END_FE).append(fmtCount);        pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(QUOTE).append(fmtCount);	  	compilable	  [FE]  IllegalArgumentException  	50	5	add
227	[BUG]  [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(QUOTE).append(fmtCount);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(QUOTE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	                pos.setIndex(readArgumentIndex(pattern,        pos));        stripCustom.append(END_FE).append(fmtCount);        pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(QUOTE).append(fmtCount);	  	compilable	  [FE]  IllegalArgumentException  	50	5	add
228	[BUG]  [BUGGY]  pos.setIndex(readStringIndex(pattern,  0));  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readStringIndex(pattern,  0));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readStringIndex(pattern,  0));	  pos.setIndex(readStringIndex(pattern,    pos));    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
229	[BUG]  [BUGGY]  pos.setIndex(readStringIndex(pattern,  next(pos));  [CE]  ')'  expected  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readStringIndex(pattern,  next(pos));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readStringIndex(pattern,  next(pos));	  pos.setIndex(readStringIndex(pattern,    pos));    	non-compiled	[CE]  ')'  expected	61	None	replace
230	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  last(pos));  stripCustom.append(END_FE).append(i);  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  last(pos));  stripCustom.append(END_FE).append(i);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  last(pos));  stripCustom.append(END_FE).append(i);	          int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    int    i    =    readArgumentIndex(pattern,    first(pos));    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
231	[BUG]  [BUGGY]  int  start  =  c[pos.getIndex()  +  1;  [CE]  ']'  expected  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  c[pos.getIndex()  +  1;  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  c[pos.getIndex()  +  1;	  int    start    =    c.getIndex()    +    1;    	non-compiled	[CE]  ']'  expected	77	None	replace
232	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  -1));  stripCustom.append(END_FE).append(fmtCount  -  1);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  -1));  stripCustom.append(END_FE).append(fmtCount  -  1);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  -1));  stripCustom.append(END_FE).append(fmtCount  -  1);	  pos.setIndex(readArgumentIndex(pattern,    -1));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	80	None	replace
233	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  [CE]  possible  loss  of  precision  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);	  int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  possible  loss  of  precision	87	None	replace
234	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(1));  stripCustom.append(END_FE).append(FIELD_QUOTE);  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(1));  stripCustom.append(END_FE).append(FIELD_QUOTE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  next(1));  stripCustom.append(END_FE).append(FIELD_QUOTE);	  int    i    =    readArgumentIndex(pattern,    next(0));    stripCustom.append(END_FE).append(FIELD_QUOTE);    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	30	None	replace
235	[BUG]  [BUGGY]  if(c.length()  >  0)  {  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(c.length()  >  0)  {  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(c.length()  >  0)  {  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()    >    0)    {    int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    }    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
236	[BUG]  [BUGGY]  Char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  Char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	Char  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);	  char    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
237	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END).append(FIELD_FMT);  [CE]  cannot  find  symbol  FIELD_FMT  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END).append(FIELD_FMT);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END).append(FIELD_FMT);	  int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(FIELD_FMT);    	non-compiled	[CE]  cannot  find  symbol  FIELD_FMT	105	None	replace
238	[BUG]  [BUGGY]  if(c.length()!=  0)  {  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  }  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(c.length()!=  0)  {  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(c.length()!=  0)  {  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(i);  }	          int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    int    i    =    readArgumentIndex(pattern,    next(pos));    StripCustom.append(END_FE).append(i);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
239	[BUG]  [BUGGY]  n.setIndex(readArgumentIndex(pattern,  pos));  [CE]  cannot  find  symbol  n  [FE]    IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  n.setIndex(readArgumentIndex(pattern,  pos));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	n.setIndex(readArgumentIndex(pattern,  pos));	          pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  cannot  find  symbol  n	39	None	replace
240	[BUG]  [BUGGY]  n.setIndex(readArgumentIndex(pattern,  0));  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]      IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  n.setIndex(readArgumentIndex(pattern,  0));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	n.setIndex(readArgumentIndex(pattern,  0));	          pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	39	None	replace
241	[BUG]  [BUGGY]  int  start  =  c[pos.getIndex();  [CE]  ']'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  c[pos.getIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  c[pos.getIndex();	  int    start    =    c.getIndex();    	non-compiled	[CE]  ']'  expected	6	None	replace
242	[BUG]  [BUGGY]  Integer  start  =  pos.getIndex();  int  pos  =  pos.getIndex();  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  Integer  start  =  pos.getIndex();  int  pos  =  pos.getIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	Integer  start  =  pos.getIndex();  int  pos  =  pos.getIndex();	  int    start    =    pos.getIndex()    +    1;    int    pos    =    pos.getIndex()    +    1;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	2	None	replace
243	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  next(pos),  fmtCount));  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  next(pos),  fmtCount));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  next(pos),  fmtCount));	  pos.setIndex(readArgumentIndex(pattern,    fmtCount));    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	96	None	replace
244	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  0));  break;  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  0));  break;  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  0));  break;	          pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,    pos));    break;    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	42	None	replace
245	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  }  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(c.length()  ==  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(c.length()  ==  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  }	          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    int    index    =    readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
246	[BUG]  [BUGGY]  if(c!=  null)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount  [CE]  ')'  expected  [FE]                IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(c!=  null)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(c!=  null)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount	          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    int    index    =    readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  ')'  expected	55	None	replace
247	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  int  index  =  readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount  [CE]  ';'  expected  [FE]                  IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(c.length()  ==  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  int  index  =  readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(c.length()  ==  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  int  index  =  readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount	          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    int    index    =    readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  ';'  expected	55	None	replace
248	[BUG]  [BUGGY]  Char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_QUOTE);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  Char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_QUOTE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	Char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_QUOTE);	  char    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(FIELD_QUOTE);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
249	[BUG]  [BUGGY]  int  i  =  getArgumentIndex(pattern,  pos,  fmtCount);  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  getArgumentIndex(pattern,  pos,  fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  getArgumentIndex(pattern,  pos,  fmtCount);	  int    i    =    getArgumentIndex(pattern,    pos);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
250	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(c.length()  ==  0)  {  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(c.length()  ==  0)  {  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()    ==    0)    {    int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    }    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
251	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(c.length()  ==  0)  {  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(c.length()  ==  0)  {  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	  if(c.length()    ==    0)    {    int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    }    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
252	[BUG]  [BUGGY]  char  start  =  pos.getIndex()  -  1;  int  start  =  pos.getIndex();  [CE]  possible  loss  of  precision  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  start  =  pos.getIndex()  -  1;  int  start  =  pos.getIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  start  =  pos.getIndex()  -  1;  int  start  =  pos.getIndex();	  int    start    =    pos.getIndex()    -    1;    int    start    =    pos.getIndex()    -    1;    	non-compiled	[CE]  possible  loss  of  precision	19	None	replace
253	[BUG]  [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  pos);  pos.setIndex(readArgumentIndex(pattern,  pos));  [CE]  ')'  expected  [FE]    IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  pos);  pos.setIndex(readArgumentIndex(pattern,  pos));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	                pos.setIndex(readArgumentIndex(pattern,        pos));        pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,  pos);  pos.setIndex(readArgumentIndex(pattern,  pos));	  	non-compiled	[CE]  ')'  expected	38	None	add
254	[BUG]  [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,  pos));  int  index  =  readArgumentIndex(pattern,  pos);  pos.setIndex(readArgumentIndex(pattern,  pos));  [CE]  variable  index  is  already  defined  in  method  applyPattern(String)  [FE]      IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,  pos));  int  index  =  readArgumentIndex(pattern,  pos);  pos.setIndex(readArgumentIndex(pattern,  pos));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	                pos.setIndex(readArgumentIndex(pattern,        pos));        pos.setIndex(readArgumentIndex(pattern,    pos));    int  index  =  readArgumentIndex(pattern,  pos);  pos.setIndex(readArgumentIndex(pattern,  pos));	  	non-compiled	[CE]  variable  index  is  already  defined  in  method  applyPattern(String)	38	None	add
255	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  pos));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	add	                pos.setIndex(readArgumentIndex(pattern,        pos));        pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,  pos));	  	compilable	  [FE]  IllegalArgumentException  	38	5	add
256	[BUG]  [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  pos));  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  pos));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	                pos.setIndex(readArgumentIndex(pattern,        pos));        pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,  pos));	  	compilable	  [FE]  IllegalArgumentException  	38	5	add
257	[BUG]  [BUGGY]  int  start  =  pattern.getIndex()  -  1;  int  pos  =  pattern.getIndex();  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  pattern.getIndex()  -  1;  int  pos  =  pattern.getIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pattern.getIndex()  -  1;  int  pos  =  pattern.getIndex();	  int    start    =    pos.getIndex()    -    1;    int    pos    =    pos.getIndex()    -    1;    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
258	[BUG]  [BUGGY]  int  start  =  c.getIndex()  -  1;  int  pos  =  c.getIndex()  -  1;  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  c.getIndex()  -  1;  int  pos  =  c.getIndex()  -  1;  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  c.getIndex()  -  1;  int  pos  =  c.getIndex()  -  1;	  int    start    =    pos.getIndex()    -    1;    int    pos    =    pos.getIndex()    -    1;    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
259	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);  }  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(c.length()  ==  0)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(c.length()  ==  0)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);  }	  if(c.length()    ==    0)    {    int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    }    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
260	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(c.length()  ==  0)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(c.length()  ==  0)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(index);  }	  if(c.length()    ==    0)    {    int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    }    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
261	[BUG]  [BUGGY]  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(index);  [CE]  variable  index  is  already  defined  in  method  applyPattern(String)  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(index);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(index);	          pos.setIndex(readArgumentIndex(pattern,    pos));    int    index    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  applyPattern(String)	82	None	replace
262	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  0));  stripCustom.append(END_FE).append(index);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  0));  stripCustom.append(END_FE).append(index);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  0));  stripCustom.append(END_FE).append(index);	          pos.setIndex(readArgumentIndex(pattern,    pos));    int    index    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	82	None	replace
263	[BUG]  [BUGGY]  int  start  =  it.getIndex()  +  1;  char[]  c  =  it.toCharArray();  [CE]  cannot  find  symbol  it  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  it.getIndex()  +  1;  char[]  c  =  it.toCharArray();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  it.getIndex()  +  1;  char[]  c  =  it.toCharArray();	  int    start    =    pos.getIndex()    +    1;    char[]    c    =    it.toCharArray();    	non-compiled	[CE]  cannot  find  symbol  it	91	None	replace
264	[BUG]  [BUGGY]  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.setIndex(readArgumentIndex(pattern,  pos));  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.setIndex(readArgumentIndex(pattern,  pos));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.setIndex(readArgumentIndex(pattern,  pos));	          pos.setIndex(readArgumentIndex(pattern,    pos));    int    index    =    readArgumentIndex(pattern,    pos);    stripCustom.setIndex(readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
265	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	add	                pos.setIndex(readArgumentIndex(pattern,        pos));        stripCustom.append(END_FE).append(fmtCount);        pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(START_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));	  	compilable	  [FE]  IllegalArgumentException  	52	5	add
266	[BUG]  [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	                pos.setIndex(readArgumentIndex(pattern,        pos));        stripCustom.append(END_FE).append(fmtCount);        pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(START_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));	  	compilable	  [FE]  IllegalArgumentException  	52	5	add
267	[BUG]  [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  0));  stripCustom.append(END_FE).append(fmtCount);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]      IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  0));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	                pos.setIndex(readArgumentIndex(pattern,        pos));        stripCustom.append(END_FE).append(fmtCount);        pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(START_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  0));  stripCustom.append(END_FE).append(fmtCount);	  	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	52	None	add
268	[BUG]  [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FMT).append(fmtCount);  [CE]  cannot  find  symbol  END_FMT  [FE]        IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FMT).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	                pos.setIndex(readArgumentIndex(pattern,        pos));        stripCustom.append(END_FE).append(fmtCount);        pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(START_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FMT).append(fmtCount);	  	non-compiled	[CE]  cannot  find  symbol  END_FMT	52	None	add
269	[BUG]  [BUGGY]  Integer  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  start  =  pos.getIndex();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  Integer  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  start  =  pos.getIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	Integer  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  start  =  pos.getIndex();	  int    start    =    pos.getIndex()    +    1;    char[]    c    =    pattern.toCharArray();    start    =    pos.getIndex()    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	103	None	replace
270	[BUG]  [BUGGY]  int  start  =  pos.getIndex();  Integer  pos  =  pos.getIndex();  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  pos.getIndex();  Integer  pos  =  pos.getIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pos.getIndex();  Integer  pos  =  pos.getIndex();	  int    start    =    pos.getIndex()    -    1;    Integer    pos    =    pos.getIndex()    -    1;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	23	None	replace
271	[BUG]  [BUGGY]  int  start  =  pattern.getIndex()  -  1;  Integer  pos  =  pattern.getIndex()  -  1;  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  pattern.getIndex()  -  1;  Integer  pos  =  pattern.getIndex()  -  1;  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pattern.getIndex()  -  1;  Integer  pos  =  pattern.getIndex()  -  1;	  int    start    =    pos.getIndex()    -    1;    Integer    pos    =    pos.getIndex()    -    1;    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
272	[BUG]  [BUGGY]  int  start  =  pattern.getIndex();  Integer  pos  =  pattern.getIndex();  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  pattern.getIndex();  Integer  pos  =  pattern.getIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pattern.getIndex();  Integer  pos  =  pattern.getIndex();	  int    start    =    pos.getIndex()    -    1;    Integer    pos    =    pos.getIndex()    -    1;    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
273	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  next(pos),  fmtCount);  [CE]  ')'  expected  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  next(pos),  fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  next(pos),  fmtCount);	  pos.setIndex(readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  ')'  expected	62	None	replace
274	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  next(pos  +  1));  [CE]  ')'  expected  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  next(pos  +  1));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  next(pos  +  1));	  pos.setIndex(readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  ')'  expected	62	None	replace
275	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(1));  stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(1));  stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  next(1));  stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);	  int    i    =    readArgumentIndex(pattern,    next(0));    stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	112	None	replace
276	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(index);  [CE]  cannot  find  symbol  index  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(index);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(index);	  int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(QUOTE).append(i);    	non-compiled	[CE]  cannot  find  symbol  index	86	None	replace
277	[BUG]  [BUGGY]  int  start  =  pattern.getIndex()  -  1;  int  fmtCount  =  pattern.getIndex();  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  pattern.getIndex()  -  1;  int  fmtCount  =  pattern.getIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pattern.getIndex()  -  1;  int  fmtCount  =  pattern.getIndex();	  int    start    =    pos.getIndex()    -    1;    int    fmtCount    =    pos.getIndex()    -    1;    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
278	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(i);  [CE]  cannot  find  symbol  start  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(i);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(i);	  char    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  cannot  find  symbol  start	35	None	replace
279	[BUG]  [BUGGY]  Char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  Char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	Char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);	  char    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
280	[BUG]  [BUGGY]  Int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  Int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	Int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);	          int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    Int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
281	[BUG]  [BUGGY]  char[]  c  =  iterator.toPattern();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  iterator.toPattern();  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char[]  c  =  iterator.toPattern();	  char[]    c    =    iterator.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	111	None	replace
282	[BUG]  [BUGGY]  Char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(FIELD_QUOTE).append(END_FE);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  Char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(FIELD_QUOTE).append(END_FE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	Char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(FIELD_QUOTE).append(END_FE);	  char    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(FIELD_QUOTE).append(END_FE);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
283	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  start);  stripCustom.append(FIELD_QUOTE).append(END_FE);  [CE]  cannot  find  symbol  start  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  start);  stripCustom.append(FIELD_QUOTE).append(END_FE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  start);  stripCustom.append(FIELD_QUOTE).append(END_FE);	  char    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(FIELD_QUOTE).append(END_FE);    	non-compiled	[CE]  cannot  find  symbol  start	34	None	replace
284	[BUG]  [BUGGY]  Integer  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  int  start  =  pos.getIndex();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  Integer  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  int  start  =  pos.getIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	Integer  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  int  start  =  pos.getIndex();	  int    start    =    pos.getIndex()    -    1;    char[]    c    =    pattern.toCharArray();    int    start    =    pos.getIndex()    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	108	None	replace
285	[BUG]  [BUGGY]  pos.setIndex(readQuotedString(pattern,  pos));  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readQuotedString(pattern,  pos));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readQuotedString(pattern,  pos));	          pos.setIndex(readArgumentIndex(pattern,    pos));    int    index    =    readArgumentIndex(pattern,    pos);    stripCustom.setIndex(readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
286	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  pos.getIndex());  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  pos.getIndex());  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  pos.getIndex());	  char    i    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	66	None	replace
287	[BUG]  [BUGGY]  Char  i  =  readArgumentIndex(pattern,  pos);  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  Char  i  =  readArgumentIndex(pattern,  pos);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	Char  i  =  readArgumentIndex(pattern,  pos);	  char    i    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
288	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(QUOTE).append(i);  [CE]  cannot  find  symbol  start  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(QUOTE).append(i);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(QUOTE).append(i);	          int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    char    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  cannot  find  symbol  start	58	None	replace
289	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  pos)+  1;  [CE]  cannot  find  symbol  start  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  pos)+  1;  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  pos)+  1;	          int    i    =    readArgumentIndex(pattern,    pos);    int    i    =    readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  cannot  find  symbol  start	75	None	replace
290	[BUG]  [BUGGY]  char[]  c  =  getFormat(pattern.toString());  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  getFormat(pattern.toString());  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char[]  c  =  getFormat(pattern.toString());	  char[]    c    =    pattern.toString();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	45	None	replace
291	[BUG]  [BUGGY]  if(c.length()  >  0)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(c.length()  >  0)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(c.length()  >  0)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(index);  }	  if(c.length()    >    0)    {    int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    }    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
292	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(1));  stripCustom.append(END_FE).append(i);  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(1));  stripCustom.append(END_FE).append(i);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  next(1));  stripCustom.append(END_FE).append(i);	  int    i    =    readArgumentIndex(pattern,    next(0));    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	36	None	replace
293	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  1,  0));  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  1,  0));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  1,  0));	  pos.setIndex(readArgumentIndex(pattern,    0));    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	63	None	replace
294	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  2,  0));  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  2,  0));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  2,  0));	  pos.setIndex(readArgumentIndex(pattern,    0));    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	63	None	replace
295	[BUG]  [BUGGY]  char  start  =  pos.getIndex();  Integer  start  =  pos.getIndex();  [CE]  possible  loss  of  precision  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  start  =  pos.getIndex();  Integer  start  =  pos.getIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  start  =  pos.getIndex();  Integer  start  =  pos.getIndex();	  int    start    =    pos.getIndex()    -    1;    Integer    start    =    pos.getIndex()    -    1;    	non-compiled	[CE]  possible  loss  of  precision	95	None	replace
296	[BUG]  [BUGGY]  pos  =  readArgumentIndex(pattern,  0);  stripCustom.append(END_FE).append(c);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos  =  readArgumentIndex(pattern,  0);  stripCustom.append(END_FE).append(c);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos  =  readArgumentIndex(pattern,  0);  stripCustom.append(END_FE).append(c);	          pos.setIndex(readArgumentIndex(pattern,    pos));    int    pos    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(c);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	114	None	replace
297	[BUG]  [BUGGY]  char[]  c  =  getFormat(pattern.toPattern());  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  getFormat(pattern.toPattern());  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char[]  c  =  getFormat(pattern.toPattern());	  char[]    c    =    pattern.toPattern();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	44	None	replace
298	[BUG]  [BUGGY]  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);  [CE]  variable  index  is  already  defined  in  method  applyPattern(String)  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);	          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    int    index    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  applyPattern(String)	98	None	replace
299	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos),  END_FE);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos),  END_FE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(pos),  END_FE);	  int    i    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	65	None	replace
300	[BUG]  [BUGGY]  Char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_PATTERN);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  Char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_PATTERN);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	Char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(FIELD_PATTERN);	  char    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(FIELD_PATTERN);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
301	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  pos);  StripCustom.append(END_FE).append(i);  [CE]  cannot  find  symbol  StripCustom  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  pos);  StripCustom.append(END_FE).append(i);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  pos);  StripCustom.append(END_FE).append(i);	          int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    int    i    =    readArgumentIndex(pattern,    pos);    StripCustom.append(END_FE).append(i);    	non-compiled	[CE]  cannot  find  symbol  StripCustom	59	None	replace
302	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  fmtCount);  Int  i  =  readArgumentIndex(pattern,  pos);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  fmtCount);  Int  i  =  readArgumentIndex(pattern,  pos);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  fmtCount);  Int  i  =  readArgumentIndex(pattern,  pos);	          int    i    =    readArgumentIndex(pattern,    pos);    Int    i    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	73	None	replace
303	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  start);  stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);  [CE]  cannot  find  symbol  start  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  start);  stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  start);  stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);	  char    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);    	non-compiled	[CE]  cannot  find  symbol  start	32	None	replace
304	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(index);  }  [CE]  cannot  find  symbol  index  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(stripCustom!=  null)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(stripCustom!=  null)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(index);  }	  if(stripCustom!=    null)    {    int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    }    	non-compiled	[CE]  cannot  find  symbol  index	117	None	replace
305	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  c,  pos);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  c,  pos);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  c,  pos);	  int    i    =    readArgumentIndex(c,    pos);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	64	None	replace
306	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(c,  pos,  fmtCount);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(c,  pos,  fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(c,  pos,  fmtCount);	  int    i    =    readArgumentIndex(c,    pos);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	64	None	replace
307	[BUG]  [BUGGY]  int  start  =  this.pattern.getIndex()  +  1;  [CE]  pattern  has  private  access  in  MessageFormat  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  this.pattern.getIndex()  +  1;  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  this.pattern.getIndex()  +  1;	  int    start    =    this.pattern.getIndex();    	non-compiled	[CE]  pattern  has  private  access  in  MessageFormat	8	None	replace
308	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  fmtCount  +  1;  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	add	int  start  =  fmtCount  +  1;	  int    start    =    fmtCount.getIndex();    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	97	1	replace
309	[BUG]  [BUGGY]  int  start  =  fmtCount  +  1;  [FE]  junit.framework.AssertionFailedError:  registry  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  fmtCount  +  1;  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  fmtCount  +  1;	  int    start    =    fmtCount.getIndex();    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	97	1	replace
310	[BUG]  [BUGGY]  int  start  =  fmtCount.getIndex()  +  1;  [CE]  int  cannot  be  dereferenced  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  fmtCount.getIndex()  +  1;  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  fmtCount.getIndex()  +  1;	  int    start    =    fmtCount.getIndex();    	non-compiled	[CE]  int  cannot  be  dereferenced	97	None	replace
311	[BUG]  [BUGGY]  int  start  =  it.getIndex()  -  1;  char[]  c  =  it.toCharArray();  [CE]  cannot  find  symbol  it  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  it.getIndex()  -  1;  char[]  c  =  it.toCharArray();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  it.getIndex()  -  1;  char[]  c  =  it.toCharArray();	  int    start    =    pos.getIndex()    -    1;    char[]    c    =    it.toCharArray();    	non-compiled	[CE]  cannot  find  symbol  it	94	None	replace
312	[BUG]  [BUGGY]  char[]  c  =  toPattern.toCharArray()  +  1;  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  toPattern.toCharArray()  +  1;  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char[]  c  =  toPattern.toCharArray()  +  1;	  char[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	43	None	replace
313	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  0),  stripCustom.append(END_FE).append(fmtCount);  [CE]  ')'  expected  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  0),  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  0),  stripCustom.append(END_FE).append(fmtCount);	  pos.setIndex(readArgumentIndex(pattern,    0));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  ')'  expected	26	None	replace
314	[BUG]  [BUGGY]  int  start  =  pattern.getIndex()  +  1;  char[]  c  =  pattern.toCharArray();  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  pattern.getIndex()  +  1;  char[]  c  =  pattern.toCharArray();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pattern.getIndex()  +  1;  char[]  c  =  pattern.toCharArray();	  int    start    =    pos.getIndex()    +    1;    char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
315	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount  +  1);  [CE]  ')'  expected  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount  +  1);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount  +  1);	  pos.setIndex(readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  ')'  expected	25	None	replace
316	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  0));  StripCustom.append(END_FE).append(fmtCount);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  0));  StripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  0));  StripCustom.append(END_FE).append(fmtCount);	          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,    pos));    StripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	99	None	replace
317	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount));  StripCustom.append(END_FE).append(fmtCount);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount));  StripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  fmtCount));  StripCustom.append(END_FE).append(fmtCount);	          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,    pos));    StripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	99	None	replace
318	[BUG]  [BUGGY]  float  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(FIELD_FE).append(FIELD_QUOTE);  [CE]  cannot  find  symbol  FIELD_QUOTE  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  float  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(FIELD_FE).append(FIELD_QUOTE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	float  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(FIELD_FE).append(FIELD_QUOTE);	  int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(FIELD_FE).append(FIELD_QUOTE);    	non-compiled	[CE]  cannot  find  symbol  FIELD_QUOTE	101	None	replace
319	[BUG]  [BUGGY]  if(pos.getIndex()  >=  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.setIndex(readArgumentIndex(pattern,  pos);  }  [CE]  ')'  expected  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(pos.getIndex()  >=  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.setIndex(readArgumentIndex(pattern,  pos);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(pos.getIndex()  >=  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.setIndex(readArgumentIndex(pattern,  pos);  }	          pos.setIndex(readArgumentIndex(pattern,    pos));    int    index    =    readArgumentIndex(pattern,    pos);    stripCustom.setIndex(readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  ')'  expected	83	None	replace
320	[BUG]  [BUGGY]  if(pos.getIndex()  >=  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  }  else  {  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.setIndex(readArgumentIndex(pattern,  [CE]  '.class'  expected  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(pos.getIndex()  >=  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  }  else  {  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.setIndex(readArgumentIndex(pattern,  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(pos.getIndex()  >=  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  }  else  {  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.setIndex(readArgumentIndex(pattern,	          pos.setIndex(readArgumentIndex(pattern,    pos));    int    index    =    readArgumentIndex(pattern,    pos);    stripCustom.setIndex(readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  '.class'  expected	83	None	replace
321	[BUG]  [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  0));  pos.setIndex(readArgumentIndex(pattern,  pos));  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]    IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  0));  pos.setIndex(readArgumentIndex(pattern,  pos));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	                pos.setIndex(readArgumentIndex(pattern,        pos));        pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,  0));  pos.setIndex(readArgumentIndex(pattern,  pos));	  	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	38	None	add
322	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  }  [CE]  cannot  find  symbol  start  [FE]    IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(stripCustom!=  null)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(stripCustom!=  null)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  }	          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  cannot  find  symbol  start	51	None	replace
323	[BUG]  [BUGGY]  if(c  ==  null)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  }  [CE]  cannot  find  symbol  start  [FE]      IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(c  ==  null)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(c  ==  null)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  }	          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  cannot  find  symbol  start	51	None	replace
324	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  int  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(FIELD_QUOTE);  }  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(stripCustom!=  null)  {  int  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(FIELD_QUOTE);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(stripCustom!=  null)  {  int  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(FIELD_QUOTE);  }	  if(stripCustom!=    null)    {    int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(FIELD_QUOTE);    }    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	88	None	replace
325	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  int  i  =  readArgumentIndex(pattern,  0);  stripCustom.append(END_FE).append(FIELD_QUOTE);  }  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(stripCustom!=  null)  {  int  i  =  readArgumentIndex(pattern,  0);  stripCustom.append(END_FE).append(FIELD_QUOTE);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(stripCustom!=  null)  {  int  i  =  readArgumentIndex(pattern,  0);  stripCustom.append(END_FE).append(FIELD_QUOTE);  }	  if(stripCustom!=    null)    {    int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(FIELD_QUOTE);    }    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	88	None	replace
326	[BUG]  [BUGGY]  if(index!=  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  }  [CE]  cannot  find  symbol  index  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(index!=  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(index!=  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  }	          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    int    index    =    readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  cannot  find  symbol  index	55	None	replace
327	[BUG]  [BUGGY]  if(index  >=  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  }  [CE]  cannot  find  symbol  index  [FE]                IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(index  >=  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  }	          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    int    index    =    readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  cannot  find  symbol  index	55	None	replace
328	[BUG]  [BUGGY]  if(index!=  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  int  index  =  readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount  [CE]  ';'  expected  [FE]                  IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(index!=  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  int  index  =  readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(index!=  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  int  index  =  readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount	          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    int    index    =    readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  ';'  expected	55	None	replace
329	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(FIELD_QUOTE);  [CE]  cannot  find  symbol  FIELD_QUOTE  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(FIELD_QUOTE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(FIELD_QUOTE);	  int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(QUOTE).append(i);    	non-compiled	[CE]  cannot  find  symbol  FIELD_QUOTE	86	None	replace
330	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(START_FE).append(i);  [CE]  cannot  find  symbol  start  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(START_FE).append(i);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(START_FE).append(i);	          int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    	non-compiled	[CE]  cannot  find  symbol  start	56	None	replace
331	[BUG]  [BUGGY]  char[]  c  =  this.toPattern.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  this.toPattern.toCharArray();  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char[]  c  =  this.toPattern.toCharArray();	  char[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	43	None	replace
332	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  i));  [CE]  cannot  find  symbol  i  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  i));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  i));	          pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,    p));    	non-compiled	[CE]  cannot  find  symbol  i	41	None	replace
333	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount,  -1));  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount,  -1));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  fmtCount,  -1));	  pos.setIndex(readArgumentIndex(pattern,    fmtCount));    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	96	None	replace
334	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount,  i));  [CE]  cannot  find  symbol  i  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount,  i));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  fmtCount,  i));	  pos.setIndex(readArgumentIndex(pattern,    fmtCount));    	non-compiled	[CE]  cannot  find  symbol  i	96	None	replace
335	[BUG]  [BUGGY]  char[]  c  =  this.pattern.toString();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  this.pattern.toString();  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char[]  c  =  this.pattern.toString();	  char[]    c    =    pattern.toString();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	45	None	replace
336	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(fmtCount);  [CE]  ')'  expected  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(fmtCount);	  pos.setIndex(readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  ')'  expected	25	None	replace
337	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  index  +  1));  stripCustom.append(END_FE).append(fmtCount);  [CE]  cannot  find  symbol  index  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  index  +  1));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  index  +  1));  stripCustom.append(END_FE).append(fmtCount);	  pos.setIndex(readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  cannot  find  symbol  index	25	None	replace
338	[BUG]  [BUGGY]  int  start  =  p.getStartIndex();  [CE]  cannot  find  symbol  p  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  p.getStartIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  p.getStartIndex();	  int    start    =    c.getStartIndex();    	non-compiled	[CE]  cannot  find  symbol  p	13	None	replace
339	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  pos.getIndex());  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  pos.getIndex());  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  pos.getIndex());	          int    i    =    readArgumentIndex(pattern,    pos);    int    i    =    readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	75	None	replace
340	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  int  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(i);  }  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(stripCustom!=  null)  {  int  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(i);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(stripCustom!=  null)  {  int  i  =  readArgumentIndex(pattern,  fmtCount);  stripCustom.append(END_FE).append(i);  }	  if(stripCustom!=    null)    {    int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    }    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	117	None	replace
341	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  START_FE));  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  START_FE));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  START_FE));	  pos.setIndex(readArgumentIndex(pattern,    index));    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	60	None	replace
342	[BUG]  [BUGGY]  if(index  >=  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount  [CE]  ')'  expected  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(index  >=  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount	          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    int    index    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  ')'  expected	98	None	replace
343	[BUG]  [BUGGY]  if(index  <  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount  [CE]  ')'  expected  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(index  <  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(index  <  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount);  int  index  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount	          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    int    index    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  ')'  expected	98	None	replace
344	[BUG]  [BUGGY]  Char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  Char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	Char  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);	  char    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(FIELD_QUOTE).append(FIELD_QUOTE);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
345	[BUG]  [BUGGY]  if(pos.getIndex()  >=  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  }  else  {  pos.setIndex(readArgumentIndex(pattern,  pos));  }  [CE]  cannot  find  symbol  start  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(pos.getIndex()  >=  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  }  else  {  pos.setIndex(readArgumentIndex(pattern,  pos));  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(pos.getIndex()  >=  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  }  else  {  pos.setIndex(readArgumentIndex(pattern,  pos));  }	          pos.setIndex(readArgumentIndex(pattern,    pos));    int    pos.setIndex(readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  cannot  find  symbol  start	40	None	replace
346	[BUG]  [BUGGY]  if(pos.getIndex()  >=  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  }  else  {  int  pos.setIndex(readArgumentIndex(pattern,  pos));  }  [CE]  ';'  expected  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(pos.getIndex()  >=  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  }  else  {  int  pos.setIndex(readArgumentIndex(pattern,  pos));  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(pos.getIndex()  >=  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  }  else  {  int  pos.setIndex(readArgumentIndex(pattern,  pos));  }	          pos.setIndex(readArgumentIndex(pattern,    pos));    int    pos.setIndex(readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  ';'  expected	40	None	replace
347	[BUG]  [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(FINAL_FE).append(fmtCount);  [CE]  cannot  find  symbol  FINAL_FE  [FE]    IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(FINAL_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	                pos.setIndex(readArgumentIndex(pattern,        pos));        stripCustom.append(END_FE).append(fmtCount);        pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(START_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(FINAL_FE).append(fmtCount);	  	non-compiled	[CE]  cannot  find  symbol  FINAL_FE	52	None	add
348	[BUG]  [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(FIELD_FE).append(fmtCount);  [CE]  cannot  find  symbol  FIELD_FE  [FE]      IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(START_FE).append(fmtCount);  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(FIELD_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	                pos.setIndex(readArgumentIndex(pattern,        pos));        stripCustom.append(END_FE).append(fmtCount);        pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(START_FE).append(fmtCount);    pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(FIELD_FE).append(fmtCount);	  	non-compiled	[CE]  cannot  find  symbol  FIELD_FE	52	None	add
349	[BUG]  [BUGGY]  pos.setIndex(readStringIndex(pattern,  END_FE));  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readStringIndex(pattern,  END_FE));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readStringIndex(pattern,  END_FE));	  pos.setIndex(readStringIndex(pattern,    pos));    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
350	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(c,  pos,  END_FE);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(c,  pos,  END_FE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(c,  pos,  END_FE);	  int    i    =    readArgumentIndex(c,    pos);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	64	None	replace
351	[BUG]  [BUGGY]  int  start  =  pos.getIndex();  String[]  c  =  pattern.toCharArray();  int  start  =  pos.getIndex();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  pos.getIndex();  String[]  c  =  pattern.toCharArray();  int  start  =  pos.getIndex();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pos.getIndex();  String[]  c  =  pattern.toCharArray();  int  start  =  pos.getIndex();	  int    start    =    pos.getIndex()    -    1;    char[]    c    =    pattern.toCharArray();    int    start    =    pos.getIndex()    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	108	None	replace
352	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(c);  [CE]  cannot  find  symbol  start  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(c);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(c);	  int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(FIELD_PATTERN);    	non-compiled	[CE]  cannot  find  symbol  start	68	None	replace
353	[BUG]  [BUGGY]  int  start  =  pattern.getIndex()  +  1;  char[]  c  =  it.toCharArray();  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  pattern.getIndex()  +  1;  char[]  c  =  it.toCharArray();  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pattern.getIndex()  +  1;  char[]  c  =  it.toCharArray();	  int    start    =    pos.getIndex()    +    1;    char[]    c    =    it.toCharArray();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
354	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount,  -1));  stripCustom.append(END_FE).append(fmtCount);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount,  -1));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  fmtCount,  -1));  stripCustom.append(END_FE).append(fmtCount);	  pos.setIndex(readArgumentIndex(pattern,    fmtCount));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	109	None	replace
355	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount,  i));  stripCustom.append(END_FE).append(fmtCount);  [CE]  cannot  find  symbol  i  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  fmtCount,  i));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  fmtCount,  i));  stripCustom.append(END_FE).append(fmtCount);	  pos.setIndex(readArgumentIndex(pattern,    fmtCount));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  cannot  find  symbol  i	109	None	replace
356	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  end);  stripCustom.append(END_FE).append(FIELD_PATTERN);  [CE]  cannot  find  symbol  end  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  end);  stripCustom.append(END_FE).append(FIELD_PATTERN);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  end);  stripCustom.append(END_FE).append(FIELD_PATTERN);	  int    i    =    readArgumentIndex(pattern,    start);    stripCustom.append(END_FE).append(FIELD_PATTERN);    	non-compiled	[CE]  cannot  find  symbol  end	71	None	replace
357	[BUG]  [BUGGY]  char[]  c  =  this.pattern.toPattern();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  this.pattern.toPattern();  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char[]  c  =  this.pattern.toPattern();	  char[]    c    =    pattern.toPattern();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	44	None	replace
358	[BUG]  [BUGGY]  char[]  c  =  path.toPattern();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  path.toPattern();  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char[]  c  =  path.toPattern();	  char[]    c    =    pattern.toPattern();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	44	None	replace
359	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  0,  c.length));  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  0,  c.length));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  0,  c.length));	  pos.setIndex(readArgumentIndex(pattern,    0));    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	63	None	replace
360	[BUG]  [BUGGY]  int  start  =  pattern.getIndex()  +  1;  int  pos  =  pattern.getIndex()  +  1;  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  pattern.getIndex()  +  1;  int  pos  =  pattern.getIndex()  +  1;  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pattern.getIndex()  +  1;  int  pos  =  pattern.getIndex()  +  1;	  int    start    =    pos.getIndex()    +    1;    int    pos    =    pos.getIndex()    +    1;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
361	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos.getIndex()  -  1));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos.getIndex()  -  1));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(pos.getIndex()  -  1));	  int    i    =    readArgumentIndex(pattern,    next(0));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	78	None	replace
362	[BUG]  [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(pos));  StripCustom.append(END_FE).append(i);  [CE]  possible  loss  of  precision  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  char  i  =  readArgumentIndex(pattern,  next(pos));  StripCustom.append(END_FE).append(i);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	char  i  =  readArgumentIndex(pattern,  next(pos));  StripCustom.append(END_FE).append(i);	          int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(i);    int    i    =    readArgumentIndex(pattern,    next(pos));    StripCustom.append(END_FE).append(i);    	non-compiled	[CE]  possible  loss  of  precision	92	None	replace
363	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  -1,  fmtCount));  stripCustom.append(END_FE).append(fmtCount);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  -1,  fmtCount));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  -1,  fmtCount));  stripCustom.append(END_FE).append(fmtCount);	  pos.setIndex(readArgumentIndex(pattern,    -1));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	80	None	replace
364	[BUG]  [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount  +  1);  [CE]  cannot  find  symbol  start  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount  +  1);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	pos.setIndex(readArgumentIndex(pattern,  pos));  stripCustom.append(END_FE).append(fmtCount  +  1);	          pos.setIndex(readArgumentIndex(pattern,    pos));    stripCustom.append(END_FE).append(fmtCount);    int    pos    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  cannot  find  symbol  start	54	None	replace
365	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(indent);  [CE]  cannot  find  symbol  indent  [FE]            IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(indent);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(indent);	  int    i    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  cannot  find  symbol  indent	87	None	replace
366	[BUG]  [BUGGY]  int  i  =  getArgumentIndex(pattern,  pos.getIndex());  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  getArgumentIndex(pattern,  pos.getIndex());  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  getArgumentIndex(pattern,  pos.getIndex());	  int    i    =    getArgumentIndex(pattern,    pos);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
367	[BUG]  [BUGGY]  if(i  >  0)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  }  [CE]  cannot  find  symbol  i  [FE]        IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(i  >  0)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(i  >  0)  {  int  i  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(i);  }	  if(c.length()    >    0)    {    int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(END_FE).append(i);    }    	non-compiled	[CE]  cannot  find  symbol  i	116	None	replace
368	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	add	int  start  =  readArgumentIndex(pattern,  next(pos));	  int    i    =    readArgumentIndex(pattern,    next(pos));    	compilable	  [FE]  IllegalArgumentException  	65	5	replace
369	[BUG]  [BUGGY]  int  start  =  readArgumentIndex(pattern,  next(pos));  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  readArgumentIndex(pattern,  next(pos));	  int    i    =    readArgumentIndex(pattern,    next(pos));    	compilable	  [FE]  IllegalArgumentException  	65	5	replace
370	[BUG]  [BUGGY]  int  start  =  pattern.getIndex()  -  1;  Integer  start  =  pattern.getIndex()  -  1;  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  start  =  pattern.getIndex()  -  1;  Integer  start  =  pattern.getIndex()  -  1;  [BUGGY]      int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  start  =  pattern.getIndex()  -  1;  Integer  start  =  pattern.getIndex()  -  1;	  int    start    =    pos.getIndex()    -    1;    Integer    start    =    pos.getIndex()    -    1;    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
371	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(FIELD_PATTERN  +  1);  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(FIELD_PATTERN  +  1);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(END_FE).append(FIELD_PATTERN  +  1);	  int    i    =    readArgumentIndex(pattern,    next(0));    stripCustom.append(END_FE).append(FIELD_PATTERN);    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	70	None	replace
372	[BUG]  [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(FIELD_FE).append(FIELD_QUOTE);  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(FIELD_FE).append(FIELD_QUOTE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	int  i  =  readArgumentIndex(pattern,  next(0));  stripCustom.append(FIELD_FE).append(FIELD_QUOTE);	  int    i    =    readArgumentIndex(pattern,    pos);    stripCustom.append(FIELD_FE).append(FIELD_QUOTE);    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	101	None	replace
373	[BUG]  [BUGGY]  if(pos.getIndex()  >=  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  pos));  }  [CE]  cannot  find  symbol  start  [FE]    IllegalArgumentException    [CONTEXT]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);      [BUGGY]  if(pos.getIndex()  >=  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  pos));  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	166	166	1	replace	if(pos.getIndex()  >=  0)  {  pos.setIndex(readArgumentIndex(pattern,  pos));  pos.setIndex(readArgumentIndex(pattern,  pos));  }	          pos.setIndex(readArgumentIndex(pattern,    pos));    pos.setIndex(readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  cannot  find  symbol  start	39	None	replace
