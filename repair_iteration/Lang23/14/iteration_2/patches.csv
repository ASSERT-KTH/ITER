bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(index    <    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	164	None	replace
2	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(index    <    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	164	None	replace
3	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(index    <    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	164	None	replace
4	[BUG]  [BUGGY]  AppendQuotedString(pattern,  start,  stripCustom);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  AppendQuotedString(pattern,  start,  stripCustom);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	AppendQuotedString(pattern,  start,  stripCustom);	  if(index    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    AppendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  cannot  find  symbol	175	None	replace
5	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos.getIndex());  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos.getIndex());  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos.getIndex());  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }	  if(index    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    AppendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	175	None	replace
6	[BUG]  [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	  if(index!=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	68	None	replace
7	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    >    0)    {    seekNonWs(pattern,    index);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	42	None	replace
8	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    >    0)    {    seekNonWs(pattern,    index);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	42	None	replace
9	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    >    0)    {    seekNonWs(pattern,    index);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	42	None	replace
10	[BUG]  [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }	  if(start    >    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    stripCustom.append(QUOTE);    }    	non-compiled	[CE]  orphaned  default	126	None	replace
11	[BUG]  [BUGGY]  if(index  ==  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }	  if(start    >    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    stripCustom.append(QUOTE);    }    	non-compiled	[CE]  orphaned  default	126	None	replace
12	[BUG]  [BUGGY]  if(index!=  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [CE]  orphaned  default  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }	  if(start    >    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    stripCustom.append(QUOTE);    }    	non-compiled	[CE]  orphaned  default	126	None	replace
13	[BUG]  [BUGGY]  if(start  <  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  <  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(END_FE);  }	  if(index    <    0)    {    if(c[pos.getIndex()    -    1]    ==    QUOTE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	52	None	replace
14	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  fmtCount)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0  ||  start  >  fmtCount)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  <  0  ||  start  >  fmtCount)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(END_FE);  }	  if(index    <    0)    {    if(c[pos.getIndex()    -    1]    ==    QUOTE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	52	None	replace
15	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  index);  }	  if(index    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    index);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	151	None	replace
16	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  index);  }	  if(index    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    index);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	151	None	replace
17	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  index);  }	  if(index    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    index);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	151	None	replace
18	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  index);  }	  if(index    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    index);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	151	None	replace
19	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index);  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index);  stripCustom.append(END_FE).append(index);	  int    fmtCount    =    readArgumentIndex(pattern,    start);    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	32	None	replace
20	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(index);	  int    fmtCount    =    readArgumentIndex(pattern,    start);    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	32	None	replace
21	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start,  pos,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start,  pos,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  start,  pos,  stripCustom);  }	  if(index    >=    0)    {    seekNonWs(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	3	None	replace
22	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  pos,  stripCustom);  }	  if(index    >=    0)    {    seekNonWs(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	3	None	replace
23	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start,  index,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start,  index,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  start,  index,  stripCustom);  }	  if(index    >=    0)    {    seekNonWs(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	3	None	replace
24	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start,  fmtCount,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start,  fmtCount,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  start,  fmtCount,  stripCustom);  }	  if(index    >=    0)    {    seekNonWs(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	3	None	replace
25	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  index,  foundDescriptions.length);  }  [CE]  cannot  find  symbol  length  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  index,  foundDescriptions.length);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  index,  foundDescriptions.length);  }	  if(index    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	103	None	replace
26	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  index,  foundDescriptions.length);  }  [CE]  cannot  find  symbol  length  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  index,  foundDescriptions.length);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  index,  foundDescriptions.length);  }	  if(index    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	103	None	replace
27	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  index,  foundFormats.length);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  index,  foundFormats.length);  }	  if(index    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	103	None	replace
28	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  index,  foundFormats.length);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  index,  foundFormats.length);  }	  if(index    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	103	None	replace
29	[BUG]  [BUGGY]  if(start  <  0)  {  if(c[pos.getIndex()  -  1]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0)  {  if(c[pos.getIndex()  -  1]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  <  0)  {  if(c[pos.getIndex()  -  1]  ==  END_FE)  {  stripCustom.append(END_FE);  }	  if(index    <    0)    {    if(c[pos.getIndex()    -    1]    ==    END_FE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	90	None	replace
30	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  fmtCount)  {  if(c[pos.getIndex()  -  1]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0  ||  start  >  fmtCount)  {  if(c[pos.getIndex()  -  1]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  <  0  ||  start  >  fmtCount)  {  if(c[pos.getIndex()  -  1]  ==  END_FE)  {  stripCustom.append(END_FE);  }	  if(index    <    0)    {    if(c[pos.getIndex()    -    1]    ==    END_FE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	90	None	replace
31	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    >=    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	1	None	replace
32	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    >=    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	1	None	replace
33	[BUG]  [BUGGY]  if(index!=  0)  {  seekNonWs(pattern,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  seekNonWs(pattern,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  0)  {  seekNonWs(pattern,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    >=    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	1	None	replace
34	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundDescriptions.length);  }  [CE]  cannot  find  symbol  length  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundDescriptions.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundDescriptions.length);  }	  if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	69	None	replace
35	[BUG]  [BUGGY]  if(index  ==  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	  if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	69	None	replace
36	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  origFormats,  fmtCount,  index);  }  [CE]  cannot  find  symbol  origFormats  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  origFormats,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  origFormats,  fmtCount,  index);  }	  if(index!=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  origFormats	136	None	replace
37	[BUG]  [BUGGY]  if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }  [CE]  cannot  find  symbol  findFormats  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }	  if(index!=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  findFormats	136	None	replace
38	[BUG]  [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }	  if(index    <    0)    {    if(c[pos.getIndex()    -    1]    ==    QUOTE)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	165	None	replace
39	[BUG]  [BUGGY]  if(index  <  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }	  if(index    <    0)    {    if(c[pos.getIndex()    -    1]    ==    QUOTE)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	165	None	replace
40	[BUG]  [BUGGY]  if(index  ==  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }	  if(index    <    0)    {    if(c[pos.getIndex()    -    1]    ==    QUOTE)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	165	None	replace
41	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(fmtCount);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	64	1	add
42	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(fmtCount);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	64	1	add
43	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  if(start  >  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  if(start  >  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(fmtCount);    }    if(start  >  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }	  	non-compiled	[CE]  orphaned  default	64	None	add
44	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  if(start  >  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  if(start  >  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(fmtCount);    }    if(start  >  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }	  	non-compiled	[CE]  orphaned  default	64	None	add
45	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(fmtCount);    }    if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	64	4	add
46	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(fmtCount);    }    if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	64	4	add
47	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  if(start  >  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  if(start  >  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(fmtCount);    }    if(start  >  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount	  	non-compiled	[CE]  ')'  expected	64	None	add
48	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index    >=    -1)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	168	None	replace
49	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index    >=    -1)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	168	None	replace
50	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  pos,  stripCustom);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  start,  pos,  stripCustom);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  start,  pos,  stripCustom);	  appendQuotedString(pattern,    pos,    stripCustom);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	4	None	replace
51	[BUG]  [BUGGY]  appendQuotedString(stripCustom,  pos,  pattern);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(stripCustom,  pos,  pattern);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(stripCustom,  pos,  pattern);	  appendQuotedString(pattern,    pos,    stripCustom);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	4	None	replace
52	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  start,  stripCustom);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  pos,  start,  stripCustom);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  pos,  start,  stripCustom);	  appendQuotedString(pattern,    pos,    stripCustom);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	4	None	replace
53	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  for(int  i  =  start;  i  <  fmtCount;  i++)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  for(int  i  =  start;  i  <  fmtCount;  i++)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos);  }  for(int  i  =  start;  i  <  fmtCount;  i++)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    for(int    i    =    start;    i    <    fmtCount;    i++)    {    if(start    <    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  orphaned  default	45	None	replace
54	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    for(int    i    =    start;    i    <    fmtCount;    i++)    {    if(start    <    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  orphaned  default	45	None	replace
55	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  if(start  <  0)  {  seekNonWs(pattern,  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  if(start  <  0)  {  seekNonWs(pattern,  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  if(start  <  0)  {  seekNonWs(pattern,	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    for(int    i    =    start;    i    <    fmtCount;    i++)    {    if(start    <    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  ')'  expected	45	None	replace
56	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  if(index    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	144	None	replace
57	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  if(index    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	144	None	replace
58	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos,  stripCustom);  }	  if(index    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	49	None	replace
59	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions.length);  }  [CE]  cannot  find  symbol  length  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions.length);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions.length);  }	  if(fmtCount    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	96	None	replace
60	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start        <        0)        {        seekNonWs(pattern,        pos);        }        if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	47	1	add
61	[BUG]  [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        <        0)        {        seekNonWs(pattern,        pos);        }        if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	47	1	add
62	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start        <        0)        {        seekNonWs(pattern,        pos);        }        if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	47	1	add
63	[BUG]  [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        <        0)        {        seekNonWs(pattern,        pos);        }        if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	47	1	add
64	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start        <        0)        {        seekNonWs(pattern,        pos);        }        if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	47	1	add
65	[BUG]  [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        <        0)        {        seekNonWs(pattern,        pos);        }        if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	47	1	add
66	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start        <        0)        {        seekNonWs(pattern,        pos);        }        if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	47	1	add
67	[BUG]  [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        <        0)        {        seekNonWs(pattern,        pos);        }        if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	47	1	add
68	[BUG]  [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  >>  0)  {  seekNonWs(pattern,  pos);  }  [CE]  incompatible  types  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  >>  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        <        0)        {        seekNonWs(pattern,        pos);        }        if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  >>  0)  {  seekNonWs(pattern,  pos);  }	  	non-compiled	[CE]  incompatible  types	47	None	add
69	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start,  next(pos));  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start,  next(pos));  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  start,  next(pos));  stripCustom.append(END_FE).append(index);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	72	None	replace
70	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  next(pos));  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  next(pos));  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  next(pos));  stripCustom.append(END_FE).append(index);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	72	None	replace
71	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  start);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  pos,  start);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  pos,  start);	  appendQuotedString(pattern,    start,    pos);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	29	None	replace
72	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  index,  pos);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  start,  index,  pos);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  start,  index,  pos);	  appendQuotedString(pattern,    start,    pos);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	29	None	replace
73	[BUG]  [BUGGY]  appendQuotedString(pattern,  index,  start,  pos);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  index,  start,  pos);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  index,  start,  pos);	  appendQuotedString(pattern,    start,    pos);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	29	None	replace
74	[BUG]  [BUGGY]  AppendQuotedString(pattern,  pos,  start);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  AppendQuotedString(pattern,  pos,  start);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	AppendQuotedString(pattern,  pos,  start);	  appendQuotedString(pattern,    start,    pos);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
75	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start);  }  else  {  seekNonWs(pattern,  index);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start);  }  else  {  seekNonWs(pattern,  index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start);  }  else  {  seekNonWs(pattern,  index);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start    <    0)    {    seekNonWs(pattern,    p);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	124	None	replace
76	[BUG]  [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  index);  }  else  {  seekNonWs(pattern,  index);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  index);  }  else  {  seekNonWs(pattern,  index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  <  0)  {  seekNonWs(pattern,  index);  }  else  {  seekNonWs(pattern,  index);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start    <    0)    {    seekNonWs(pattern,    p);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	124	None	replace
77	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	40	None	replace
78	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats);  }	  if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	153	None	replace
79	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions);  }	  if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	153	None	replace
80	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE,  start,  fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions);  }  [CE]  no  suitable  method  found  for  append(char,int,int)  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE,  start,  fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(END_FE,  start,  fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions);  }	  if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	non-compiled	[CE]  no  suitable  method  found  for  append(char,int,int)	153	None	replace
81	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE,  start,  fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats);  }  [CE]  no  suitable  method  found  for  append(char,int,int)  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE,  start,  fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(END_FE,  start,  fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats);  }	  if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	non-compiled	[CE]  no  suitable  method  found  for  append(char,int,int)	153	None	replace
82	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayStoreException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  ==  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  if(index!=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	78	5	replace
83	[BUG]  [BUGGY]  if(index  ==  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayStoreException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  if(index!=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	78	5	replace
84	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      ArrayStoreException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  >=  0)  {  stripCustom.append(END_FE);  }	  if(index!=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	78	5	replace
85	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      ArrayStoreException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(END_FE);  }	  if(index!=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	78	5	replace
86	[BUG]  [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  if(index    >    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	9	None	replace
87	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  if(index    >    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	9	None	replace
88	[BUG]  [BUGGY]  if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	93	None	replace
89	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  ==  0)  {  seekNonWs(pattern,  pos);  }  if(start  ==  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start    ==    0)    {    seekNonWs(pattern,    pos);    }    if(start  ==  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	13	1	add
90	[BUG]  [BUGGY]  if(start  ==  0)  {  seekNonWs(pattern,  pos);  }  if(start  ==  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  ==  0)  {  seekNonWs(pattern,  pos);  }  if(start  ==  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    ==    0)    {    seekNonWs(pattern,    pos);    }    if(start  ==  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	13	1	add
91	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  ==  0)  {  seekNonWs(pattern,  pos);  }  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start    ==    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	13	1	add
92	[BUG]  [BUGGY]  if(start  ==  0)  {  seekNonWs(pattern,  pos);  }  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  ==  0)  {  seekNonWs(pattern,  pos);  }  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    ==    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	13	1	add
93	[BUG]  [BUGGY]  if(start  ==  0)  {  seekNonWs(pattern,  pos);  }  if(start  ==  0)  {  seekNonWs(pattern,  pos);  continue;  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  ==  0)  {  seekNonWs(pattern,  pos);  }  if(start  ==  0)  {  seekNonWs(pattern,  pos);  continue;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    ==    0)    {    seekNonWs(pattern,    pos);    }    if(start  ==  0)  {  seekNonWs(pattern,  pos);  continue;	  	non-compiled	[CE]  orphaned  default	13	None	add
94	[BUG]  [BUGGY]  if(start  ==  0)  {  seekNonWs(pattern,  pos);  }  Integer  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  ==  0)  {  seekNonWs(pattern,  pos);  }  Integer  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    ==    0)    {    seekNonWs(pattern,    pos);    }    Integer  fmtCount  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	13	None	add
95	[BUG]  [BUGGY]  if(index  >=  -1)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }	  if(start    >=    -1)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    stripCustom.append(QUOTE);    }    	non-compiled	[CE]  orphaned  default	127	None	replace
96	[BUG]  [BUGGY]  if(index!=  -1)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [CE]  orphaned  default  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }	  if(start    >=    -1)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    stripCustom.append(QUOTE);    }    	non-compiled	[CE]  orphaned  default	127	None	replace
97	[BUG]  [BUGGY]  if(start  >=  -1)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [CE]  orphaned  default  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  >=  -1)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  >=  -1)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }	  if(start    >=    -1)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    stripCustom.append(QUOTE);    }    	non-compiled	[CE]  orphaned  default	127	None	replace
98	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	61	1	add
99	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	61	1	add
100	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	61	1	add
101	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	61	1	add
102	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  cannot  find  symbol  formatDescription  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  stripCustom.append(END_FE).append(formatDescription);  }	  	non-compiled	[CE]  cannot  find  symbol  formatDescription	61	None	add
103	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  cannot  find  symbol  formatDescription  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(formatDescription);  }	  	non-compiled	[CE]  cannot  find  symbol  formatDescription	61	None	add
104	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  p);  }  [CE]  cannot  find  symbol  p  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  p);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  p);  }	  	non-compiled	[CE]  cannot  find  symbol  p	61	None	add
105	[BUG]  [BUGGY]  if(index  <  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start    >    0)    {    seekNonWs(pattern,    pos);    System.arraycopy(c,    start,    fmtCount,    readArgumentIndex(pattern,    pos));    break;    	non-compiled	[CE]  orphaned  default	162	None	replace
106	[BUG]  [BUGGY]  if(index  >=  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start    >    0)    {    seekNonWs(pattern,    pos);    System.arraycopy(c,    start,    fmtCount,    readArgumentIndex(pattern,    pos));    break;    	non-compiled	[CE]  orphaned  default	162	None	replace
107	[BUG]  [BUGGY]  if(index  <  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  break;  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  break;  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start    >    0)    {    seekNonWs(pattern,    pos);    System.arraycopy(c,    start,    fmtCount,    readArgumentIndex(pattern,    pos));    break;    	non-compiled	[CE]  orphaned  default	162	None	replace
108	[BUG]  [BUGGY]  if(index  ==  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start    >    0)    {    seekNonWs(pattern,    pos);    System.arraycopy(c,    start,    fmtCount,    readArgumentIndex(pattern,    pos));    break;    	non-compiled	[CE]  orphaned  default	162	None	replace
109	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	157	None	replace
110	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	157	None	replace
111	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	157	None	replace
112	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  >=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  if(index    >=    -1)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	compilable	  [FE]  IllegalArgumentException  	135	5	replace
113	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  IllegalArgumentException  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  if(index    >=    -1)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	compilable	  [FE]  IllegalArgumentException  	135	5	replace
114	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  origFormats,  fmtCount,  index);  }  [CE]  cannot  find  symbol  origFormats  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  origFormats,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  origFormats,  fmtCount,  index);  }	  if(index    >=    -1)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  origFormats	135	None	replace
115	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index!=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  if(index    >=    -1)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	compilable	  [FE]  IllegalArgumentException  	135	5	replace
116	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  IllegalArgumentException  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  if(index    >=    -1)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	compilable	  [FE]  IllegalArgumentException  	135	5	replace
117	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start    <    0)    {    seekNonWs(pattern,    pos);    System.arraycopy(c,    start,    fmtCount,    readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	179	None	replace
118	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start    <    0)    {    seekNonWs(pattern,    pos);    System.arraycopy(c,    start,    fmtCount,    readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	179	None	replace
119	[BUG]  [BUGGY]  if(index  <  0)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start    <    0)    {    seekNonWs(pattern,    pos);    System.arraycopy(c,    start,    fmtCount,    readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  orphaned  default	179	None	replace
120	[BUG]  [BUGGY]  if(index  <  0)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start    <    0)    {    seekNonWs(pattern,    pos);    System.arraycopy(c,    start,    fmtCount,    readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  orphaned  default	179	None	replace
121	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  pos,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    >=    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	176	None	replace
122	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  start,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    >=    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	176	None	replace
123	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start,  fmtCount);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start,  fmtCount);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  start,  fmtCount);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    >=    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	176	None	replace
124	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }	  if(index!=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    origFormats,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	8	None	replace
125	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }	  if(index!=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    origFormats,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	8	None	replace
126	[BUG]  [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }	  if(index!=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    origFormats,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	8	None	replace
127	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }	  if(index!=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    origFormats,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	8	None	replace
128	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  pos,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    >=    0)    {    seekNonWs(pattern,    start);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	132	None	replace
129	[BUG]  [BUGGY]  if(pos  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(pos  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(pos  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(i    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	167	None	replace
130	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start);  }  else  {  searchNonWs(pattern,  index);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start);  }  else  {  searchNonWs(pattern,  index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  start);  }  else  {  searchNonWs(pattern,  index);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start    >    0)    {    searchNonWs(pattern,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	128	None	replace
131	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start);  }  else  {  searchNonWs(pattern,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start);  }  else  {  searchNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  start);  }  else  {  searchNonWs(pattern,  pos);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start    >    0)    {    searchNonWs(pattern,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	128	None	replace
132	[BUG]  [BUGGY]  if(start  <  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  <  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }	  if(index    <    0)    {    if(c[pos.getIndex()    -    1]    ==    QUOTE)    {    stripCustom.append(QUOTE);    }    	non-compiled	[CE]  orphaned  default	80	None	replace
133	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  fmtCount)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0  ||  start  >  fmtCount)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  <  0  ||  start  >  fmtCount)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }	  if(index    <    0)    {    if(c[pos.getIndex()    -    1]    ==    QUOTE)    {    stripCustom.append(QUOTE);    }    	non-compiled	[CE]  orphaned  default	80	None	replace
134	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(fmtCount  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(fmtCount  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(fmtCount  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	120	None	replace
135	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(fmtCount  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(fmtCount  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(fmtCount  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	120	None	replace
136	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	120	None	replace
137	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  if(index    <    0)    {    seekNonWs(pattern,    index);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	23	None	replace
138	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  if(index    <    0)    {    seekNonWs(pattern,    index);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	23	None	replace
139	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  index,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  index,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  index,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  if(index    <    0)    {    seekNonWs(pattern,    index);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	23	None	replace
140	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  index  +  1);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  index  +  1);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  index  +  1);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  if(index    <    0)    {    seekNonWs(pattern,    index);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	23	None	replace
141	[BUG]  [BUGGY]  appendQuotedString(stripCustom,  start,  pos);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(stripCustom,  start,  pos);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(stripCustom,  start,  pos);	  appendQuotedString(stripCustom,    pos);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	31	None	replace
142	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index    >    0)    {    seekNonWs(pattern,    pos);    }    if(index  >  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	121	1	add
143	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >    0)    {    seekNonWs(pattern,    pos);    }    if(index  >  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	121	1	add
144	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  int  index  =  readArgumentIndex(pattern,  pos);  [CE]  variable  index  is  already  defined  in  method  applyPattern(String)  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  int  index  =  readArgumentIndex(pattern,  pos);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >    0)    {    seekNonWs(pattern,    pos);    }    int  index  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  variable  index  is  already  defined  in  method  applyPattern(String)	121	None	add
145	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  if(index  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  stripCustom,  0,  fmtCount);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index    >    0)    {    seekNonWs(pattern,    pos);    }    if(index  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  stripCustom,  0,  fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	121	3	add
146	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  if(index  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  stripCustom,  0,  fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  if(index  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  stripCustom,  0,  fmtCount);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >    0)    {    seekNonWs(pattern,    pos);    }    if(index  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  stripCustom,  0,  fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	121	3	add
147	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  stripCustom,  0,  fmtCount);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index    >    0)    {    seekNonWs(pattern,    pos);    }    if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  stripCustom,  0,  fmtCount);  }	  	compilable	  [FE]  ArrayStoreException  	121	5	add
148	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  stripCustom,  0,  fmtCount);  }  [FE]  ArrayStoreException  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  stripCustom,  0,  fmtCount);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >    0)    {    seekNonWs(pattern,    pos);    }    if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  stripCustom,  0,  fmtCount);  }	  	compilable	  [FE]  ArrayStoreException  	121	5	add
149	[BUG]  [BUGGY]  if(index  <  0)  {  if(start  >  0)  {  seekNonWs(pattern,  start);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  if(start  >  0)  {  seekNonWs(pattern,  start);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  if(start  >  0)  {  seekNonWs(pattern,  start);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    	non-compiled	[CE]  orphaned  default	67	None	replace
150	[BUG]  [BUGGY]  stripCustom.append(DUMMY_PATTERN,  start,  index,  true);  break;  [CE]  no  suitable  method  found  for  append(String,int,int,boolean)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  stripCustom.append(DUMMY_PATTERN,  start,  index,  true);  break;  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	stripCustom.append(DUMMY_PATTERN,  start,  index,  true);  break;	  if(index    <    0)    {    stripCustom.append(DUMMY_PATTERN,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  no  suitable  method  found  for  append(String,int,int,boolean)	92	None	replace
151	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN,  start,  stripCustom,  false);  break;  }  [CE]  no  suitable  method  found  for  append(String,int,StringBuilder,boolean)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN,  start,  stripCustom,  false);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN,  start,  stripCustom,  false);  break;  }	  if(index    <    0)    {    stripCustom.append(DUMMY_PATTERN,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  no  suitable  method  found  for  append(String,int,StringBuilder,boolean)	92	None	replace
152	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN,  start,  index,  true);  break;  }  [CE]  no  suitable  method  found  for  append(String,int,int,boolean)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN,  start,  index,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN,  start,  index,  true);  break;  }	  if(index    <    0)    {    stripCustom.append(DUMMY_PATTERN,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  no  suitable  method  found  for  append(String,int,int,boolean)	92	None	replace
153	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN,  start,  pos,  true);  break;  }  [CE]  no  suitable  method  found  for  append(String,int,ParsePosition,boolean)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN,  start,  pos,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN,  start,  pos,  true);  break;  }	  if(index    <    0)    {    stripCustom.append(DUMMY_PATTERN,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  no  suitable  method  found  for  append(String,int,ParsePosition,boolean)	92	None	replace
154	[BUG]  [BUGGY]  if(index  <  0)  {  if(c[pos.getIndex()]!=  QUOTE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  if(c[pos.getIndex()]!=  QUOTE)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  if(c[pos.getIndex()]!=  QUOTE)  {  stripCustom.append(END_FE);  }	  if(start    <    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	51	None	replace
155	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(fmtCount    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	174	None	replace
156	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  fmtCount);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  fmtCount);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start,  fmtCount);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(fmtCount    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	174	None	replace
157	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  >=  0)  {  seekNonWs(pattern,  pos);  }	  if(index    <    0)    {    seekNonWs(pattern,    pos);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	26	1	replace
158	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  pos);  }	  if(index    <    0)    {    seekNonWs(pattern,    pos);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	26	1	replace
159	[BUG]  [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }	  if(index    ==    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	100	None	replace
160	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(start,  index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(start,  index);	  int    fmtCount    =    readArgumentIndex(pattern,    start);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	141	None	replace
161	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  start);	  int    fmtCount    =    readArgumentIndex(pattern,    start);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	141	None	replace
162	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    <    0)    {    seekNonWs(pattern,    start);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	146	None	replace
163	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  start,  index,  stripCustom);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  pos,  start,  index,  stripCustom);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  pos,  start,  index,  stripCustom);	  appendQuotedString(pattern,    start,    index,    stripCustom);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	55	None	replace
164	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  index,  stripCustom,  fmtCount);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  start,  index,  stripCustom,  fmtCount);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  start,  index,  stripCustom,  fmtCount);	  appendQuotedString(pattern,    start,    index,    stripCustom);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	55	None	replace
165	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  start);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  start);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  pos,  stripCustom,  start);	  appendQuotedString(pattern,    start,    index,    stripCustom);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	55	None	replace
166	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  index,  stripCustom,  true);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  start,  index,  stripCustom,  true);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  start,  index,  stripCustom,  true);	  appendQuotedString(pattern,    start,    index,    stripCustom);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	55	None	replace
167	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  start);  }	  if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	17	None	replace
168	[BUG]  [BUGGY]  if(start  >=  0)  {  seekNonWs(pattern,  index);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  >=  0)  {  seekNonWs(pattern,  index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  >=  0)  {  seekNonWs(pattern,  index);  }	  if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	17	None	replace
169	[BUG]  [BUGGY]  if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }  [CE]  cannot  find  symbol  format  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    format,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  format	159	None	replace
170	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }  [CE]  cannot  find  symbol  format  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    format,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  format	159	None	replace
171	[BUG]  [BUGGY]  if(index  ==  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }  [CE]  cannot  find  symbol  format  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    format,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  format	159	None	replace
172	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start);  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  start);  stripCustom.append(END_FE).append(index);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos);    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	73	None	replace
173	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  stripCustom.append(END_FE).append(index);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos);    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	73	None	replace
174	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start  +  1);  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start  +  1);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  start  +  1);  stripCustom.append(END_FE).append(index);	  int    fmtCount    =    readArgumentIndex(pattern,    start    +    1);    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	109	None	replace
175	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +  1,  index);  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +  1,  index);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start  +  1,  index);  stripCustom.append(END_FE).append(index);	  int    fmtCount    =    readArgumentIndex(pattern,    start    +    1);    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	109	None	replace
176	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index  +  1);  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index  +  1);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index  +  1);  stripCustom.append(END_FE).append(index);	  int    fmtCount    =    readArgumentIndex(pattern,    start    +    1);    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	109	None	replace
177	[BUG]  [BUGGY]  appendQuotedString(pt,  start,  stripCustom);  [CE]  cannot  find  symbol  pt  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pt,  start,  stripCustom);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pt,  start,  stripCustom);	  appendQuotedString(pt,    pos,    stripCustom);    	non-compiled	[CE]  cannot  find  symbol  pt	142	None	replace
178	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  end);  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  end);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  end);  stripCustom.append(END_FE).append(index);	  int    fmtCount    =    readArgumentIndex(pattern,    end);    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	34	None	replace
179	[BUG]  [BUGGY]  if(start  ==  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  ==  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  ==  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(END_FE);  }	  if(index    >=    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	149	None	replace
180	[BUG]  [BUGGY]  if(start!=  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start!=  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start!=  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(END_FE);  }	  if(index    >=    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	149	None	replace
181	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start    >    0)    {    seekNonWs(pattern,    pos);    System.arraycopy(c,    start,    fmtCount,    readArgumentIndex(pattern,    pos));    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	160	None	replace
182	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  index));  }  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  index));  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  index));  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start    >    0)    {    seekNonWs(pattern,    pos);    System.arraycopy(c,    start,    fmtCount,    readArgumentIndex(pattern,    pos));    }    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	160	None	replace
183	[BUG]  [BUGGY]  if(index  >=  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start    >    0)    {    seekNonWs(pattern,    pos);    System.arraycopy(c,    start,    fmtCount,    readArgumentIndex(pattern,    pos));    }    	non-compiled	[CE]  orphaned  default	160	None	replace
184	[BUG]  [BUGGY]  if(index  <  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start    >    0)    {    seekNonWs(pattern,    pos);    System.arraycopy(c,    start,    fmtCount,    readArgumentIndex(pattern,    pos));    }    	non-compiled	[CE]  orphaned  default	160	None	replace
185	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  next(pos));  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  next(pos));	  int    fmtCount    =    readArgumentIndex(pattern,    start,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	85	None	replace
186	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  next(pos));  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  next(pos));	  int    fmtCount    =    readArgumentIndex(pattern,    start,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	85	None	replace
187	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index,  next(pos));  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index,  next(pos));	  int    fmtCount    =    readArgumentIndex(pattern,    start,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	85	None	replace
188	[BUG]  [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()  -  start]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()  -  start]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  if(c[pos.getIndex()  -  start]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }	  if(index    <    0)    {    if(c[pos.getIndex()    -    start]    ==    QUOTE)    {    stripCustom.append(QUOTE);    }    	non-compiled	[CE]  orphaned  default	81	None	replace
189	[BUG]  [BUGGY]  if(index  <  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(QUOTE);  }  [CE]  ']'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(QUOTE);  }	  if(index    <    0)    {    if(c[pos.getIndex()    -    start]    ==    QUOTE)    {    stripCustom.append(QUOTE);    }    	non-compiled	[CE]  ']'  expected	81	None	replace
190	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(fmtCount);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(fmtCount);	  char    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	35	None	replace
191	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  appendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	appendQuotedString(pattern,    pos,    stripCustom,    true);    appendQuotedString(pattern,  pos,  stripCustom,  true);	  	compilable	  [FE]  IllegalArgumentException  	53	5	add
192	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  appendQuotedString(pattern,  pos,  stripCustom,  true);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  appendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,    pos,    stripCustom,    true);    appendQuotedString(pattern,  pos,  stripCustom,  true);	  	compilable	  [FE]  IllegalArgumentException  	53	5	add
193	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  AppendQuotedString(pattern,  pos,  stripCustom,  true);  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  AppendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,    pos,    stripCustom,    true);    AppendQuotedString(pattern,  pos,  stripCustom,  true);	  	non-compiled	[CE]  cannot  find  symbol	53	None	add
194	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  appendQuotedString(pattern,  pos,  stripCustom,  false);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	appendQuotedString(pattern,    pos,    stripCustom,    true);    appendQuotedString(pattern,  pos,  stripCustom,  false);	  	compilable	  [FE]  IllegalArgumentException  	53	5	add
195	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  appendQuotedString(pattern,  pos,  stripCustom,  false);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  appendQuotedString(pattern,  pos,  stripCustom,  false);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,    pos,    stripCustom,    true);    appendQuotedString(pattern,  pos,  stripCustom,  false);	  	compilable	  [FE]  IllegalArgumentException  	53	5	add
196	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  applyQuotedString(pattern,  pos,  stripCustom,  true);  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  applyQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,    pos,    stripCustom,    true);    applyQuotedString(pattern,  pos,  stripCustom,  true);	  	non-compiled	[CE]  cannot  find  symbol	53	None	add
197	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(index    <    0)    {    seekNonWs(pattern,    start);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	106	None	replace
198	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  stripCustom,  true);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  stripCustom,  true);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start,  stripCustom,  true);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(index    <    0)    {    seekNonWs(pattern,    start);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	106	None	replace
199	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CE]  unreachable  statement  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  pos,  stripCustom,  true);  break;	  appendQuotedString(pattern,    start,    stripCustom,    true);    break;    	non-compiled	[CE]  unreachable  statement	91	None	replace
200	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  index,  stripCustom,  true);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  start,  index,  stripCustom,  true);  break;  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  start,  index,  stripCustom,  true);  break;	  appendQuotedString(pattern,    start,    stripCustom,    true);    break;    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	91	None	replace
201	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  index,  true);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  start,  index,  true);  break;  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  start,  index,  true);  break;	  appendQuotedString(pattern,    start,    stripCustom,    true);    break;    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	91	None	replace
202	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  start,  stripCustom,  false);  break;	  appendQuotedString(pattern,    start,    stripCustom,    true);    break;    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	91	None	replace
203	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats);  }	  if(index    >=    -1)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	154	None	replace
204	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions);  }	  if(index    >=    -1)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	154	None	replace
205	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats);  }	  if(index    >=    -1)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	154	None	replace
206	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  >=  0)  {  stripCustom.append(QUOTE);  }	  if(index    >=    -1)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	compilable	  [FE]  IllegalArgumentException  	154	5	replace
207	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE);  }  [FE]  IllegalArgumentException  [FE]                              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(QUOTE);  }	  if(index    >=    -1)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	compilable	  [FE]  IllegalArgumentException  	154	5	replace
208	[BUG]  [BUGGY]  if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    origFormats,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	115	None	replace
209	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    origFormats,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	115	None	replace
210	[BUG]  [BUGGY]  if(index  ==  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    origFormats,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	115	None	replace
211	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  start,  index);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  pos,  start,  index);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  pos,  start,  index);	  appendQuotedString(pattern,    start,    index);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	11	None	replace
212	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  index,  fmtCount);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  start,  index,  fmtCount);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  start,  index,  fmtCount);	  appendQuotedString(pattern,    start,    index);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	11	None	replace
213	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  fmtCount,  index);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  start,  fmtCount,  index);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  start,  fmtCount,  index);	  appendQuotedString(pattern,    start,    index);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	11	None	replace
214	[BUG]  [BUGGY]  if(index  >=  0)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  orphaned  default	48	None	replace
215	[BUG]  [BUGGY]  if(index  >=  0)  {  if(start  <  0)  {  seekNonWs(pattern,  start);  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  if(start  <  0)  {  seekNonWs(pattern,  start);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  if(start  <  0)  {  seekNonWs(pattern,  start);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  orphaned  default	48	None	replace
216	[BUG]  [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index!=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	82	None	replace
217	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    <    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	173	None	replace
218	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    <    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	173	None	replace
219	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  stripCustom,  false);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  start,  stripCustom,  false);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  start,  stripCustom,  false);	  appendQuotedString(pattern,    start,    stripCustom,    true);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	59	None	replace
220	[BUG]  [BUGGY]  if(index  <  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  stripCustom.append(END_FE);  }	  if(start    <    0)    {    if(c[pos.getIndex()]    ==    END_FE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	88	None	replace
221	[BUG]  [BUGGY]  if(index!=  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(END_FE);  }	  if(start    >=    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	147	None	replace
222	[BUG]  [BUGGY]  if(start  >  0)  {  seekNonWs(pattern,  index);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  >  0)  {  seekNonWs(pattern,  index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  >  0)  {  seekNonWs(pattern,  index);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start    >    0)    {    seekNonWs(pattern,    p);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	130	None	replace
223	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start);  }  else  {  seekNonWs(pattern,  index);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start);  }  else  {  seekNonWs(pattern,  index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  start);  }  else  {  seekNonWs(pattern,  index);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start    >    0)    {    seekNonWs(pattern,    p);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	130	None	replace
224	[BUG]  [BUGGY]  appendQuotedString(ptr,  start,  stripCustom);  [CE]  cannot  find  symbol  ptr  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(ptr,  start,  stripCustom);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(ptr,  start,  stripCustom);	  appendQuotedString(ptr,    pos,    stripCustom);    	non-compiled	[CE]  cannot  find  symbol  ptr	143	None	replace
225	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  index);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start,  index);  }	  if(index    >    0)    {    seekNonWs(pattern,    start);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	15	None	replace
226	[BUG]  [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  start);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  start);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  seekNonWs(pattern,  start);  }	  if(index    >    0)    {    seekNonWs(pattern,    start);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	15	None	replace
227	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(fmtCount    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	163	None	replace
228	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  AppendQuotedString(pattern,  start,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  AppendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  AppendQuotedString(pattern,  start,  pos);  }	  if(index    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    AppendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	166	None	replace
229	[BUG]  [BUGGY]  AppendQuotedString(pattern,  start,  index);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  AppendQuotedString(pattern,  start,  index);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	AppendQuotedString(pattern,  start,  index);	  if(index    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    AppendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
230	[BUG]  [BUGGY]  AppendQuotedString(pattern,  start,  pos);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  AppendQuotedString(pattern,  start,  pos);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	AppendQuotedString(pattern,  start,  pos);	  if(index    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    AppendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
231	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index);  stripCustom.append(END_FE).append(fmtCount);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index);  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index);  stripCustom.append(END_FE).append(fmtCount);	  int    fmtCount    =    readArgumentIndex(pattern,    start);    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	19	None	replace
232	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +  1);  stripCustom.append(END_FE).append(fmtCount);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +  1);  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start  +  1);  stripCustom.append(END_FE).append(fmtCount);	  int    fmtCount    =    readArgumentIndex(pattern,    start);    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	19	None	replace
233	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start);  }  else  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start);  }  else  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start);  }  else  {  stripCustom.append(END_FE).append(formatDescription);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start    <    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    <    0)    {    stripCustom.append(END_FE).append(formatDescription);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	46	None	replace
234	[BUG]  [BUGGY]  if(index  <  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  stripCustom.append(QUOTE);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  stripCustom.append(QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  stripCustom.append(QUOTE);  }	  if(start    <    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    stripCustom.append(QUOTE);    }    	non-compiled	[CE]  orphaned  default	79	None	replace
235	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index!=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	7	5	replace
236	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	7	5	replace
237	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  ==  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    	compilable	  [FE]  ArrayStoreException  	7	5	replace
238	[BUG]  [BUGGY]  if(index  ==  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  ArrayStoreException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    	compilable	  [FE]  ArrayStoreException  	7	5	replace
239	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index    <    0)    {    seekNonWs(pattern,    pos);    }    if(index  <  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	25	1	add
240	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    <    0)    {    seekNonWs(pattern,    pos);    }    if(index  <  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	25	1	add
241	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  for(int  i  =  start;  i  <  fmtCount;  i++)  {  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  for(int  i  =  start;  i  <  fmtCount;  i++)  {  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    <    0)    {    seekNonWs(pattern,    pos);    }    for(int  i  =  start;  i  <  fmtCount;  i++)  {  if(index  <  0)  {  seekNonWs(pattern,  pos);  }	  	non-compiled	[CE]  orphaned  default	25	None	add
242	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  if(index  <  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  stripCustom,  0,  fmtCount);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index    <    0)    {    seekNonWs(pattern,    pos);    }    if(index  <  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  stripCustom,  0,  fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	25	1	add
243	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  if(index  <  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  stripCustom,  0,  fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  if(index  <  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  stripCustom,  0,  fmtCount);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    <    0)    {    seekNonWs(pattern,    pos);    }    if(index  <  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  stripCustom,  0,  fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	25	1	add
244	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  int  index  =  readArgumentIndex(pattern,  pos);  [CE]  variable  index  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  int  index  =  readArgumentIndex(pattern,  pos);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    <    0)    {    seekNonWs(pattern,    pos);    }    int  index  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  variable  index  is  already  defined  in  method  applyPattern(String)	25	None	add
245	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    origFormats,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	76	None	replace
246	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    origFormats,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	76	None	replace
247	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  start  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    index    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	36	None	replace
248	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  1,  stripCustom.length);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  1,  stripCustom.length);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  1,  stripCustom.length);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    index    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	36	None	replace
249	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    	compilable	  [FE]  ArrayStoreException  	114	5	replace
250	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  ArrayStoreException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    	compilable	  [FE]  ArrayStoreException  	114	5	replace
251	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    	compilable	  [FE]  ArrayStoreException  	114	5	replace
252	[BUG]  [BUGGY]  if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  ArrayStoreException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    	compilable	  [FE]  ArrayStoreException  	114	5	replace
253	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  ==  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	114	3	replace
254	[BUG]  [BUGGY]  if(index  ==  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	114	3	replace
255	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  stripCustom,  true);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  stripCustom,  true);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos,  stripCustom,  true);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(index    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	58	None	replace
256	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(index    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	58	None	replace
257	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  stripCustom,  true);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos,  stripCustom,  true);  }	  if(index    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	58	None	replace
258	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  index);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos),    start);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	87	None	replace
259	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(index),  start);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(index),  start);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(index),  start);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos),    start);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	87	None	replace
260	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start        <        0)        {        seekNonWs(pattern,        pos);        }        if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	43	1	add
261	[BUG]  [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        <        0)        {        seekNonWs(pattern,        pos);        }        if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	43	1	add
262	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start        <        0)        {        seekNonWs(pattern,        pos);        }        if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	43	1	add
263	[BUG]  [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        <        0)        {        seekNonWs(pattern,        pos);        }        if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	43	1	add
264	[BUG]  [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  cannot  find  symbol  formatDescription  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        <        0)        {        seekNonWs(pattern,        pos);        }        if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  stripCustom.append(END_FE).append(formatDescription);  }	  	non-compiled	[CE]  cannot  find  symbol  formatDescription	43	None	add
265	[BUG]  [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  p);  }  [CE]  cannot  find  symbol  p  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  p);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        <        0)        {        seekNonWs(pattern,        pos);        }        if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  p);  }	  	non-compiled	[CE]  cannot  find  symbol  p	43	None	add
266	[BUG]  [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        <        0)        {        seekNonWs(pattern,        pos);        }        if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {	  	non-compiled	[CE]  orphaned  default	43	None	add
267	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos.getIndex());  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos.getIndex());  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  pos.getIndex());  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }	  if(index    >=    0)    {    seekNonWs(pattern,    pos);    }    else    {    AppendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	177	None	replace
268	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(c,  start);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(c,  start);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(c,  start);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index    >    0)    {    seekNonWs(c,    start);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	102	None	replace
269	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index    >    0)    {    seekNonWs(c,    start);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	102	None	replace
270	[BUG]  [BUGGY]  if(index  ==  0)  {  seekNonWs(c,  start);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  seekNonWs(c,  start);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  seekNonWs(c,  start);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index    >    0)    {    seekNonWs(c,    start);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	102	None	replace
271	[BUG]  [BUGGY]  if(index!=  0)  {  seekNonWs(c,  start);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  seekNonWs(c,  start);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  0)  {  seekNonWs(c,  start);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index    >    0)    {    seekNonWs(c,    start);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	102	None	replace
272	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }  [CE]  cannot  find  symbol  format  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }	  if(index    >=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    format,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  format	155	None	replace
273	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }  [CE]  cannot  find  symbol  format  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }	  if(index    >=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    format,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  format	155	None	replace
274	[BUG]  [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  if(index    >    0)    {    seekNonWs(pattern,    index);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	12	None	replace
275	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  if(index    >    0)    {    seekNonWs(pattern,    index);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	12	None	replace
276	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	compilable	  [FE]  IllegalArgumentException  	116	5	replace
277	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  IllegalArgumentException  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	compilable	  [FE]  IllegalArgumentException  	116	5	replace
278	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  origFormats,  fmtCount,  index);  }  [CE]  cannot  find  symbol  origFormats  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  origFormats,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  origFormats,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  origFormats	116	None	replace
279	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index!=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	compilable	  [FE]  ArrayStoreException  	116	5	replace
280	[BUG]  [BUGGY]  if(index!=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  ArrayStoreException  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	compilable	  [FE]  ArrayStoreException  	116	5	replace
281	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  index);  }	  if(index    <    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    index);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	22	None	replace
282	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  index);  }	  if(index    <    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    index);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	22	None	replace
283	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  start);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  start);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos,  start);  }  else  {  appendQuotedString(pattern,  start,  index);  }	  if(index    <    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    index);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	22	None	replace
284	[BUG]  [BUGGY]  if(index  ==  0)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start    <    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  orphaned  default	44	None	replace
285	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  pos,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    >    0)    {    seekNonWs(pattern,    start);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	119	None	replace
286	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  AppendQuotedString(pattern,  start,  pos);  }  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  AppendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  AppendQuotedString(pattern,  start,  pos);  }	  if(index    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    AppendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
287	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  fmtCount,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  fmtCount,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start,  fmtCount,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    <    0)    {    seekNonWs(pattern,    start,    stripCustom);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	50	None	replace
288	[BUG]  [BUGGY]  if(index  <  0  ||  index  >  fmtCount)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0  ||  index  >  fmtCount)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0  ||  index  >  fmtCount)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }	  if(start    <    0    ||    start    >    fmtCount)    {    if(c[pos.getIndex()]    ==    END_FE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	89	None	replace
289	[BUG]  [BUGGY]  if(index  <  0  ||  start  >  fmtCount)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0  ||  start  >  fmtCount)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0  ||  start  >  fmtCount)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }	  if(start    <    0    ||    start    >    fmtCount)    {    if(c[pos.getIndex()]    ==    END_FE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	89	None	replace
290	[BUG]  [BUGGY]  if(fmtCount  <  0  ||  start  >  fmtCount)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(fmtCount  <  0  ||  start  >  fmtCount)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(fmtCount  <  0  ||  start  >  fmtCount)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }	  if(start    <    0    ||    start    >    fmtCount)    {    if(c[pos.getIndex()]    ==    END_FE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	89	None	replace
291	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  fmtCount  -  1)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0  ||  start  >  fmtCount  -  1)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  <  0  ||  start  >  fmtCount  -  1)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }	  if(start    <    0    ||    start    >    fmtCount)    {    if(c[pos.getIndex()]    ==    END_FE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	89	None	replace
292	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  stripCustom,  true);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  stripCustom,  true);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start,  stripCustom,  true);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    >    0)    {    seekNonWs(pattern,    start,    stripCustom);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	41	None	replace
293	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  index));  }  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  index));  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  index));  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start    <    0)    {    seekNonWs(pattern,    pos);    System.arraycopy(c,    start,    fmtCount,    readArgumentIndex(pattern,    pos));    }    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	178	None	replace
294	[BUG]  [BUGGY]  if(start!=  0)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start!=  0)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start!=  0)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }	  if(index    >=    0)    {    if(c[pos.getIndex()]    ==    END_FE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	139	None	replace
295	[BUG]  [BUGGY]  String  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(fmtCount);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  String  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	String  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(fmtCount);	  char    fmtCount    =    readArgumentIndex(pattern,    index);    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	20	None	replace
296	[BUG]  [BUGGY]  if(index  ==  0)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }	  if(start    ==    0)    {    if(c[pos.getIndex()]    ==    END_FE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	140	None	replace
297	[BUG]  [BUGGY]  if(index!=  0)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  0)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }	  if(start    ==    0)    {    if(c[pos.getIndex()]    ==    END_FE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	140	None	replace
298	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index!=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  ArrayStoreException  	77	5	add
299	[BUG]  [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  ArrayStoreException  	77	5	add
300	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]      ArrayStoreException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index!=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  ArrayStoreException  	77	5	add
301	[BUG]  [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  ArrayStoreException  [FE]      ArrayStoreException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  ArrayStoreException  	77	5	add
302	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]        ArrayStoreException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index!=  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index!=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index!=  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  ArrayStoreException  	77	5	add
303	[BUG]  [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index!=  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  ArrayStoreException  [FE]        ArrayStoreException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index!=  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index!=  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  ArrayStoreException  	77	5	add
304	[BUG]  [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >>  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [CE]  incompatible  types  [FE]          ArrayStoreException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >>  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >>  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	non-compiled	[CE]  incompatible  types	77	None	add
305	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]            ArrayStoreException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index!=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  ArrayStoreException  	77	5	add
306	[BUG]  [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  ArrayStoreException  [FE]            ArrayStoreException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  ArrayStoreException  	77	5	add
307	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start,  stripCustom);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start,  stripCustom);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  start,  stripCustom);	  int    fmtCount    =    readArgumentIndex(pattern,    index,    start);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	37	None	replace
308	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start,  pos);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start,  pos);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  start,  pos);	  int    fmtCount    =    readArgumentIndex(pattern,    index,    start);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	37	None	replace
309	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  3);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  3);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  3);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    index    +    2);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	38	None	replace
310	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  index);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  index);  }	  if(start    <    0)    {    seekNonWs(pattern,    index);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	24	None	replace
311	[BUG]  [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  index  +  1);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  index  +  1);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  <  0)  {  seekNonWs(pattern,  index  +  1);  }	  if(start    <    0)    {    seekNonWs(pattern,    index);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	24	None	replace
312	[BUG]  [BUGGY]  if(start  <  0  ||  index  <  seekNonWs(pattern,  start))  {  seekNonWs(pattern,  index);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0  ||  index  <  seekNonWs(pattern,  start))  {  seekNonWs(pattern,  index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  <  0  ||  index  <  seekNonWs(pattern,  start))  {  seekNonWs(pattern,  index);  }	  if(start    <    0)    {    seekNonWs(pattern,    index);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	24	None	replace
313	[BUG]  [BUGGY]  String  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  String  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	String  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(index);	  char    fmtCount    =    readArgumentIndex(pattern,    index);    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	33	None	replace
314	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(start,  index);  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  char  fmtCount  =  readArgumentIndex(start,  index);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	char  fmtCount  =  readArgumentIndex(start,  index);  stripCustom.append(END_FE).append(index);	  char    fmtCount    =    readArgumentIndex(pattern,    index);    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	33	None	replace
315	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	  if(index    >=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	70	None	replace
316	[BUG]  [BUGGY]  if(index  ==  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	  if(index    >=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	70	None	replace
317	[BUG]  [BUGGY]  AppendQuotedString(pattern,  pos,  stripCustom,  false);  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  AppendQuotedString(pattern,  pos,  stripCustom,  false);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	AppendQuotedString(pattern,  pos,  stripCustom,  false);	  appendQuotedString(pattern,    pos,    stripCustom,    true);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
318	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  <  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    	compilable	  [FE]  ArrayStoreException  	75	5	replace
319	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  ArrayStoreException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    	compilable	  [FE]  ArrayStoreException  	75	5	replace
320	[BUG]  [BUGGY]  if(index!=  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start    >    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  orphaned  default	62	None	replace
321	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	113	1	add
322	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	113	1	add
323	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  0)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  ArrayStoreException  	113	5	add
324	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  ArrayStoreException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  0)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  ArrayStoreException  	113	5	add
325	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  0)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  ArrayStoreException  	113	5	add
326	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  ArrayStoreException  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  0)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  ArrayStoreException  	113	5	add
327	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  ArrayStoreException  	113	5	add
328	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  ArrayStoreException  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  ArrayStoreException  	113	5	add
329	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  StripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [CE]  cannot  find  symbol  StripCustom  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  StripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  0)  {  StripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	non-compiled	[CE]  cannot  find  symbol  StripCustom	113	None	add
330	[BUG]  [BUGGY]  if(index  ==  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }	  if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    origFormats,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	5	None	replace
331	[BUG]  [BUGGY]  appendQuotedString(p,  start,  stripCustom);  [CE]  cannot  find  symbol  p  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(p,  start,  stripCustom);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(p,  start,  stripCustom);	  appendQuotedString(p,    pos,    stripCustom);    	non-compiled	[CE]  cannot  find  symbol  p	30	None	replace
332	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  false);  appendQuotedString(pattern,  pos,  stripCustom,  false);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	appendQuotedString(pattern,    pos,    stripCustom,    false);    appendQuotedString(pattern,  pos,  stripCustom,  false);	  	compilable	  [FE]  IllegalArgumentException  	56	5	add
333	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  false);  appendQuotedString(pattern,  pos,  stripCustom,  false);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  false);  appendQuotedString(pattern,  pos,  stripCustom,  false);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,    pos,    stripCustom,    false);    appendQuotedString(pattern,  pos,  stripCustom,  false);	  	compilable	  [FE]  IllegalArgumentException  	56	5	add
334	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  false);  appendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	appendQuotedString(pattern,    pos,    stripCustom,    false);    appendQuotedString(pattern,  pos,  stripCustom,  true);	  	compilable	  [FE]  IllegalArgumentException  	56	5	add
335	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  false);  appendQuotedString(pattern,  pos,  stripCustom,  true);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  false);  appendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,    pos,    stripCustom,    false);    appendQuotedString(pattern,  pos,  stripCustom,  true);	  	compilable	  [FE]  IllegalArgumentException  	56	5	add
336	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  false);  AppendQuotedString(pattern,  pos,  stripCustom,  false);  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  false);  AppendQuotedString(pattern,  pos,  stripCustom,  false);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,    pos,    stripCustom,    false);    AppendQuotedString(pattern,  pos,  stripCustom,  false);	  	non-compiled	[CE]  cannot  find  symbol	56	None	add
337	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  false);  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  [CE]  unreachable  statement  [FE]          IllegalArgumentException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  false);  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,    pos,    stripCustom,    false);    appendQuotedString(pattern,  pos,  stripCustom,  false);  break;	  	non-compiled	[CE]  unreachable  statement	56	None	add
338	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  -1)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  -1)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  ArrayStoreException  	6	5	add
339	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  -1)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  ArrayStoreException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  -1)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  -1)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  ArrayStoreException  	6	5	add
340	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	6	5	add
341	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	6	5	add
342	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  -1)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  -1)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  ArrayStoreException  	6	5	add
343	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  -1)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  ArrayStoreException  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  -1)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  -1)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  ArrayStoreException  	6	5	add
344	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index!=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index!=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	6	5	add
345	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index!=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index!=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index!=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	6	5	add
346	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index!=  -1)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index!=  -1)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  ArrayStoreException  	6	5	add
347	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index!=  -1)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  ArrayStoreException  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index!=  -1)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index!=  -1)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  ArrayStoreException  	6	5	add
348	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	16	1	add
349	[BUG]  [BUGGY]  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	16	1	add
350	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start!=  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    if(start!=  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	16	1	add
351	[BUG]  [BUGGY]  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start!=  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start!=  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    if(start!=  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	16	1	add
352	[BUG]  [BUGGY]  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  >>  0)  {  seekNonWs(pattern,  pos);  }  [CE]  incompatible  types  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  >>  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    if(start  >>  0)  {  seekNonWs(pattern,  pos);  }	  	non-compiled	[CE]  incompatible  types	16	None	add
353	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  ==  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    if(start  ==  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	16	1	add
354	[BUG]  [BUGGY]  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  ==  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  ==  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    if(start  ==  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	16	1	add
355	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	  if(index    >=    -1)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	156	None	replace
356	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	  if(index    >=    -1)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	156	None	replace
357	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  origFormats,  fmtCount,  index);  }  [CE]  cannot  find  symbol  origFormats  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  origFormats,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  origFormats,  fmtCount,  index);  }	  if(index    >=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  origFormats	134	None	replace
358	[BUG]  [BUGGY]  if(start  ==  0)  {  seekNonWs(pattern,  index);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  ==  0)  {  seekNonWs(pattern,  index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  ==  0)  {  seekNonWs(pattern,  index);  }	  if(start    ==    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	14	None	replace
359	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  ==  0)  {  seekNonWs(pattern,  pos);  }	  if(start    ==    0)    {    seekNonWs(pattern,    pos);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	14	1	replace
360	[BUG]  [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  seekNonWs(pattern,  pos);  }	  if(start    ==    0)    {    seekNonWs(pattern,    pos);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	14	1	replace
361	[BUG]  [BUGGY]  int  start  =  pos.getIndex();  [CE]  variable  start  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  start  =  pos.getIndex();  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  start  =  pos.getIndex();	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    int    start    =    pos.getIndex();    	non-compiled	[CE]  variable  start  is  already  defined  in  method  applyPattern(String)	129	None	replace
362	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  start  =  pos.getIndex();  }  [CE]  variable  start  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  start  =  pos.getIndex();  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  start  =  pos.getIndex();  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    int    start    =    pos.getIndex();    	non-compiled	[CE]  variable  start  is  already  defined  in  method  applyPattern(String)	129	None	replace
363	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  start  =  pos.getIndex();  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  start  =  pos.getIndex();  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    int    start    =    pos.getIndex();    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	129	1	replace
364	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  start  =  pos.getIndex();  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  start  =  pos.getIndex();  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  start  =  pos.getIndex();  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    int    start    =    pos.getIndex();    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	129	1	replace
365	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions.length);  }  [CE]  cannot  find  symbol  length  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions.length);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions.length);  }	  if(index    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	97	None	replace
366	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(c,  start,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(c,  start,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(c,  start,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	97	None	replace
367	[BUG]  [BUGGY]  if(index  ==  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(END_FE);  }	  if(start    >    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	148	None	replace
368	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  0)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  ArrayStoreException  	74	5	add
369	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  ArrayStoreException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  0)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  ArrayStoreException  	74	5	add
370	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  0)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  ArrayStoreException  	74	5	add
371	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  ArrayStoreException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  0)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  ArrayStoreException  	74	5	add
372	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	74	5	add
373	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	74	5	add
374	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index!=  0)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index!=  0)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  ArrayStoreException  	74	5	add
375	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index!=  0)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  ArrayStoreException  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index!=  0)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index!=  0)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  ArrayStoreException  	74	5	add
376	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(c);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  0)  {  stripCustom.append(END_FE).append(c);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  IllegalArgumentException  	74	5	add
377	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(c);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  IllegalArgumentException  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(c);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  0)  {  stripCustom.append(END_FE).append(c);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  IllegalArgumentException  	74	5	add
378	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }	  if(start    <    0    ||    start    >    index)    {    seekNonWs(pattern,    pos);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	28	1	replace
379	[BUG]  [BUGGY]  if(index  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }	  if(start    <    0    ||    start    >    index)    {    seekNonWs(pattern,    pos);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	28	1	replace
380	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0  ||  start  >  index  +  1)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start  <  0  ||  start  >  index  +  1)  {  seekNonWs(pattern,  pos);  }	  if(start    <    0    ||    start    >    index)    {    seekNonWs(pattern,    pos);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	28	1	replace
381	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  index  +  1)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0  ||  start  >  index  +  1)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  <  0  ||  start  >  index  +  1)  {  seekNonWs(pattern,  pos);  }	  if(start    <    0    ||    start    >    index)    {    seekNonWs(pattern,    pos);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	28	1	replace
382	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0  ||  index  >  start)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  <  0  ||  index  >  start)  {  seekNonWs(pattern,  pos);  }	  if(start    <    0    ||    start    >    index)    {    seekNonWs(pattern,    pos);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	28	1	replace
383	[BUG]  [BUGGY]  if(index  <  0  ||  index  >  start)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0  ||  index  >  start)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0  ||  index  >  start)  {  seekNonWs(pattern,  pos);  }	  if(start    <    0    ||    start    >    index)    {    seekNonWs(pattern,    pos);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	28	1	replace
384	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(index    <    0)    {    seekNonWs(pattern,    index);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	60	None	replace
385	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  index,  stripCustom,  true);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  index,  stripCustom,  true);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  index,  stripCustom,  true);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(index    <    0)    {    seekNonWs(pattern,    index);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	60	None	replace
386	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  start);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  start);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos,  start);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  if(index    <    0)    {    seekNonWs(pattern,    start);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	108	None	replace
387	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  fmtCount);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  fmtCount);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start,  fmtCount);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  if(index    <    0)    {    seekNonWs(pattern,    start);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	108	None	replace
388	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  if(index    <    0)    {    seekNonWs(pattern,    start);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	108	None	replace
389	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  fmtCount);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  fmtCount);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start,  fmtCount);  }	  if(index    <    0)    {    seekNonWs(pattern,    start);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	18	None	replace
390	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start,  pos);  }	  if(index    <    0)    {    seekNonWs(pattern,    start);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	18	None	replace
391	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  index);  }	  if(index    >    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    index);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	10	None	replace
392	[BUG]  [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  index);  }	  if(index    >    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    index);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	10	None	replace
393	[BUG]  [BUGGY]  if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index!=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	117	None	replace
394	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions.length);  }  [CE]  cannot  find  symbol  length  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions.length);  }	  if(index!=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	117	None	replace
395	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  DUMMY_QUOTE  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(DUMMY_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	  if(index    >=    -1)    {    stripCustom.append(DUMMY_QUOTE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  DUMMY_QUOTE	110	None	replace
396	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions.length);  }  [CE]  cannot  find  symbol  length  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions.length);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions.length);  }	  if(index    >=    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	101	None	replace
397	[BUG]  [BUGGY]  if(index!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index    >=    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	101	None	replace
398	[BUG]  [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index    >=    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	101	None	replace
399	[BUG]  [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  if(index    >    0)    {    seekNonWs(pattern,    start);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	145	None	replace
400	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  DUMMY_QUOTE  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(DUMMY_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index    >=    -1)    {    stripCustom.append(DUMMY_QUOTE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  DUMMY_QUOTE	118	None	replace
401	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN,  fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [CE]  no  suitable  method  found  for  append(String,int)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN,  fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN,  fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }	  if(index    >=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	non-compiled	[CE]  no  suitable  method  found  for  append(String,int)	152	None	replace
402	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(index    >=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	152	1	replace
403	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(index    >=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	152	1	replace
404	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	86	None	replace
405	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  index);	  int    fmtCount    =    readArgumentIndex(pattern,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	86	None	replace
406	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions.length);  }  [CE]  cannot  find  symbol  length  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions.length);  }	  if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	83	None	replace
407	[BUG]  [BUGGY]  if(index  ==  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	83	None	replace
408	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }	  if(index    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    AppendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	171	None	replace
409	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  >  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }	  	non-compiled	[CE]  orphaned  default	66	None	add
410	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  >  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }	  	non-compiled	[CE]  orphaned  default	66	None	add
411	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	66	4	add
412	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	66	4	add
413	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  continue;  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  continue;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  >  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  continue;  }	  	non-compiled	[CE]  orphaned  default	66	None	add
414	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  >  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index	  	non-compiled	[CE]  ')'  expected	66	None	add
415	[BUG]  [BUGGY]  AppendQuotedString(pattern,  pos,  stripCustom,  true);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  AppendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	AppendQuotedString(pattern,  pos,  stripCustom,  true);	  AppendQuotedString(pattern,    pos,    stripCustom);    	non-compiled	[CE]  cannot  find  symbol	181	None	replace
416	[BUG]  [BUGGY]  AppendQuotedString(c,  pos,  stripCustom);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  AppendQuotedString(c,  pos,  stripCustom);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	AppendQuotedString(c,  pos,  stripCustom);	  AppendQuotedString(pattern,    pos,    stripCustom);    	non-compiled	[CE]  cannot  find  symbol	181	None	replace
417	[BUG]  [BUGGY]  AppendQuotedString(stripCustom,  pos,  pattern);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  AppendQuotedString(stripCustom,  pos,  pattern);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	AppendQuotedString(stripCustom,  pos,  pattern);	  AppendQuotedString(pattern,    pos,    stripCustom);    	non-compiled	[CE]  cannot  find  symbol	181	None	replace
418	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  if(index    <    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	21	None	replace
419	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start    <    0    ||    start    >    index)    {    seekNonWs(pattern,    pos);    }    if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	27	1	add
420	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    <    0    ||    start    >    index)    {    seekNonWs(pattern,    pos);    }    if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	27	1	add
421	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  if(start  >=  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start    <    0    ||    start    >    index)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	27	1	add
422	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  if(start  >=  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  if(start  >=  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    <    0    ||    start    >    index)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	27	1	add
423	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  if(start  >  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start    <    0    ||    start    >    index)    {    seekNonWs(pattern,    pos);    }    if(start  >  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	27	1	add
424	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  if(start  >  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  if(start  >  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    <    0    ||    start    >    index)    {    seekNonWs(pattern,    pos);    }    if(start  >  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	27	1	add
425	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  if(start  <  0  ||  start  >  index)  {  seekNonWs(c,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  if(start  <  0  ||  start  >  index)  {  seekNonWs(c,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    <    0    ||    start    >    index)    {    seekNonWs(pattern,    pos);    }    if(start  <  0  ||  start  >  index)  {  seekNonWs(c,  pos);  }	  	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	27	None	add
426	[BUG]  [BUGGY]  Integer  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  Integer  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	Integer  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(index);	  if(start    >    0)    {    int    fmtCount    =    readArgumentIndex(pattern,    index);    stripCustom.append(END_FE).append(index);    }    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	133	None	replace
427	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  start,  fmtCount,  stripCustom);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  pos,  start,  fmtCount,  stripCustom);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  pos,  start,  fmtCount,  stripCustom);	  appendQuotedString(pattern,    start,    fmtCount,    stripCustom);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	131	None	replace
428	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  fmtCount,  stripCustom);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  pos,  fmtCount,  stripCustom);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  pos,  fmtCount,  stripCustom);	  appendQuotedString(pattern,    start,    fmtCount,    stripCustom);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	131	None	replace
429	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  index,  fmtCount,  stripCustom);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  start,  index,  fmtCount,  stripCustom);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  start,  index,  fmtCount,  stripCustom);	  appendQuotedString(pattern,    start,    fmtCount,    stripCustom);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	131	None	replace
430	[BUG]  [BUGGY]  if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	  if(index!=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	111	None	replace
431	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start,  index);  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start,  index);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  start,  index);  stripCustom.append(END_FE).append(index);	  char    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	71	None	replace
432	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats);  }	  if(index    >=    0)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	158	None	replace
433	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions);  }	  if(index    >=    0)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	158	None	replace
434	[BUG]  [BUGGY]  if(index!=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats);  }	  if(index    >=    0)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	158	None	replace
435	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  end(pos));  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  end(pos));  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  end(pos));  stripCustom.append(END_FE).append(index);	  int    fmtCount    =    readArgumentIndex(pattern,    end(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	180	None	replace
436	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end(pos));  stripCustom.append(END_FE).append(index  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end(pos));  stripCustom.append(END_FE).append(index  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  end(pos));  stripCustom.append(END_FE).append(index  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    end(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	180	None	replace
437	[BUG]  [BUGGY]  String  fmtCount  =  readArgumentIndex(pattern,  start,  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  String  fmtCount  =  readArgumentIndex(pattern,  start,  index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	String  fmtCount  =  readArgumentIndex(pattern,  start,  index);	  char    fmtCount    =    readArgumentIndex(pattern,    start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	39	None	replace
438	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  1);	  char    fmtCount    =    readArgumentIndex(pattern,    start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	39	None	replace
439	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  index,  start);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  index,  start);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  index,  start);	  char    fmtCount    =    readArgumentIndex(pattern,    start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	39	None	replace
440	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  start,  fmtCount);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  start,  fmtCount);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  pos,  stripCustom,  start,  fmtCount);	  appendQuotedString(pattern,    pos,    stripCustom,    fmtCount);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	169	None	replace
441	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  fmtCount,  index);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  fmtCount,  index);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  pos,  stripCustom,  fmtCount,  index);	  appendQuotedString(pattern,    pos,    stripCustom,    fmtCount);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	169	None	replace
442	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  pos,  stripCustom,  fmtCount);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  start,  pos,  stripCustom,  fmtCount);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  start,  pos,  stripCustom,  fmtCount);	  appendQuotedString(pattern,    pos,    stripCustom,    fmtCount);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	169	None	replace
443	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  stripCustom,  fmtCount);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  start,  stripCustom,  fmtCount);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  start,  stripCustom,  fmtCount);	  appendQuotedString(pattern,    pos,    stripCustom,    fmtCount);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	169	None	replace
444	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index    >=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	84	None	replace
445	[BUG]  [BUGGY]  if(index  ==  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index    >=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	84	None	replace
446	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start);  }  else  {  searchNonWs(pattern,  index);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start);  }  else  {  searchNonWs(pattern,  index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start);  }  else  {  searchNonWs(pattern,  index);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start    <    0)    {    searchNonWs(pattern,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	123	None	replace
447	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start);  }  else  {  searchNonWs(pattern,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start);  }  else  {  searchNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start);  }  else  {  searchNonWs(pattern,  pos);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start    <    0)    {    searchNonWs(pattern,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	123	None	replace
448	[BUG]  [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    >    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	170	None	replace
449	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  pos,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    >    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	170	None	replace
450	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [CE]  no  suitable  method  found  for  append(String,int)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }	  if(index    <    0)    {    stripCustom.append(DUMMY_PATTERN,    start);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  no  suitable  method  found  for  append(String,int)	105	None	replace
451	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN,  start,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [CE]  no  suitable  method  found  for  append(String,int,StringBuilder)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN,  start,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN,  start,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }	  if(index    <    0)    {    stripCustom.append(DUMMY_PATTERN,    start);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  no  suitable  method  found  for  append(String,int,StringBuilder)	105	None	replace
452	[BUG]  [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions.length);  }  [CE]  cannot  find  symbol  length  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions.length);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions.length);  }	  if(index    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundDescriptions.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	95	None	replace
453	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start  -  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start  -  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  start  -  1);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    index    -    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	104	None	replace
454	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  -  2);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  -  2);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index  -  2);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    index    -    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	104	None	replace
455	[BUG]  [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    <    0)    {    seekNonWs(pattern,    start);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	146	None	replace
456	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index    >=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	84	None	replace
457	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE).append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE).append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE).append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index    >=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	84	None	replace
458	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }	  if(index    >=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	compilable	  [FE]  IllegalArgumentException  	84	5	replace
459	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }  [FE]  IllegalArgumentException  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }	  if(index    >=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	compilable	  [FE]  IllegalArgumentException  	84	5	replace
460	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  stripCustom.append(DUMMY_FATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [CE]  cannot  find  symbol  DUMMY_FATTERN  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  stripCustom.append(DUMMY_FATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  0)  {  stripCustom.append(DUMMY_FATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	non-compiled	[CE]  cannot  find  symbol  DUMMY_FATTERN	113	None	add
461	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  stripCustom.append(DUMMY_PAINT);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [CE]  cannot  find  symbol  DUMMY_PAINT  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  stripCustom.append(DUMMY_PAINT);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  0)  {  stripCustom.append(DUMMY_PAINT);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	non-compiled	[CE]  cannot  find  symbol  DUMMY_PAINT	113	None	add
462	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	  if(index    >=    -1)    {    stripCustom.append(DUMMY_QUOTE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	110	None	replace
463	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN,  start,  stripCustom,  true);  break;  }  [CE]  no  suitable  method  found  for  append(String,int,StringBuilder,boolean)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN,  start,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN,  start,  stripCustom,  true);  break;  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  no  suitable  method  found  for  append(String,int,StringBuilder,boolean)	93	None	replace
464	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0  ||  start  >  fmtCount)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start  <  0  ||  start  >  fmtCount)  {  seekNonWs(pattern,  pos);  }	  if(start    <    0    ||    start    >    index)    {    seekNonWs(pattern,    pos);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	28	1	replace
465	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  fmtCount)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0  ||  start  >  fmtCount)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  <  0  ||  start  >  fmtCount)  {  seekNonWs(pattern,  pos);  }	  if(start    <    0    ||    start    >    index)    {    seekNonWs(pattern,    pos);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	28	1	replace
466	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  >=  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start  >=  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }	  if(start    <    0    ||    start    >    index)    {    seekNonWs(pattern,    pos);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	28	1	replace
467	[BUG]  [BUGGY]  if(start  >=  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  >=  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  >=  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }	  if(start    <    0    ||    start    >    index)    {    seekNonWs(pattern,    pos);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	28	1	replace
468	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index));  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index));  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index));	  int    fmtCount    =    readArgumentIndex(pattern,    start,    next(pos));    	non-compiled	[CE]  ';'  expected	85	None	replace
469	[BUG]  [BUGGY]  if(start  >  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  >  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  >  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }	  if(index    <    0)    {    if(c[pos.getIndex()    -    1]    ==    QUOTE)    {    stripCustom.append(QUOTE);    }    	non-compiled	[CE]  orphaned  default	80	None	replace
470	[BUG]  [BUGGY]  if(start  >=  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  >=  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  >=  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }	  if(index    <    0)    {    if(c[pos.getIndex()    -    1]    ==    QUOTE)    {    stripCustom.append(QUOTE);    }    	non-compiled	[CE]  orphaned  default	80	None	replace
471	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(fmtCount    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	163	None	replace
472	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(fmtCount    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	163	None	replace
473	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }  [CE]  cannot  find  symbol  format  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }	  if(index    >=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    format,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  format	155	None	replace
474	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE).append(formatDescription);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }  [CE]  cannot  find  symbol  formatDescription  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE).append(formatDescription);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE).append(formatDescription);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }	  if(index    >=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    format,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  formatDescription	155	None	replace
475	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  fmtCount,  stripCustom,  true);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  start,  fmtCount,  stripCustom,  true);  break;  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  start,  fmtCount,  stripCustom,  true);  break;	  appendQuotedString(pattern,    start,    stripCustom,    true);    break;    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	91	None	replace
476	[BUG]  [BUGGY]  if(index!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions.length);  }  [CE]  cannot  find  symbol  length  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions.length);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions.length);  }	  if(index    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundDescriptions.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	95	None	replace
477	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }  [CE]  cannot  find  symbol  findFormats  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }	  if(index!=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  findFormats	136	None	replace
478	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index!=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }	  if(index!=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	compilable	  [FE]  IllegalArgumentException  	136	5	replace
479	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }  [FE]  IllegalArgumentException  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }	  if(index!=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	compilable	  [FE]  IllegalArgumentException  	136	5	replace
480	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }  [CE]  cannot  find  symbol  findFormats  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }	  if(index!=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  findFormats	136	None	replace
481	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start,  fmtCount);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start,  fmtCount);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  start,  fmtCount);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    >    0)    {    seekNonWs(pattern,    start,    stripCustom);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	41	None	replace
482	[BUG]  [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  start,  fmtCount);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  start,  fmtCount);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  appendQuotedString(pattern,  start,  fmtCount);  }	  if(index    >    0)    {    seekNonWs(pattern,    start,    stripCustom);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	41	None	replace
483	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  index,  DUMMY_PATTERN,  stripCustom);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  start,  index,  DUMMY_PATTERN,  stripCustom);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  start,  index,  DUMMY_PATTERN,  stripCustom);	  appendQuotedString(pattern,    start,    index,    stripCustom);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	55	None	replace
484	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  index,  stripCustom);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  pos,  index,  stripCustom);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  pos,  index,  stripCustom);	  appendQuotedString(pattern,    start,    index,    stripCustom);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	55	None	replace
485	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(index    <    0)    {    seekNonWs(pattern,    index);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	60	None	replace
486	[BUG]  [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(index    <    0)    {    seekNonWs(pattern,    index);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	60	None	replace
487	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    origFormats,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	115	None	replace
488	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(ESCAPED_QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  >=  0)  {  stripCustom.append(ESCAPED_QUOTE);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    origFormats,    fmtCount,    index);    }    	compilable	  [FE]  IllegalArgumentException  	115	5	replace
489	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(ESCAPED_QUOTE);  }  [FE]  IllegalArgumentException  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(ESCAPED_QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(ESCAPED_QUOTE);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    origFormats,    fmtCount,    index);    }    	compilable	  [FE]  IllegalArgumentException  	115	5	replace
490	[BUG]  [BUGGY]  if(index  >  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    origFormats,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	115	None	replace
491	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    origFormats,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	115	None	replace
492	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  if(start  <  0  ||  start  >  index)  {  searchNonWs(pattern,  pos);  }  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  if(start  <  0  ||  start  >  index)  {  searchNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    <    0    ||    start    >    index)    {    seekNonWs(pattern,    pos);    }    if(start  <  0  ||  start  >  index)  {  searchNonWs(pattern,  pos);  }	  	non-compiled	[CE]  cannot  find  symbol	27	None	add
493	[BUG]  [BUGGY]  if(index  >=  -1)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  orphaned  default	48	None	replace
494	[BUG]  [BUGGY]  if(index  ==  -1)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  -1)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  -1)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  orphaned  default	48	None	replace
495	[BUG]  [BUGGY]  if(start  >=  0  ||  start  >  fmtCount)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  >=  0  ||  start  >  fmtCount)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  >=  0  ||  start  >  fmtCount)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }	  if(start    <    0    ||    start    >    fmtCount)    {    if(c[pos.getIndex()]    ==    END_FE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	89	None	replace
496	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  searchNonWs(pattern,  pos);  }  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  searchNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  searchNonWs(pattern,  pos);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start    >    0)    {    searchNonWs(pattern,    pos);    }    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
497	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }	  if(index!=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    origFormats,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	8	None	replace
498	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtFormats,  fmtCount,  index);  }  [CE]  cannot  find  symbol  fmtFormats  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtFormats,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtFormats,  fmtCount,  index);  }	  if(index!=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    origFormats,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  fmtFormats	8	None	replace
499	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN,  fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [CE]  no  suitable  method  found  for  append(String,int)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN,  fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN,  fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	non-compiled	[CE]  no  suitable  method  found  for  append(String,int)	157	None	replace
500	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN,  index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [CE]  no  suitable  method  found  for  append(String,int)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN,  index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN,  index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	non-compiled	[CE]  no  suitable  method  found  for  append(String,int)	157	None	replace
501	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  fmtCount);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  start,  fmtCount);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  start,  fmtCount);	  appendQuotedString(pattern,    start,    pos);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	29	None	replace
502	[BUG]  [BUGGY]  Integer  fmtCount  =  readArgumentIndex(pattern,  start,  next(pos));  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  Integer  fmtCount  =  readArgumentIndex(pattern,  start,  next(pos));  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	Integer  fmtCount  =  readArgumentIndex(pattern,  start,  next(pos));  stripCustom.append(END_FE).append(index);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	72	None	replace
503	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  index);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  index);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos,  index);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  if(index    <    0)    {    seekNonWs(pattern,    index);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	23	None	replace
504	[BUG]  [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(index    <    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	164	None	replace
505	[BUG]  [BUGGY]  if(index!=  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(index    <    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	164	None	replace
506	[BUG]  [BUGGY]  if(index  >=  -1)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start    >    0)    {    seekNonWs(pattern,    pos);    System.arraycopy(c,    start,    fmtCount,    readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  orphaned  default	161	None	replace
507	[BUG]  [BUGGY]  if(index!=  -1)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start    >    0)    {    seekNonWs(pattern,    pos);    System.arraycopy(c,    start,    fmtCount,    readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  orphaned  default	161	None	replace
508	[BUG]  [BUGGY]  if(index  ==  -1)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  -1)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  -1)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start    >    0)    {    seekNonWs(pattern,    pos);    System.arraycopy(c,    start,    fmtCount,    readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  orphaned  default	161	None	replace
509	[BUG]  [BUGGY]  if(index!=  -1)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    for(int    i    =    start;    i    <    fmtCount;    i++)    {    if(start    <    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  orphaned  default	45	None	replace
510	[BUG]  [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	49	None	replace
511	[BUG]  [BUGGY]  if(index!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	49	None	replace
512	[BUG]  [BUGGY]  if(start  >=  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  >=  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  >=  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(END_FE);  }	  if(index    <    0)    {    if(c[pos.getIndex()    -    1]    ==    QUOTE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	52	None	replace
513	[BUG]  [BUGGY]  if(start  >  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  >  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  >  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(END_FE);  }	  if(index    <    0)    {    if(c[pos.getIndex()    -    1]    ==    QUOTE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	52	None	replace
514	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start,  fmtCount);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start,  fmtCount);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  start,  fmtCount);  }	  if(index    >    0)    {    seekNonWs(pattern,    start);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	15	None	replace
515	[BUG]  [BUGGY]  if(index!=  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  if(index    >    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	9	None	replace
516	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  fmtCount);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  fmtCount);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start,  fmtCount);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(index    <    0)    {    seekNonWs(pattern,    start);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	106	None	replace
517	[BUG]  [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(index    <    0)    {    seekNonWs(pattern,    start);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	106	None	replace
518	[BUG]  [BUGGY]  if(index  >=  -1)  {  if(start  >  0)  {  seekNonWs(pattern,  start);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  if(start  >  0)  {  seekNonWs(pattern,  start);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  if(start  >  0)  {  seekNonWs(pattern,  start);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(fmtCount);    }    	non-compiled	[CE]  orphaned  default	65	None	replace
519	[BUG]  [BUGGY]  if(start  >  0)  {  seekNonWs(pattern,  index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  >  0)  {  seekNonWs(pattern,  index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  >  0)  {  seekNonWs(pattern,  index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(i    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	167	None	replace
520	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	66	1	add
521	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	66	1	add
522	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	66	1	add
523	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	66	1	add
524	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	66	1	add
525	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	66	1	add
526	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  searchNonWs(pattern,  pos);  }  else  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  searchNonWs(pattern,  pos);  }  else  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  >  0)  {  searchNonWs(pattern,  pos);  }  else  if(start  >  0)  {  seekNonWs(pattern,  pos);  }	  	non-compiled	[CE]  cannot  find  symbol	66	None	add
527	[BUG]  [BUGGY]  if(index  >=  -1)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start    >    0)    {    seekNonWs(pattern,    pos);    System.arraycopy(c,    start,    fmtCount,    readArgumentIndex(pattern,    pos));    }    	non-compiled	[CE]  orphaned  default	160	None	replace
528	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  searchNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  searchNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  searchNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }	  	non-compiled	[CE]  cannot  find  symbol	61	None	add
529	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);	  	non-compiled	[CE]  orphaned  default	61	None	add
530	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  searchNonWs(pattern,  pos);  }  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  searchNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  searchNonWs(pattern,  pos);  }	  	non-compiled	[CE]  cannot  find  symbol	61	None	add
531	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }  [CE]  cannot  find  symbol  findFormats  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  findFormats	112	None	replace
532	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  >=  0)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	compilable	  [FE]  IllegalArgumentException  	112	5	replace
533	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  IllegalArgumentException  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	compilable	  [FE]  IllegalArgumentException  	112	5	replace
534	[BUG]  [BUGGY]  if(index  >  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }  [CE]  cannot  find  symbol  findFormats  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  findFormats	112	None	replace
535	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }	  if(index    >=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	152	None	replace
536	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  -1)  {  stripCustom.append(END_FMT);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [CE]  cannot  find  symbol  END_FMT  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  -1)  {  stripCustom.append(END_FMT);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  -1)  {  stripCustom.append(END_FMT);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	non-compiled	[CE]  cannot  find  symbol  END_FMT	6	None	add
537	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index!=  -1)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index!=  -1)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  ArrayStoreException  	6	5	add
538	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index!=  -1)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  ArrayStoreException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index!=  -1)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index!=  -1)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  ArrayStoreException  	6	5	add
539	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(fmtCount);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	64	1	add
540	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(fmtCount);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	64	1	add
541	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(fmtCount);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	64	1	add
542	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(fmtCount);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	64	1	add
543	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FMT).append(fmtCount);  }  [CE]  cannot  find  symbol  END_FMT  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FMT).append(fmtCount);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(fmtCount);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FMT).append(fmtCount);  }	  	non-compiled	[CE]  cannot  find  symbol  END_FMT	64	None	add
544	[BUG]  [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    >    0)    {    seekNonWs(pattern,    index);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	42	None	replace
545	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  pos,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    >    0)    {    seekNonWs(pattern,    index);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	42	None	replace
546	[BUG]  [BUGGY]  if(index  ==  0)  {  stripCustom.append(DUMMY_PATTERN,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [CE]  no  suitable  method  found  for  append(String,int)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  stripCustom.append(DUMMY_PATTERN,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  stripCustom.append(DUMMY_PATTERN,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }	  if(index    <    0)    {    stripCustom.append(DUMMY_PATTERN,    start);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  no  suitable  method  found  for  append(String,int)	105	None	replace
547	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN,  start  +  1);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [CE]  no  suitable  method  found  for  append(String,int)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN,  start  +  1);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN,  start  +  1);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }	  if(index    <    0)    {    stripCustom.append(DUMMY_PATTERN,    start);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  no  suitable  method  found  for  append(String,int)	105	None	replace
548	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  fmtCount,  index,  stripCustom);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  start,  fmtCount,  index,  stripCustom);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  start,  fmtCount,  index,  stripCustom);	  appendQuotedString(pattern,    start,    fmtCount,    stripCustom);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	131	None	replace
549	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  false);  if(start  >=  0)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	appendQuotedString(pattern,    pos,    stripCustom,    false);    if(start  >=  0)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }	  	compilable	  [FE]  IllegalArgumentException  	56	5	add
550	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  false);  if(start  >=  0)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  false);  if(start  >=  0)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,    pos,    stripCustom,    false);    if(start  >=  0)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }	  	compilable	  [FE]  IllegalArgumentException  	56	5	add
551	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(c,  start);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(c,  start);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(c,  start);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index    >    0)    {    seekNonWs(c,    start);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	102	None	replace
552	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  if(start  >=  0)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  else  {  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(end);  }  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]    IllegalArgumentException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  if(start  >=  0)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  else  {  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(end);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,    pos,    stripCustom,    true);    if(start  >=  0)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  else  {  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(end);  }	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	53	None	add
553	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  if(start  >=  0)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  else  {  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]      IllegalArgumentException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  if(start  >=  0)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  else  {  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,    pos,    stripCustom,    true);    if(start  >=  0)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  else  {  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	53	None	add
554	[BUG]  [BUGGY]  if(index!=  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }	  if(index    <    0)    {    if(c[pos.getIndex()    -    1]    ==    QUOTE)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	165	None	replace
555	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	  if(index!=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	111	None	replace
556	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(ESCAPED_QUOTE).append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  stripCustom.append(ESCAPED_QUOTE).append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  stripCustom.append(ESCAPED_QUOTE).append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	  if(index!=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	111	None	replace
557	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(DUMMY_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  DUMMY_QUOTE  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  stripCustom.append(DUMMY_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  stripCustom.append(DUMMY_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index!=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  DUMMY_QUOTE	82	None	replace
558	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(index!=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	82	1	replace
559	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(index!=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	82	1	replace
560	[BUG]  [BUGGY]  if(index!=  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  if(index    >    0)    {    seekNonWs(pattern,    index);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	12	None	replace
561	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats);  }	  if(index    >=    -1)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	154	None	replace
562	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(DUMMY_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  DUMMY_QUOTE  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  stripCustom.append(DUMMY_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  stripCustom.append(DUMMY_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	  if(index!=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  DUMMY_QUOTE	68	None	replace
563	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start);  }  else  {  AppendQuotedString(pattern,  start,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start);  }  else  {  AppendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start);  }  else  {  AppendQuotedString(pattern,  start,  pos);  }	  if(index    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    AppendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	166	None	replace
564	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(start,  next(pos));  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  char  fmtCount  =  readArgumentIndex(start,  next(pos));  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	char  fmtCount  =  readArgumentIndex(start,  next(pos));  stripCustom.append(END_FE).append(index);	  char    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	71	None	replace
565	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(index    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	58	None	replace
566	[BUG]  [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(index    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	58	None	replace
567	[BUG]  [BUGGY]  if(index!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(index    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	58	None	replace
568	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start,  fmtCount);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start,  fmtCount);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  start,  fmtCount);  }	  if(index    >=    0)    {    seekNonWs(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	3	None	replace
569	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  start,  pos);  }	  if(index    >=    0)    {    seekNonWs(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	3	None	replace
570	[BUG]  [BUGGY]  if(start  >=  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(QUOTE);  }  [CE]  ']'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  >=  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  >=  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(QUOTE);  }	  if(start    >=    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    stripCustom.append(QUOTE);    }    	non-compiled	[CE]  ']'  expected	125	None	replace
571	[BUG]  [BUGGY]  if(start  >=  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(END_FE);  }  [CE]  ']'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  >=  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  >=  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(END_FE);  }	  if(start    >=    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ']'  expected	147	None	replace
572	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtFormats,  fmtCount,  index);  }  [CE]  cannot  find  symbol  fmtFormats  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtFormats,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtFormats,  fmtCount,  index);  }	  if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    origFormats,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  fmtFormats	5	None	replace
573	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start);  }  else  {  seekNonWs(pattern,  index  +  1);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start);  }  else  {  seekNonWs(pattern,  index  +  1);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start);  }  else  {  seekNonWs(pattern,  index  +  1);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start    <    0)    {    seekNonWs(pattern,    p);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	124	None	replace
574	[BUG]  [BUGGY]  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  >=  0)  {  searchNonWs(pattern,  pos);  }  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  >=  0)  {  searchNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  searchNonWs(pattern,  pos);  }	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
575	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  fmtCount);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  fmtCount);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start,  fmtCount);  }  else  {  appendQuotedString(pattern,  start,  index);  }	  if(index    <    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    index);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	22	None	replace
576	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  pos,  index);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  pos,  index);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start,  pos,  index);  }  else  {  appendQuotedString(pattern,  start,  index);  }	  if(index    <    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    index);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	22	None	replace
577	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start);  }  if(start  <  0)  {  searchNonWs(pattern,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start);  }  if(start  <  0)  {  searchNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start);  }  if(start  <  0)  {  searchNonWs(pattern,  pos);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start    <    0)    {    searchNonWs(pattern,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	123	None	replace
578	[BUG]  [BUGGY]  if(index  >=  -1)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }	  if(start    ==    0)    {    if(c[pos.getIndex()]    ==    END_FE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	140	None	replace
579	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  int  index  =  readArgumentIndex(pattern,  start);  [CE]  variable  index  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  int  index  =  readArgumentIndex(pattern,  start);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    <    0)    {    seekNonWs(pattern,    pos);    }    int  index  =  readArgumentIndex(pattern,  start);	  	non-compiled	[CE]  variable  index  is  already  defined  in  method  applyPattern(String)	25	None	add
580	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  int  index  =  readArgumentIndex(pattern,  start,  pos);  [CE]  variable  index  is  already  defined  in  method  applyPattern(String)  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  int  index  =  readArgumentIndex(pattern,  start,  pos);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    <    0)    {    seekNonWs(pattern,    pos);    }    int  index  =  readArgumentIndex(pattern,  start,  pos);	  	non-compiled	[CE]  variable  index  is  already  defined  in  method  applyPattern(String)	25	None	add
581	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  if(index  <  0)  {  seekNonWs(pattern,  p);  }  [CE]  cannot  find  symbol  p  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  if(index  <  0)  {  seekNonWs(pattern,  p);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    <    0)    {    seekNonWs(pattern,    pos);    }    if(index  <  0)  {  seekNonWs(pattern,  p);  }	  	non-compiled	[CE]  cannot  find  symbol  p	25	None	add
582	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index!=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index!=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index!=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  ArrayStoreException  	77	5	add
583	[BUG]  [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index!=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index!=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index!=  0)  {  stripCustom.append(END_FE).append(index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  ArrayStoreException  	77	5	add
584	[BUG]  [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  [CE]  orphaned  default  [FE]      ArrayStoreException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);	  	non-compiled	[CE]  orphaned  default	77	None	add
585	[BUG]  [BUGGY]  if(start  ==  0)  {  seekNonWs(pattern,  pos);  }  if(start  ==  0)  {  searchNonWs(pattern,  pos);  }  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  ==  0)  {  seekNonWs(pattern,  pos);  }  if(start  ==  0)  {  searchNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    ==    0)    {    seekNonWs(pattern,    pos);    }    if(start  ==  0)  {  searchNonWs(pattern,  pos);  }	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
586	[BUG]  [BUGGY]  if(start  ==  0)  {  seekNonWs(pattern,  pos);  }  int  start  =  pos.getIndex();  [CE]  variable  start  is  already  defined  in  method  applyPattern(String)  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  ==  0)  {  seekNonWs(pattern,  pos);  }  int  start  =  pos.getIndex();  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    ==    0)    {    seekNonWs(pattern,    pos);    }    int  start  =  pos.getIndex();	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  applyPattern(String)	13	None	add
587	[BUG]  [BUGGY]  if(start  >=  0)  {  if(c[pos.getIndex()  -  1]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  >=  0)  {  if(c[pos.getIndex()  -  1]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  >=  0)  {  if(c[pos.getIndex()  -  1]  ==  END_FE)  {  stripCustom.append(END_FE);  }	  if(index    <    0)    {    if(c[pos.getIndex()    -    1]    ==    END_FE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	90	None	replace
588	[BUG]  [BUGGY]  if(start  >  0)  {  if(c[pos.getIndex()  -  1]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  >  0)  {  if(c[pos.getIndex()  -  1]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  >  0)  {  if(c[pos.getIndex()  -  1]  ==  END_FE)  {  stripCustom.append(END_FE);  }	  if(index    <    0)    {    if(c[pos.getIndex()    -    1]    ==    END_FE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	90	None	replace
589	[BUG]  [BUGGY]  if(start  >=  -1)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  >=  -1)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  >=  -1)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(END_FE);  }	  if(index    >=    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	149	None	replace
590	[BUG]  [BUGGY]  if(index!=  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  index);  }	  if(index    >    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    index);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	10	None	replace
591	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  start);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }	  if(index    >=    0)    {    seekNonWs(pattern,    pos);    }    else    {    AppendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	177	None	replace
592	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos.getIndex(),  stripCustom);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos.getIndex(),  stripCustom);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  pos.getIndex(),  stripCustom);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }	  if(index    >=    0)    {    seekNonWs(pattern,    pos);    }    else    {    AppendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	177	None	replace
593	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  >  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    	compilable	  [FE]  ArrayStoreException  	114	5	replace
594	[BUG]  [BUGGY]  if(index  >  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  ArrayStoreException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    	compilable	  [FE]  ArrayStoreException  	114	5	replace
595	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  int  index  =  readArgumentIndex(pattern,  start);  [CE]  variable  index  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  int  index  =  readArgumentIndex(pattern,  start);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >    0)    {    seekNonWs(pattern,    pos);    }    int  index  =  readArgumentIndex(pattern,  start);	  	non-compiled	[CE]  variable  index  is  already  defined  in  method  applyPattern(String)	121	None	add
596	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  int  index  =  readArgumentIndex(pattern,  start,  pos);  [CE]  variable  index  is  already  defined  in  method  applyPattern(String)  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  int  index  =  readArgumentIndex(pattern,  start,  pos);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >    0)    {    seekNonWs(pattern,    pos);    }    int  index  =  readArgumentIndex(pattern,  start,  pos);	  	non-compiled	[CE]  variable  index  is  already  defined  in  method  applyPattern(String)	121	None	add
597	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  Integer  index  =  readArgumentIndex(pattern,  pos);  [CE]  variable  index  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  Integer  index  =  readArgumentIndex(pattern,  pos);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >    0)    {    seekNonWs(pattern,    pos);    }    Integer  index  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  variable  index  is  already  defined  in  method  applyPattern(String)	121	None	add
598	[BUG]  [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  index,  foundFormats.length);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  index,  foundFormats.length);  }	  if(index    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	103	None	replace
599	[BUG]  [BUGGY]  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start    <    0)    {    seekNonWs(pattern,    pos);    System.arraycopy(c,    start,    fmtCount,    readArgumentIndex(pattern,    pos));    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	178	None	replace
600	[BUG]  [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  appendQuotedString(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  if(index    <    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	21	None	replace
601	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    start);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	141	None	replace
602	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +  index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start  +  index);	  int    fmtCount    =    readArgumentIndex(pattern,    start);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	141	None	replace
603	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  StripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [CE]  cannot  find  symbol  StripCustom  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  StripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  0)  {  StripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	non-compiled	[CE]  cannot  find  symbol  StripCustom	74	None	add
604	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  continue;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  0)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  continue;  }	  	compilable	  [FE]  ArrayStoreException  	74	5	add
605	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  continue;  }  [FE]  ArrayStoreException  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  continue;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  0)  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  continue;  }	  	compilable	  [FE]  ArrayStoreException  	74	5	add
606	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  start,  stripCustom,  fmtCount);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  pos,  start,  stripCustom,  fmtCount);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  pos,  start,  stripCustom,  fmtCount);	  appendQuotedString(pattern,    pos,    stripCustom,    fmtCount);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	169	None	replace
607	[BUG]  [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  searchNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  searchNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        <        0)        {        seekNonWs(pattern,        pos);        }        if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  searchNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }	  	non-compiled	[CE]  cannot  find  symbol	47	None	add
608	[BUG]  [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        <        0)        {        seekNonWs(pattern,        pos);        }        if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);	  	non-compiled	[CE]  orphaned  default	47	None	add
609	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }  [CE]  cannot  find  symbol  format  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    format,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  format	159	None	replace
610	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }  [CE]  cannot  find  symbol  format  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    format,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  format	159	None	replace
611	[BUG]  [BUGGY]  if(index  >  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }  [CE]  cannot  find  symbol  format  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    format,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  format	159	None	replace
612	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  start,  index);  }  else  {  appendQuotedString(pattern,  start,  index);  }	  if(index    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    index);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	151	None	replace
613	[BUG]  [BUGGY]  if(index  >=  -1)  {  if(start  >  0)  {  stripCustom.append(QUOTE);  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  if(start  >  0)  {  stripCustom.append(QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  if(start  >  0)  {  stripCustom.append(QUOTE);  }	  if(start    >    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    stripCustom.append(QUOTE);    }    	non-compiled	[CE]  orphaned  default	126	None	replace
614	[BUG]  [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  index,  fmtCount);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  index,  fmtCount);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  <  0)  {  seekNonWs(pattern,  index,  fmtCount);  }	  if(start    <    0)    {    seekNonWs(pattern,    index);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	24	None	replace
615	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  fmtCount,  stripCustom,  true);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  start,  fmtCount,  stripCustom,  true);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  start,  fmtCount,  stripCustom,  true);	  appendQuotedString(pattern,    start,    stripCustom,    true);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	59	None	replace
616	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  posCustom,  true);  [CE]  cannot  find  symbol  posCustom  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  start,  posCustom,  true);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  start,  posCustom,  true);	  appendQuotedString(pattern,    start,    stripCustom,    true);    	non-compiled	[CE]  cannot  find  symbol  posCustom	59	None	replace
617	[BUG]  [BUGGY]  if(index  ==  -1)  {  if(start  >  0)  {  seekNonWs(pattern,  start);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  -1)  {  if(start  >  0)  {  seekNonWs(pattern,  start);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  -1)  {  if(start  >  0)  {  seekNonWs(pattern,  start);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start    >    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  orphaned  default	62	None	replace
618	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  start  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  start  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  start  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos),    start);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	87	None	replace
619	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(FIELD_NAME  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(FIELD_NAME  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(FIELD_NAME  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	120	None	replace
620	[BUG]  [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  searchNonWs(pattern,  pos);  }  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  searchNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        <        0)        {        seekNonWs(pattern,        pos);        }        if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  searchNonWs(pattern,  pos);  }	  	non-compiled	[CE]  cannot  find  symbol	43	None	add
621	[BUG]  [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  searchNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  searchNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        <        0)        {        seekNonWs(pattern,        pos);        }        if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  searchNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }	  	non-compiled	[CE]  cannot  find  symbol	43	None	add
622	[BUG]  [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        <        0)        {        seekNonWs(pattern,        pos);        }        if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);	  	non-compiled	[CE]  orphaned  default	43	None	add
623	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  stripCustom.append(ESCAPED_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index!=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	117	None	replace
624	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(ESCAPED_QUOTE).append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  stripCustom.append(ESCAPED_QUOTE).append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  stripCustom.append(ESCAPED_QUOTE).append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index!=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	117	None	replace
625	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  int  start  =  pos.getIndex();  [CE]  variable  start  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  int  start  =  pos.getIndex();  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  pos);  }  int  start  =  pos.getIndex();	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    int    start    =    pos.getIndex();    	non-compiled	[CE]  variable  start  is  already  defined  in  method  applyPattern(String)	129	None	replace
626	[BUG]  [BUGGY]  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  int  start  =  pos.getIndex();  [CE]  variable  start  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  int  start  =  pos.getIndex();  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  int  start  =  pos.getIndex();	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    int    start    =    pos.getIndex();    	non-compiled	[CE]  variable  start  is  already  defined  in  method  applyPattern(String)	129	None	replace
627	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(fmtCount    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	96	None	replace
628	[BUG]  [BUGGY]  if(index  ==  0)  {  if(c[pos.getIndex()  -  start]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  if(c[pos.getIndex()  -  start]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  if(c[pos.getIndex()  -  start]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }	  if(index    <    0)    {    if(c[pos.getIndex()    -    start]    ==    QUOTE)    {    stripCustom.append(QUOTE);    }    	non-compiled	[CE]  orphaned  default	81	None	replace
629	[BUG]  [BUGGY]  if(index  <  0)  {  if(c[pos.getIndex()  -  start]!=  QUOTE)  {  stripCustom.append(QUOTE);  }  [CE]  orphaned  default  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  if(c[pos.getIndex()  -  start]!=  QUOTE)  {  stripCustom.append(QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  if(c[pos.getIndex()  -  start]!=  QUOTE)  {  stripCustom.append(QUOTE);  }	  if(index    <    0)    {    if(c[pos.getIndex()    -    start]    ==    QUOTE)    {    stripCustom.append(QUOTE);    }    	non-compiled	[CE]  orphaned  default	81	None	replace
630	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end,  pos);  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end,  pos);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  end,  pos);  stripCustom.append(END_FE).append(index);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    pos);    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	73	None	replace
631	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start);  }  else  {  AppendQuotedString(pattern,  start,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start);  }  else  {  AppendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  start);  }  else  {  AppendQuotedString(pattern,  start,  pos);  }	  if(index    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    AppendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	150	None	replace
632	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE).append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE).append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(ESCAPED_QUOTE).append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	  if(index    >=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	70	None	replace
633	[BUG]  [BUGGY]  if(index!=  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  if(index    >    0)    {    seekNonWs(pattern,    start);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	145	None	replace
634	[BUG]  [BUGGY]  if(index  >=  -1)  {  if(start  >  0)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  if(start  >  0)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  if(start  >  0)  {  stripCustom.append(END_FE);  }	  if(start    >    0)    {    if(c[pos.getIndex()]    ==    END_FE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	138	None	replace
635	[BUG]  [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  start,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  start,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  seekNonWs(pattern,  start,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    <    0)    {    seekNonWs(pattern,    start,    stripCustom);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	50	None	replace
636	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  end);  stripCustom.append(END_FE).append(fmtCount);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  end);  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  end);  stripCustom.append(END_FE).append(fmtCount);	  char    fmtCount    =    readArgumentIndex(pattern,    index);    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	20	None	replace
637	[BUG]  [BUGGY]  if(index  ==  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }	  if(index    >    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	172	None	replace
638	[BUG]  [BUGGY]  if(index  >  0)  {  stripCustom.append(DUMMY_PATTERN,  start,  stripCustom,  true);  break;  }  [CE]  no  suitable  method  found  for  append(String,int,StringBuilder,boolean)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  stripCustom.append(DUMMY_PATTERN,  start,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  stripCustom.append(DUMMY_PATTERN,  start,  stripCustom,  true);  break;  }	  if(index    >    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  no  suitable  method  found  for  append(String,int,StringBuilder,boolean)	172	None	replace
639	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN,  start,  fmtCount,  stripCustom,  true);  break;  }  [CE]  no  suitable  method  found  for  append(String,int,int,StringBuilder,boolean)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN,  start,  fmtCount,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN,  start,  fmtCount,  stripCustom,  true);  break;  }	  if(index    <    0)    {    stripCustom.append(DUMMY_PATTERN,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  no  suitable  method  found  for  append(String,int,int,StringBuilder,boolean)	92	None	replace
640	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  index,  END_FE);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  start,  index,  END_FE);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  start,  index,  END_FE);	  appendQuotedString(pattern,    start,    index);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	11	None	replace
641	[BUG]  [BUGGY]  if(index  >=  -1)  {  if(start  <  0)  {  seekNonWs(pattern,  start);  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  if(start  <  0)  {  seekNonWs(pattern,  start);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  if(start  <  0)  {  seekNonWs(pattern,  start);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start    <    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    <    0)    {    stripCustom.append(END_FE).append(formatDescription);    }    	non-compiled	[CE]  orphaned  default	46	None	replace
642	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(fmtCount    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	174	None	replace
643	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  >=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  END_FE);  }	  if(index    >=    -1)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	compilable	  [FE]  IllegalArgumentException  	154	5	replace
644	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  END_FE);  }  [FE]  IllegalArgumentException  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  END_FE);  }	  if(index    >=    -1)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	compilable	  [FE]  IllegalArgumentException  	154	5	replace
645	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(QUOTE,  fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [CE]  no  suitable  method  found  for  append(char,int)  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(QUOTE,  fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(QUOTE,  fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }	  if(index    >=    -1)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	non-compiled	[CE]  no  suitable  method  found  for  append(char,int)	154	None	replace
646	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,    pos,    stripCustom,    true);    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;	  	non-compiled	[CE]  unreachable  statement	53	None	add
647	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  >  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	7	5	replace
648	[BUG]  [BUGGY]  if(index  >  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	7	5	replace
649	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    origFormats,    fmtCount,    index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	76	1	replace
650	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount,  index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    origFormats,    fmtCount,    index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	76	1	replace
651	[BUG]  [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  pos,  true);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  pos,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  appendQuotedString(pattern,  start,  pos,  true);  }	  if(index    <    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	164	None	replace
652	[BUG]  [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  appendQuotedString(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(index    <    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	164	None	replace
653	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(index    <    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	164	None	replace
654	[BUG]  [BUGGY]  if(index  >  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	153	None	replace
655	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE,  fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [CE]  no  suitable  method  found  for  append(char,int)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE,  fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(END_FE,  fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	non-compiled	[CE]  no  suitable  method  found  for  append(char,int)	153	None	replace
656	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE,  fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [CE]  no  suitable  method  found  for  append(char,int)  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE,  fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(END_FE,  fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  fmtCount);  }	  if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	non-compiled	[CE]  no  suitable  method  found  for  append(char,int)	153	None	replace
657	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);	  	non-compiled	[CE]  orphaned  default	113	None	add
658	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >>  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [CE]  incompatible  types  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >>  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >>  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	non-compiled	[CE]  incompatible  types	113	None	add
659	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [CE]  no  suitable  method  found  for  append(String,int)  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN,  index);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	non-compiled	[CE]  no  suitable  method  found  for  append(String,int)	113	None	add
660	[BUG]  [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  if(index    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	144	None	replace
661	[BUG]  [BUGGY]  if(index  >=  0)  {  appendQuotedString(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  appendQuotedString(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  appendQuotedString(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    >=    0)    {    seekNonWs(pattern,    start);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	132	None	replace
662	[BUG]  [BUGGY]  if(index  >=  0)  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  appendQuotedString(pattern,  start,  pos);  }	  if(index    >=    0)    {    seekNonWs(pattern,    start);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	132	None	replace
663	[BUG]  [BUGGY]  if(index  >=  0)  {  appendQuotedString(pattern,  pos,  start,  stripCustom);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  appendQuotedString(pattern,  pos,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  appendQuotedString(pattern,  pos,  start,  stripCustom);  }	  if(index    >=    0)    {    seekNonWs(pattern,    start);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	132	None	replace
664	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  end);	  int    fmtCount    =    readArgumentIndex(pattern,    start);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	141	None	replace
665	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  <  0)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	  if(index    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	58	1	replace
666	[BUG]  [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	  if(index    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	58	1	replace
667	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(index    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	58	None	replace
668	[BUG]  [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(index    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	58	None	replace
669	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +  1,  pos);  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +  1,  pos);  stripCustom.append(END_FE).append(index);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start  +  1,  pos);  stripCustom.append(END_FE).append(index);	  int    fmtCount    =    readArgumentIndex(pattern,    start    +    1);    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	109	None	replace
670	[BUG]  [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  appendQuotedString(pattern,  start,  pos);  }	  if(index    >    0)    {    seekNonWs(pattern,    index);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	12	None	replace
671	[BUG]  [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  index,  fmtCount);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  index,  fmtCount);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  appendQuotedString(pattern,  start,  index,  fmtCount);  }  else  {  appendQuotedString(pattern,  start,  index);  }	  if(index    <    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    index);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	22	None	replace
672	[BUG]  [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  index,  fmtCount);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  index,  fmtCount);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  appendQuotedString(pattern,  start,  index,  fmtCount);  }	  if(index    <    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    index);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	22	None	replace
673	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  cannot  find  symbol  formatDescription  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  stripCustom.append(END_FE).append(formatDescription);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(formatDescription);    }    	non-compiled	[CE]  cannot  find  symbol  formatDescription	63	None	replace
674	[BUG]  [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  pos,  index);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  pos,  index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  <  0)  {  seekNonWs(pattern,  pos,  index);  }	  if(start    <    0)    {    seekNonWs(pattern,    index);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	24	None	replace
675	[BUG]  [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  index,  END_FE);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  index,  END_FE);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  <  0)  {  seekNonWs(pattern,  index,  END_FE);  }	  if(start    <    0)    {    seekNonWs(pattern,    index);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	24	None	replace
676	[BUG]  [BUGGY]  CharType  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  CharType  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	CharType  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);	  char    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
677	[BUG]  [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  start,  index,  fmtCount);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  start,  index,  fmtCount);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  appendQuotedString(pattern,  start,  index,  fmtCount);  }	  if(index    >    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    index);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	10	None	replace
678	[BUG]  [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  index);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  appendQuotedString(pattern,  start,  index);  }	  if(index    >    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    index);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	10	None	replace
679	[BUG]  [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(END_FE);  }	  if(index    <    0)    {    if(c[pos.getIndex()    -    1]    ==    QUOTE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	52	None	replace
680	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  >  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    	compilable	  [FE]  ArrayStoreException  	75	5	replace
681	[BUG]  [BUGGY]  if(index  >  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  ArrayStoreException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    	compilable	  [FE]  ArrayStoreException  	75	5	replace
682	[BUG]  [BUGGY]  if(index  >  0)  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions.length);  }  [CE]  cannot  find  symbol  length  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions.length);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions.length);  }	  if(index    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundDescriptions.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	95	None	replace
683	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start  +  1,  start);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start  +  1,  start);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start  +  1,  start);  }	  if(index    <    0)    {    seekNonWs(pattern,    start);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	18	None	replace
684	[BUG]  [BUGGY]  if(index  <  0)  {  if(c[pos.getIndex()  -  1]!=  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  if(c[pos.getIndex()  -  1]!=  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  if(c[pos.getIndex()  -  1]!=  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }	  if(index    <    0)    {    if(c[pos.getIndex()    -    1]    ==    QUOTE)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	165	None	replace
685	[BUG]  [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  appendQuotedString(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    <    0)    {    seekNonWs(pattern,    start);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	146	None	replace
686	[BUG]  [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  pos,  start,  stripCustom);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  pos,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  appendQuotedString(pattern,  pos,  start,  stripCustom);  }	  if(index    <    0)    {    seekNonWs(pattern,    start);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	146	None	replace
687	[BUG]  [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  appendQuotedString(pattern,  start,  pos);  }	  if(index    <    0)    {    seekNonWs(pattern,    start);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	146	None	replace
688	[BUG]  [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }	  if(index    <    0)    {    if(c[pos.getIndex()    -    1]    ==    QUOTE)    {    stripCustom.append(QUOTE);    }    	non-compiled	[CE]  orphaned  default	80	None	replace
689	[BUG]  [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  index,  foundFormats.length);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  index,  foundFormats.length);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  appendQuotedString(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  index,  foundFormats.length);  }	  if(index    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    index,    foundFormats.length);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	103	None	replace
690	[BUG]  [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  fmtCount);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  fmtCount);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  appendQuotedString(pattern,  start,  fmtCount);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  if(index    <    0)    {    seekNonWs(pattern,    start);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	108	None	replace
691	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  start,  stripCustom);  }	  if(index    >=    0)    {    seekNonWs(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	3	None	replace
692	[BUG]  [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  appendQuotedString(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    >    0)    {    seekNonWs(pattern,    start);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	119	None	replace
693	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  1,  c.length  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  1,  c.length  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  1,  c.length  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    index    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	36	None	replace
694	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  1,  c.length);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  1,  c.length);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  1,  c.length);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    index    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	36	None	replace
695	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount,  index);  }	  if(index!=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    origFormats,    fmtCount,    index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	8	1	replace
696	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount,  index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount,  index);  }	  if(index!=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    origFormats,    fmtCount,    index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	8	1	replace
697	[BUG]  [BUGGY]  if(start  >  0)  {  seekNonWs(pattern,  fmtCount);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  >  0)  {  seekNonWs(pattern,  fmtCount);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  >  0)  {  seekNonWs(pattern,  fmtCount);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start    >    0)    {    seekNonWs(pattern,    p);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	130	None	replace
698	[BUG]  [BUGGY]  if(start  >  0)  {  seekNonWs(pattern,  pos.getIndex());  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  >  0)  {  seekNonWs(pattern,  pos.getIndex());  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  >  0)  {  seekNonWs(pattern,  pos.getIndex());  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start    >    0)    {    seekNonWs(pattern,    p);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	130	None	replace
699	[BUG]  [BUGGY]  if(index  >=  0)  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	83	None	replace
700	[BUG]  [BUGGY]  if(start  <  0  ||  index  >  fmtCount)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0  ||  index  >  fmtCount)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  <  0  ||  index  >  fmtCount)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }	  if(start    <    0    ||    start    >    fmtCount)    {    if(c[pos.getIndex()]    ==    END_FE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	89	None	replace
701	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    origFormats,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	115	None	replace
702	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start        <        0)        {        seekNonWs(pattern,        pos);        }        if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	47	1	add
703	[BUG]  [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        <        0)        {        seekNonWs(pattern,        pos);        }        if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	47	1	add
704	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start        <        0)        {        seekNonWs(pattern,        pos);        }        if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	47	1	add
705	[BUG]  [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        <        0)        {        seekNonWs(pattern,        pos);        }        if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	47	1	add
706	[BUG]  [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        <        0)        {        seekNonWs(pattern,        pos);        }        if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,	  	non-compiled	[CE]  ')'  expected	47	None	add
707	[BUG]  [BUGGY]  if(start  >  0)  {  int  fmtCount  =  readArgumentIndex(pattern,  index  +  1);  stripCustom.append(END_FE).append(index);  }  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  >  0)  {  int  fmtCount  =  readArgumentIndex(pattern,  index  +  1);  stripCustom.append(END_FE).append(index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  >  0)  {  int  fmtCount  =  readArgumentIndex(pattern,  index  +  1);  stripCustom.append(END_FE).append(index);  }	  if(start    >    0)    {    int    fmtCount    =    readArgumentIndex(pattern,    index);    stripCustom.append(END_FE).append(index);    }    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	133	None	replace
708	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end);  stripCustom.append(END_FE).append(index  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end);  stripCustom.append(END_FE).append(index  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  end);  stripCustom.append(END_FE).append(index  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    end);    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	34	None	replace
709	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FMT).append(index);  }  [CE]  cannot  find  symbol  END_FMT  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FMT).append(index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FMT).append(index);  }	  	non-compiled	[CE]  cannot  find  symbol  END_FMT	66	None	add
710	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {	  	non-compiled	[CE]  orphaned  default	66	None	add
711	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	66	4	add
712	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	66	4	add
713	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  index,  c.length);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  start,  index,  c.length);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  start,  index,  c.length);	  appendQuotedString(pattern,    start,    index);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	11	None	replace
714	[BUG]  [BUGGY]  if(index  >  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }  [CE]  cannot  find  symbol  format  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }	  if(index    >=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    format,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  format	155	None	replace
715	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(index    <    0)    {    seekNonWs(pattern,    start);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	106	None	replace
716	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    <    0    ||    start    >    index)    {    seekNonWs(pattern,    pos);    }    if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);	  	non-compiled	[CE]  orphaned  default	27	None	add
717	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  [CE]  ')'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    <    0    ||    start    >    index)    {    seekNonWs(pattern,    pos);    }    if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,	  	non-compiled	[CE]  ')'  expected	27	None	add
718	[BUG]  [BUGGY]  if(index  <  0)  {  if(c[pos.getIndex()  -  START_FE]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  if(c[pos.getIndex()  -  START_FE]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  if(c[pos.getIndex()  -  START_FE]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }	  if(index    <    0)    {    if(c[pos.getIndex()    -    start]    ==    QUOTE)    {    stripCustom.append(QUOTE);    }    	non-compiled	[CE]  orphaned  default	81	None	replace
719	[BUG]  [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  pos);  }  else  {  AppendQuotedString(pattern,  start,  pos);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  pos);  }  else  {  AppendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  appendQuotedString(pattern,  start,  pos);  }  else  {  AppendQuotedString(pattern,  start,  pos);  }	  if(index    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    AppendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	166	None	replace
720	[BUG]  [BUGGY]  if(index  <  0)  {  AppendQuotedString.append(DUMMY_PATTERN,  start,  pos);  }  else  {  AppendQuotedString(pattern,  start,  pos);  }  [CE]  cannot  find  symbol  AppendQuotedString  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  AppendQuotedString.append(DUMMY_PATTERN,  start,  pos);  }  else  {  AppendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  AppendQuotedString.append(DUMMY_PATTERN,  start,  pos);  }  else  {  AppendQuotedString(pattern,  start,  pos);  }	  if(index    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    AppendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  cannot  find  symbol  AppendQuotedString	166	None	replace
721	[BUG]  [BUGGY]  if(index  >=  0)  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    >=    0)    {    seekNonWs(pattern,    pos);    }    else    {    AppendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	177	None	replace
722	[BUG]  [BUGGY]  if(index  >=  0)  {  appendQuotedString(pattern,  start,  stripCustom);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  appendQuotedString(pattern,  start,  stripCustom);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  appendQuotedString(pattern,  start,  stripCustom);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }	  if(index    >=    0)    {    seekNonWs(pattern,    pos);    }    else    {    AppendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	177	None	replace
723	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }  [CE]  cannot  find  symbol  findFormats  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }	  if(index!=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  findFormats	136	None	replace
724	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start    >    0)    {    seekNonWs(pattern,    pos);    System.arraycopy(c,    start,    fmtCount,    readArgumentIndex(pattern,    pos));    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	160	None	replace
725	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(formatDescription);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [CE]  cannot  find  symbol  formatDescription  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(formatDescription);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(formatDescription);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	non-compiled	[CE]  cannot  find  symbol  formatDescription	6	None	add
726	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	6	5	add
727	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  -1)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	6	5	add
728	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start,  END_FE);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start,  END_FE);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  start,  END_FE);	  int    fmtCount    =    readArgumentIndex(pattern,    index,    start);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	37	None	replace
729	[BUG]  [BUGGY]  if(index!=  0)  {  if(c[pos.getIndex()  ]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  if(c[pos.getIndex()  ]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  0)  {  if(c[pos.getIndex()  ]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }	  if(index    ==    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	100	None	replace
730	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN,  fmtCount);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }  [CE]  no  suitable  method  found  for  append(String,int)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN,  fmtCount);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN,  fmtCount);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    format,    fmtCount,    index);    }    	non-compiled	[CE]  no  suitable  method  found  for  append(String,int)	159	None	replace
731	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [CE]  no  suitable  method  found  for  append(String,ParsePosition)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	non-compiled	[CE]  no  suitable  method  found  for  append(String,ParsePosition)	157	None	replace
732	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  END_FE);  }	  if(index    >=    0)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	compilable	  [FE]  IllegalArgumentException  	158	5	replace
733	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  END_FE);  }  [FE]  IllegalArgumentException  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  END_FE);  }	  if(index    >=    0)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	compilable	  [FE]  IllegalArgumentException  	158	5	replace
734	[BUG]  [BUGGY]  if(index  >  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }	  if(index    >=    0)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	158	None	replace
735	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  END_FE);  }	  if(index    >=    0)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	158	1	replace
736	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  END_FE);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  END_FE);  }	  if(index    >=    0)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	158	1	replace
737	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  START_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  START_FE);  }	  if(index    >=    0)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	compilable	  [FE]  IllegalArgumentException  	158	5	replace
738	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  START_FE);  }  [FE]  IllegalArgumentException  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  START_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  START_FE);  }	  if(index    >=    0)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	compilable	  [FE]  IllegalArgumentException  	158	5	replace
739	[BUG]  [BUGGY]  if(index  >=  0)  {  appendQuotedString(pattern,  start,  fmtCount);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  appendQuotedString(pattern,  start,  fmtCount);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  appendQuotedString(pattern,  start,  fmtCount);  }	  if(index    >=    0)    {    seekNonWs(pattern,    start,    stripCustom);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	2	None	replace
740	[BUG]  [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  int  start  =  pos.getIndex();  [CE]  variable  start  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  int  start  =  pos.getIndex();  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  <  0)  {  seekNonWs(pattern,  pos);  }  int  start  =  pos.getIndex();	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    int    start    =    pos.getIndex();    	non-compiled	[CE]  variable  start  is  already  defined  in  method  applyPattern(String)	129	None	replace
741	[BUG]  [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    AppendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	171	None	replace
742	[BUG]  [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  start,  stripCustom);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  start,  stripCustom);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  appendQuotedString(pattern,  start,  stripCustom);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }	  if(index    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    AppendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	171	None	replace
743	[BUG]  [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  appendQuotedString(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  if(index    >    0)    {    seekNonWs(pattern,    start,    pos);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	9	None	replace
744	[BUG]  [BUGGY]  if(index  >  0)  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	94	None	replace
745	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    >    0)    {    seekNonWs(pattern,    index);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	42	None	replace
746	[BUG]  [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  pos,  stripCustom);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  pos,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  appendQuotedString(pattern,  pos,  stripCustom);  }	  if(index    >    0)    {    seekNonWs(pattern,    index);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	42	None	replace
747	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index    >    0)    {    seekNonWs(c,    start);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	102	None	replace
748	[BUG]  [BUGGY]  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  >=  0)  {  seekNonWs(pattern,  pos);  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  if(start  >=  0)  {  seekNonWs(pattern,  pos);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);	  	non-compiled	[CE]  orphaned  default	16	None	add
749	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN,  index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  no  suitable  method  found  for  append(String,int)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN,  index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN,  index);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index!=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  no  suitable  method  found  for  append(String,int)	117	None	replace
750	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  for(int  i  =  start;  i  <  fmtCount;  i++)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  <  0)  {  seekNonWs(pattern,  pos);  }  for(int  i  =  start;  i  <  fmtCount;  i++)  {  seekNonWs(pattern,  pos);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    for(int    i    =    start;    i    <    fmtCount;    i++)    {    if(start    <    0)    {    seekNonWs(pattern,    pos);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	45	1	replace
751	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  for(int  i  =  start;  i  <  fmtCount;  i++)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  for(int  i  =  start;  i  <  fmtCount;  i++)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos);  }  for(int  i  =  start;  i  <  fmtCount;  i++)  {  seekNonWs(pattern,  pos);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    for(int    i    =    start;    i    <    fmtCount;    i++)    {    if(start    <    0)    {    seekNonWs(pattern,    pos);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	45	1	replace
752	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  seekNonWs(pattern,  pos);  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  seekNonWs(pattern,  pos);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    for(int    i    =    start;    i    <    fmtCount;    i++)    {    if(start    <    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  orphaned  default	45	None	replace
753	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	74	5	add
754	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	74	5	add
755	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(formatDescription);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [CE]  cannot  find  symbol  formatDescription  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  if(index  >=  0)  {  stripCustom.append(END_FE).append(formatDescription);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    foundDescriptions,    fmtCount,    index);    }    if(index  >=  0)  {  stripCustom.append(END_FE).append(formatDescription);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	  	non-compiled	[CE]  cannot  find  symbol  formatDescription	74	None	add
756	[BUG]  [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  fmtCount);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  fmtCount);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  appendQuotedString(pattern,  start,  fmtCount);  }	  if(index    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	49	None	replace
757	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }  else  {  System.arraycopy(c,  start,  fmtCount,  read  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }  else  {  System.arraycopy(c,  start,  fmtCount,  read  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }  else  {  System.arraycopy(c,  start,  fmtCount,  read	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start    <    0)    {    seekNonWs(pattern,    pos);    System.arraycopy(c,    start,    fmtCount,    readArgumentIndex(pattern,    pos));    }    	non-compiled	[CE]  ')'  expected	178	None	replace
758	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	61	1	add
759	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	61	1	add
760	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  [CE]  ')'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,	  	non-compiled	[CE]  ')'  expected	61	None	add
761	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);	  	non-compiled	[CE]  orphaned  default	61	None	add
762	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos	  	non-compiled	[CE]  ')'  expected	61	None	add
763	[BUG]  [BUGGY]  if(fmtCount  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(fmtCount  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(fmtCount  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(fmtCount    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	174	None	replace
764	[BUG]  [BUGGY]  CharType  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(fmtCount);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  CharType  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	CharType  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(fmtCount);	  char    fmtCount    =    readArgumentIndex(pattern,    index);    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
765	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  index,  true);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  start,  index,  true);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  start,  index,  true);	  appendQuotedString(pattern,    start,    stripCustom,    true);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	59	None	replace
766	[BUG]  [BUGGY]  if(start  >  0)  {  searchNonWs(pattern,  pos);  }  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  >  0)  {  searchNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  >  0)  {  searchNonWs(pattern,  pos);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start    >    0)    {    searchNonWs(pattern,    pos);    }    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
767	[BUG]  [BUGGY]  if(start  <  0)  {  searchNonWs(pattern,  pos);  }  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0)  {  searchNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  <  0)  {  searchNonWs(pattern,  pos);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start    >    0)    {    searchNonWs(pattern,    pos);    }    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
768	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  *  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  *  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index  *  1);	  int    fmtCount    =    readArgumentIndex(pattern,    start,    index    -    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	104	None	replace
769	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [CE]  no  suitable  method  found  for  append(String,ParsePosition)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }	  if(index    >=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index);    }    	non-compiled	[CE]  no  suitable  method  found  for  append(String,ParsePosition)	152	None	replace
770	[BUG]  [BUGGY]  if(pos.getIndex()  <  END_FE)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(pos.getIndex()  <  END_FE)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(pos.getIndex()  <  END_FE)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(index);    }    	non-compiled	[CE]  orphaned  default	67	None	replace
771	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(index    <    0)    {    seekNonWs(pattern,    index);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	60	None	replace
772	[BUG]  [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  index,  true);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  index,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  appendQuotedString(pattern,  start,  index,  true);  }	  if(index    <    0)    {    seekNonWs(pattern,    index);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	60	None	replace
773	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN,  start,  fmtCount,  true);  break;  }  [CE]  no  suitable  method  found  for  append(String,int,int,boolean)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN,  start,  fmtCount,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN,  start,  fmtCount,  true);  break;  }	  if(index    <    0)    {    stripCustom.append(DUMMY_PATTERN,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  no  suitable  method  found  for  append(String,int,int,boolean)	92	None	replace
774	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	120	None	replace
775	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(FIELD_QUOTE  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(FIELD_QUOTE  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(FIELD_QUOTE  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	120	None	replace
776	[BUG]  [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  appendQuotedString(pattern,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    >    0)    {    seekNonWs(pattern,    start,    stripCustom);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	41	None	replace
777	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(index    >=    0)    {    stripCustom.append(QUOTE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	116	None	replace
778	[BUG]  [BUGGY]  if(index  >  0)  {  if(c[pos.getIndex()  ]  ==  QUOTE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  if(c[pos.getIndex()  ]  ==  QUOTE)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  if(c[pos.getIndex()  ]  ==  QUOTE)  {  stripCustom.append(END_FE);  }	  if(start    >    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	148	None	replace
779	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN,  index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  no  suitable  method  found  for  append(String,int)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN,  index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN,  index  +  1);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	  if(index!=    -1)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  no  suitable  method  found  for  append(String,int)	111	None	replace
780	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount,  index);  }	  if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    origFormats,    fmtCount,    index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	5	1	replace
781	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount,  index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount,  index);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount,  index);  }	  if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    origFormats,    fmtCount,    index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	5	1	replace
782	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  start,  pos);  }	  if(index    >    0)    {    seekNonWs(pattern,    start);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	15	None	replace
783	[BUG]  [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  start,  pos);  }  else  {  AppendQuotedString(pattern,  start,  pos);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  start,  pos);  }  else  {  AppendQuotedString(pattern,  start,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  appendQuotedString(pattern,  start,  pos);  }  else  {  AppendQuotedString(pattern,  start,  pos);  }	  if(index    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    AppendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	150	None	replace
784	[BUG]  [BUGGY]  if(index  >  0)  {  stripCustom.append(DUMMY_PATTERN,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [CE]  no  suitable  method  found  for  append(String,int)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  stripCustom.append(DUMMY_PATTERN,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  stripCustom.append(DUMMY_PATTERN,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }	  if(index    >    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  no  suitable  method  found  for  append(String,int)	172	None	replace
785	[BUG]  [BUGGY]  if(index  >  0)  {  stripCustom.append(DUMMY_PATTERN,  start  +  1);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [CE]  no  suitable  method  found  for  append(String,int)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  stripCustom.append(DUMMY_PATTERN,  start  +  1);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  stripCustom.append(DUMMY_PATTERN,  start  +  1);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }	  if(index    >    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  no  suitable  method  found  for  append(String,int)	172	None	replace
786	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  index,  END_FE,  stripCustom);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  start,  index,  END_FE,  stripCustom);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  start,  index,  END_FE,  stripCustom);	  appendQuotedString(pattern,    start,    index,    stripCustom);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	55	None	replace
787	[BUG]  [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()  -  1]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()  -  1]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  if(c[pos.getIndex()  -  1]  ==  END_FE)  {  stripCustom.append(END_FE);  }	  if(index    <    0)    {    if(c[pos.getIndex()    -    1]    ==    END_FE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	90	None	replace
788	[BUG]  [BUGGY]  if(index!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  index);  }	  if(index    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    index);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	151	None	replace
789	[BUG]  [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  start,  index  +  1);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  start,  index  +  1);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  appendQuotedString(pattern,  start,  index  +  1);  }	  if(index    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    index);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	151	None	replace
790	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  false);  applyQuotedString(pattern,  pos,  stripCustom,  false);  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  false);  applyQuotedString(pattern,  pos,  stripCustom,  false);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,    pos,    stripCustom,    false);    applyQuotedString(pattern,  pos,  stripCustom,  false);	  	non-compiled	[CE]  cannot  find  symbol	56	None	add
791	[BUG]  [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  appendQuotedString(pattern,  pos,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    <    0)    {    seekNonWs(pattern,    start,    stripCustom);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	50	None	replace
792	[BUG]  [BUGGY]  if(start  <  0)  {  appendQuotedString(pattern,  pos);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0)  {  appendQuotedString(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  <  0)  {  appendQuotedString(pattern,  pos);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start    <    0)    {    searchNonWs(pattern,    pos);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	123	None	replace
793	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  if(index  >  0)  {  seekNonWs(pattern,  pos);  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  if(index  >  0)  {  seekNonWs(pattern,  pos);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    >    0)    {    seekNonWs(pattern,    pos);    }    if(index  >  0)  {  seekNonWs(pattern,  pos);	  	non-compiled	[CE]  orphaned  default	121	None	add
794	[BUG]  [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }	  if(index    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    AppendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	175	None	replace
795	[BUG]  [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(index    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    AppendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	175	None	replace
796	[BUG]  [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  pos,  stripCustom);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  pos,  stripCustom);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  appendQuotedString(pattern,  pos,  stripCustom);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }	  if(index    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    AppendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	175	None	replace
797	[BUG]  [BUGGY]  if(index  <  0)  {  applyPattern(pattern,  pos);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }  [CE]  no  suitable  method  found  for  applyPattern(String,ParsePosition)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  applyPattern(pattern,  pos);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  applyPattern(pattern,  pos);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }	  if(index    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    AppendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  no  suitable  method  found  for  applyPattern(String,ParsePosition)	175	None	replace
798	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index    <    0)    {    seekNonWs(pattern,    pos);    }    if(index  >=  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	25	1	add
799	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    <    0)    {    seekNonWs(pattern,    pos);    }    if(index  >=  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	25	1	add
800	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  if(index  <  0)  {  seekNonWs(pattern,  pos);  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  if(index  <  0)  {  seekNonWs(pattern,  pos);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index    <    0)    {    seekNonWs(pattern,    pos);    }    if(index  <  0)  {  seekNonWs(pattern,  pos);	  	non-compiled	[CE]  orphaned  default	25	None	add
801	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start        <        0)        {        seekNonWs(pattern,        pos);        }        if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	43	1	add
802	[BUG]  [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        <        0)        {        seekNonWs(pattern,        pos);        }        if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	43	1	add
803	[BUG]  [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  [CE]  ')'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        <        0)        {        seekNonWs(pattern,        pos);        }        if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,	  	non-compiled	[CE]  ')'  expected	43	None	add
804	[BUG]  [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        <        0)        {        seekNonWs(pattern,        pos);        }        if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);	  	non-compiled	[CE]  orphaned  default	43	None	add
805	[BUG]  [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        <        0)        {        seekNonWs(pattern,        pos);        }        if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos	  	non-compiled	[CE]  ')'  expected	43	None	add
806	[BUG]  [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(END_FE);  }  [CE]  ']'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(END_FE);  }	  if(index    >=    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ']'  expected	149	None	replace
807	[BUG]  [BUGGY]  if(index  <  0)  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	97	None	replace
808	[BUG]  [BUGGY]  if(index  <  0)  {  applyPattern(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  no  suitable  method  found  for  applyPattern(String,ParsePosition)  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  applyPattern(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  applyPattern(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(index    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  no  suitable  method  found  for  applyPattern(String,ParsePosition)	97	None	replace
809	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [CE]  no  suitable  method  found  for  append(String,ParsePosition)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }	  if(index    <    0)    {    stripCustom.append(DUMMY_PATTERN,    start);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  no  suitable  method  found  for  append(String,ParsePosition)	105	None	replace
810	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [CE]  no  suitable  method  found  for  append(char,int)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  stripCustom.append(QUOTE,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  stripCustom.append(QUOTE,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }	  if(index    <    0)    {    stripCustom.append(DUMMY_PATTERN,    start);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  no  suitable  method  found  for  append(char,int)	105	None	replace
811	[BUG]  [BUGGY]  if(index  >=  0)  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	  if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	69	None	replace
812	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN).append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN).append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN).append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	  if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	69	None	replace
813	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  cannot  find  symbol  formatDescription  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  stripCustom.append(END_FE).append(formatDescription);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start    <    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    <    0)    {    stripCustom.append(END_FE).append(formatDescription);    }    	non-compiled	[CE]  cannot  find  symbol  formatDescription	46	None	replace
814	[BUG]  [BUGGY]  if(index  >  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }	  if(index    >=    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	98	None	replace
815	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  fmtCount,  END_FE);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  fmtCount,  END_FE);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  pos,  stripCustom,  fmtCount,  END_FE);	  appendQuotedString(pattern,    pos,    stripCustom,    fmtCount);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	169	None	replace
816	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  fmtCount,  start);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  fmtCount,  start);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  pos,  stripCustom,  fmtCount,  start);	  appendQuotedString(pattern,    pos,    stripCustom,    fmtCount);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	169	None	replace
817	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(fmtCount);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	64	4	add
818	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(fmtCount);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	64	4	add
819	[BUG]  [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start        >        0)        {        seekNonWs(pattern,        pos);        }        if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    if(start    >    0)    {    stripCustom.append(END_FE).append(fmtCount);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {	  	non-compiled	[CE]  orphaned  default	64	None	add
820	[BUG]  [BUGGY]  if(index  >  0)  {  if(c[pos.getIndex()  ]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  if(c[pos.getIndex()  ]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  if(c[pos.getIndex()  ]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }	  if(start    >    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    stripCustom.append(QUOTE);    }    	non-compiled	[CE]  orphaned  default	126	None	replace
821	[BUG]  [BUGGY]  if(start  ==  0)  {  seekNonWs(pattern,  pos);  }  int  start  =  readArgumentIndex(pattern,  pos);  [CE]  variable  start  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  ==  0)  {  seekNonWs(pattern,  pos);  }  int  start  =  readArgumentIndex(pattern,  pos);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    ==    0)    {    seekNonWs(pattern,    pos);    }    int  start  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  applyPattern(String)	13	None	add
822	[BUG]  [BUGGY]  if(start  ==  0)  {  seekNonWs(pattern,  pos);  }  if(start  ==  0)  {  seekNonWs(pattern,  pos);  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  ==  0)  {  seekNonWs(pattern,  pos);  }  if(start  ==  0)  {  seekNonWs(pattern,  pos);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    ==    0)    {    seekNonWs(pattern,    pos);    }    if(start  ==  0)  {  seekNonWs(pattern,  pos);	  	non-compiled	[CE]  orphaned  default	13	None	add
823	[BUG]  [BUGGY]  if(index  >  0)  {  if(c[pos.getIndex()  ]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >  0)  {  if(c[pos.getIndex()  ]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [BUGGY]      seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  if(c[pos.getIndex()  ]  ==  END_FE)  {  stripCustom.append(END_FE);  }	  if(start    >    0)    {    if(c[pos.getIndex()]    ==    END_FE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	138	None	replace
824	[BUG]  [BUGGY]  if(fmtCount  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(fmtCount  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(fmtCount  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(fmtCount    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	163	None	replace
825	[BUG]  [BUGGY]  if(index  >=  -1)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  -1)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start    <    0)    {    seekNonWs(pattern,    pos);    System.arraycopy(c,    start,    fmtCount,    readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  orphaned  default	179	None	replace
826	[BUG]  [BUGGY]  if(index!=  -1)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index!=  -1)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start    <    0)    {    seekNonWs(pattern,    pos);    System.arraycopy(c,    start,    fmtCount,    readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  orphaned  default	179	None	replace
827	[BUG]  [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  fmtCount);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  fmtCount);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  <  0)  {  seekNonWs(pattern,  fmtCount);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start    <    0)    {    seekNonWs(pattern,    p);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	124	None	replace
828	[BUG]  [BUGGY]  if(index  >=  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  break;  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);      [BUGGY]  if(index  >=  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  if(start  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  break;  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start    >    0)    {    seekNonWs(pattern,    pos);    System.arraycopy(c,    start,    fmtCount,    readArgumentIndex(pattern,    pos));    break;    	non-compiled	[CE]  orphaned  default	162	None	replace
