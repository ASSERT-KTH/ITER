bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	17	None	replace
2	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  start,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	17	None	replace
3	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start,  stripCustom);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  start,  stripCustom);  }	  if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	17	None	replace
4	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom);  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  pos,  stripCustom);	  if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	17	None	replace
5	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  origFormats,  fmtCount,  index);  }  [CE]  cannot  find  symbol  origFormats  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  origFormats,  fmtCount,  index);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  origFormats,  fmtCount,  index);  }	      if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  origFormats	14	None	replace
6	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	      if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	14	5	replace
7	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	      if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	14	5	replace
8	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  origFormats,  fmtCount,  index);  }  [CE]  cannot  find  symbol  origFormats  [FE]                    junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index!=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  origFormats,  fmtCount,  index);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  origFormats,  fmtCount,  index);  }	      if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  origFormats	14	None	replace
9	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	28	None	replace
10	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  index);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	28	None	replace
11	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  index);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  appendQuotedString(pattern,  start,  index);  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  start,  index);	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	28	None	replace
12	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	28	None	replace
13	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  ==  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start  ==  0)  {  seekNonWs(pattern,  pos);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	16	1	replace
14	[BUG]  [BUGGY]  if(start  ==  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  ==  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  ==  0)  {  seekNonWs(pattern,  pos);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	16	1	replace
15	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  start);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	16	None	replace
16	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start  >=  0)  {  seekNonWs(pattern,  pos);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	16	1	replace
17	[BUG]  [BUGGY]  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  >=  0)  {  seekNonWs(pattern,  pos);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	16	1	replace
18	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	16	None	replace
19	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(fmtCount);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(fmtCount);	      int    fmtCount    =    readArgumentIndex(pattern,    index);    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	4	None	replace
20	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(fmtCount);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(fmtCount);	      int    fmtCount    =    readArgumentIndex(pattern,    index);    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	4	None	replace
21	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	25	None	replace
22	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  index);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	25	None	replace
23	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	25	None	replace
24	[BUG]  [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  index);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  index);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  <  0)  {  seekNonWs(pattern,  index);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	27	None	replace
25	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  <  0)  {  seekNonWs(pattern,  pos);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	27	1	replace
26	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	27	1	replace
27	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	27	1	replace
28	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  <  0  ||  start  >  index)  {  seekNonWs(pattern,  pos);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	27	1	replace
29	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  pos);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  appendQuotedString(pattern,  start,  pos);  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  start,  pos);	  appendQuotedString(pattern,    pos);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	8	None	replace
30	[BUG]  [BUGGY]  appendQuotedString(p,  pos,  stripCustom);  [CE]  cannot  find  symbol  p  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  appendQuotedString(p,  pos,  stripCustom);  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(p,  pos,  stripCustom);	  appendQuotedString(pattern,    pos);    	non-compiled	[CE]  cannot  find  symbol  p	8	None	replace
31	[BUG]  [BUGGY]  appendQuotedString(stripCustom,  pos);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  appendQuotedString(stripCustom,  pos);  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(stripCustom,  pos);	  appendQuotedString(pattern,    pos);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	8	None	replace
32	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(index);  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(index);	      int    fmtCount    =    readArgumentIndex(pattern,    index);    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	5	None	replace
33	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(index);  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(index);	      int    fmtCount    =    readArgumentIndex(pattern,    index);    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	5	None	replace
34	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end);  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end);  stripCustom.append(END_FE).append(index);  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  end);  stripCustom.append(END_FE).append(index);	      int    fmtCount    =    readArgumentIndex(pattern,    index);    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	5	None	replace
35	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);	      int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	2	None	replace
36	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  1);  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  1);	      int    fmtCount    =    readArgumentIndex(pattern,    start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	24	None	replace
37	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  start);  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  start);	      int    fmtCount    =    readArgumentIndex(pattern,    start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	24	None	replace
38	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  2);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  2);  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index  +  2);	      int    fmtCount    =    readArgumentIndex(pattern,    start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	24	None	replace
39	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start,  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start,  index);  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  start,  index);	      int    fmtCount    =    readArgumentIndex(pattern,    start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	24	None	replace
40	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	18	None	replace
41	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  start,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	18	None	replace
42	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	18	None	replace
43	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	26	1	add
44	[BUG]  [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	26	1	add
45	[BUG]  [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  for(int  i  =  start;  i  <  fmtCount;  i++)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  for(int  i  =  start;  i  <  fmtCount;  i++)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    <    0)    {    seekNonWs(pattern,    pos);    }    for(int  i  =  start;  i  <  fmtCount;  i++)  {  if(start  <  0)  {  seekNonWs(pattern,  pos);  }	  	non-compiled	[CE]  orphaned  default	26	None	add
46	[BUG]  [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  <  0)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  cannot  find  symbol  formatDescription  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  <  0)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  <  0)  {  stripCustom.append(END_FE).append(formatDescription);  }	  	non-compiled	[CE]  cannot  find  symbol  formatDescription	26	None	add
47	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	26	1	add
48	[BUG]  [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  >=  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  >=  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	26	1	add
49	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	7	None	replace
50	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start,  stripCustom);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	7	None	replace
51	[BUG]  [BUGGY]  if(start  <  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  <  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(END_FE);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  <  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(END_FE);  }	      if(index    <    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	22	None	replace
52	[BUG]  [BUGGY]  if(index  <  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  <  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(END_FE);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(END_FE);  }	      if(index    <    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	22	None	replace
53	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	appendQuotedString(pattern,  pos,  stripCustom,  true);	  appendQuotedString(pattern,    start,    stripCustom);    	compilable	  [FE]  IllegalArgumentException  	6	5	replace
54	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  [FE]  IllegalArgumentException  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  pos,  stripCustom,  true);	  appendQuotedString(pattern,    start,    stripCustom);    	compilable	  [FE]  IllegalArgumentException  	6	5	replace
55	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  index,  stripCustom);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  appendQuotedString(pattern,  start,  index,  stripCustom);  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  start,  index,  stripCustom);	  appendQuotedString(pattern,    start,    stripCustom);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	6	None	replace
56	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  false);  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	appendQuotedString(pattern,  pos,  stripCustom,  false);	  appendQuotedString(pattern,    start,    stripCustom);    	compilable	  [FE]  IllegalArgumentException  	6	5	replace
57	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  false);  [FE]  IllegalArgumentException  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  false);  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  pos,  stripCustom,  false);	  appendQuotedString(pattern,    start,    stripCustom);    	compilable	  [FE]  IllegalArgumentException  	6	5	replace
58	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	9	None	replace
59	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  stripCustom,  true);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  appendQuotedString(pattern,  start,  stripCustom,  true);  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  start,  stripCustom,  true);	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	9	None	replace
60	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  index);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	9	None	replace
61	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	15	1	add
62	[BUG]  [BUGGY]  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	15	1	add
63	[BUG]  [BUGGY]  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(formatDescription);  }  [CE]  cannot  find  symbol  formatDescription  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(formatDescription);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(formatDescription);  }	  	non-compiled	[CE]  cannot  find  symbol  formatDescription	15	None	add
64	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	15	1	add
65	[BUG]  [BUGGY]  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	15	1	add
66	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	15	1	add
67	[BUG]  [BUGGY]  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  }  else  if(start  >  0)  {  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	15	1	add
68	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index!=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	      if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	10	None	replace
69	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	      if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	10	None	replace
70	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	      if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	10	None	replace
71	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);	      int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	1	None	replace
72	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  next(pos));  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  next(pos));  stripCustom.append(END_FE).append(index);  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  next(pos));  stripCustom.append(END_FE).append(index);	      int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	1	None	replace
73	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  stripCustom.append(END_FE).append(index);  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  stripCustom.append(END_FE).append(index);	      int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	1	None	replace
74	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	      if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	13	5	replace
75	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	      if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	13	5	replace
76	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  origFormats,  fmtCount,  index);  }  [CE]  cannot  find  symbol  origFormats  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  origFormats,  fmtCount,  index);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  origFormats,  fmtCount,  index);  }	      if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  origFormats	13	None	replace
77	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	      if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	compilable	  [FE]  ArrayStoreException  	13	5	replace
78	[BUG]  [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  ArrayStoreException  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	      if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	compilable	  [FE]  ArrayStoreException  	13	5	replace
79	[BUG]  [BUGGY]  if(start  <  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  <  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  <  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }	      if(index    <    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    stripCustom.append(QUOTE);    }    	non-compiled	[CE]  orphaned  default	21	None	replace
80	[BUG]  [BUGGY]  if(index  <  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  <  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }	      if(index    <    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    stripCustom.append(QUOTE);    }    	non-compiled	[CE]  orphaned  default	21	None	replace
81	[BUG]  [BUGGY]  if(index  <  0)  {  if(c[pos.getIndex()  -  start]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  <  0)  {  if(c[pos.getIndex()  -  start]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  if(c[pos.getIndex()  -  start]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }	      if(index    <    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    stripCustom.append(QUOTE);    }    	non-compiled	[CE]  orphaned  default	21	None	replace
82	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index!=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	      if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	12	None	replace
83	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	      if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	12	None	replace
84	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	      if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	12	None	replace
85	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  next(pos));  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  next(pos));	      int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	3	None	replace
86	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index);  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index);	      int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	3	None	replace
87	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  start);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  start);  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  start);	      int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	3	None	replace
88	[BUG]  [BUGGY]  if(start  <  0)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  <  0)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  <  0)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }	      if(index    <    0)    {    if(c[pos.getIndex()]    ==    END_FE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	23	None	replace
89	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  fmtCount)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  <  0  ||  start  >  fmtCount)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  <  0  ||  start  >  fmtCount)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }	      if(index    <    0)    {    if(c[pos.getIndex()]    ==    END_FE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	23	None	replace
90	[BUG]  [BUGGY]  if(index  <  0)  {  if(c[pos.getIndex()  -  1]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  <  0)  {  if(c[pos.getIndex()  -  1]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  if(c[pos.getIndex()  -  1]  ==  END_FE)  {  stripCustom.append(END_FE);  }	      if(index    <    0)    {    if(c[pos.getIndex()]    ==    END_FE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	23	None	replace
91	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  start,  stripCustom,  true);  break;	      if(index    <    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	11	None	replace
92	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN,  start,  stripCustom,  true);  break;  }  [CE]  no  suitable  method  found  for  append(String,int,StringBuilder,boolean)  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN,  start,  stripCustom,  true);  break;  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN,  start,  stripCustom,  true);  break;  }	      if(index    <    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  no  suitable  method  found  for  append(String,int,StringBuilder,boolean)	11	None	replace
93	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }	      if(index    <    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	11	None	replace
94	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	19	None	replace
95	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions.length);  }  [CE]  cannot  find  symbol  length  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions.length);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundDescriptions.length);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	19	None	replace
96	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	19	None	replace
97	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                    junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	19	None	replace
98	[BUG]  [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }	      if(index    <    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	20	None	replace
99	[BUG]  [BUGGY]  if(index  <  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  <  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }	      if(index    <    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	20	None	replace
100	[BUG]  [BUGGY]  if(index  ==  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  ==  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  ==  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }	      if(index    <    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	20	None	replace
101	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	19	None	replace
102	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(c,  start);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >  0)  {  seekNonWs(c,  start);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(c,  start);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	19	None	replace
103	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  index,  foundFormats.length);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  index,  foundFormats.length);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	19	None	replace
104	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  -  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index  -  1);  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index  -  1);	      int    fmtCount    =    readArgumentIndex(pattern,    start,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	24	None	replace
105	[BUG]  [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [CE]  no  suitable  method  found  for  append(String,int)  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  stripCustom.append(DUMMY_PATTERN,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }	      if(index    <    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  no  suitable  method  found  for  append(String,int)	11	None	replace
106	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	9	None	replace
107	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	25	None	replace
108	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	25	None	replace
109	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +  1);  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +  1);  stripCustom.append(END_FE).append(index);  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start  +  1);  stripCustom.append(END_FE).append(index);	      int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	1	None	replace
110	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(DUMMY_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  DUMMY_QUOTE  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  -1)  {  stripCustom.append(DUMMY_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(DUMMY_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	      if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  DUMMY_QUOTE	10	None	replace
111	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	      if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	10	None	replace
112	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }  [CE]  cannot  find  symbol  findFormats  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }	      if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  findFormats	13	None	replace
113	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	      if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	13	1	replace
114	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  foundDescriptions,  fmtCount,  index);  }	      if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	13	1	replace
115	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  origFormats,  fmtCount,  index);  }  [CE]  cannot  find  symbol  origFormats  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  origFormats,  fmtCount,  index);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  origFormats,  fmtCount,  index);  }	      if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  origFormats	13	None	replace
116	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }  [CE]  cannot  find  symbol  findFormats  [FE]                    junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }	      if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  findFormats	13	None	replace
117	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	      if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	12	None	replace
118	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(DUMMY_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  DUMMY_QUOTE  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  -1)  {  stripCustom.append(DUMMY_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(DUMMY_QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	      if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  DUMMY_QUOTE	12	None	replace
119	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	18	None	replace
120	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount  +  1);  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount  +  1);	      int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	2	None	replace
121	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	add	if(index  >  0)  {  seekNonWs(pattern,  pos);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	16	1	replace
122	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  pos);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	16	1	replace
123	[BUG]  [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  searchNonWs(pattern,  pos);  }  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  searchNonWs(pattern,  pos);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  searchNonWs(pattern,  pos);  }	  	non-compiled	[CE]  cannot  find  symbol	26	None	add
124	[BUG]  [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  p);  }  [CE]  cannot  find  symbol  p  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  p);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  p);  }	  	non-compiled	[CE]  cannot  find  symbol  p	26	None	add
125	[BUG]  [BUGGY]  if(start  >=  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  >=  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  >=  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }	      if(index    <    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    stripCustom.append(QUOTE);    }    	non-compiled	[CE]  orphaned  default	21	None	replace
126	[BUG]  [BUGGY]  if(start  >  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  >  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  >  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }	      if(index    <    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    stripCustom.append(QUOTE);    }    	non-compiled	[CE]  orphaned  default	21	None	replace
127	[BUG]  [BUGGY]  if(start  >=  -1)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  >=  -1)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  >=  -1)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(QUOTE);  }	      if(index    <    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    stripCustom.append(QUOTE);    }    	non-compiled	[CE]  orphaned  default	21	None	replace
128	[BUG]  [BUGGY]  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  searchNonWs(pattern,  pos);  }  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  searchNonWs(pattern,  pos);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  searchNonWs(pattern,  pos);  }	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
129	[BUG]  [BUGGY]  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  int  start  =  pos.getIndex();  [CE]  variable  start  is  already  defined  in  method  applyPattern(String)  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  int  start  =  pos.getIndex();  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    >    0)    {    seekNonWs(pattern,    pos);    }    int  start  =  pos.getIndex();	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  applyPattern(String)	15	None	add
130	[BUG]  [BUGGY]  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  p);  }  [CE]  cannot  find  symbol  p  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  p);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  p);  }	  	non-compiled	[CE]  cannot  find  symbol  p	15	None	add
131	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  fmtCount,  stripCustom);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  appendQuotedString(pattern,  start,  fmtCount,  stripCustom);  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  start,  fmtCount,  stripCustom);	  appendQuotedString(pattern,    start,    stripCustom);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	6	None	replace
132	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	17	None	replace
133	[BUG]  [BUGGY]  if(start  >  0)  {  int  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(index);  }  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  >  0)  {  int  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(index);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  >  0)  {  int  fmtCount  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(index);  }	      int    fmtCount    =    readArgumentIndex(pattern,    index);    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	5	None	replace
134	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }  [CE]  cannot  find  symbol  findFormats  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }	      if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  findFormats	14	None	replace
135	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }  [CE]  cannot  find  symbol  findFormats  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }	      if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  findFormats	14	None	replace
136	[BUG]  [BUGGY]  if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }  [CE]  cannot  find  symbol  findFormats  [FE]                    junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index!=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  findFormats,  fmtCount,  index);  }	      if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  findFormats	14	None	replace
137	[BUG]  [BUGGY]  if(start  >=  0)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  >=  0)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  >=  0)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }	      if(index    <    0)    {    if(c[pos.getIndex()]    ==    END_FE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	23	None	replace
138	[BUG]  [BUGGY]  if(start  >  0)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  >  0)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  >  0)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }	      if(index    <    0)    {    if(c[pos.getIndex()]    ==    END_FE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	23	None	replace
139	[BUG]  [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }	      if(index    <    0)    {    if(c[pos.getIndex()]    ==    END_FE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	23	None	replace
140	[BUG]  [BUGGY]  if(start  ==  0)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                    junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  ==  0)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  ==  0)  {  if(c[pos.getIndex()]  ==  END_FE)  {  stripCustom.append(END_FE);  }	      if(index    <    0)    {    if(c[pos.getIndex()]    ==    END_FE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	23	None	replace
141	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start);  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start);	      int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	3	None	replace
142	[BUG]  [BUGGY]  appendQuotedString(pt,  pos,  stripCustom);  [CE]  cannot  find  symbol  pt  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  appendQuotedString(pt,  pos,  stripCustom);  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pt,  pos,  stripCustom);	  appendQuotedString(pattern,    pos);    	non-compiled	[CE]  cannot  find  symbol  pt	8	None	replace
143	[BUG]  [BUGGY]  appendQuotedString(ptr,  pos,  stripCustom);  [CE]  cannot  find  symbol  ptr  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  appendQuotedString(ptr,  pos,  stripCustom);  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(ptr,  pos,  stripCustom);	  appendQuotedString(pattern,    pos);    	non-compiled	[CE]  cannot  find  symbol  ptr	8	None	replace
144	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	28	None	replace
145	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  pos);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  pos);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	28	None	replace
146	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	7	None	replace
147	[BUG]  [BUGGY]  if(start  >=  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  >=  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(END_FE);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  >=  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(END_FE);  }	      if(index    <    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	22	None	replace
148	[BUG]  [BUGGY]  if(start  >  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  >  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(END_FE);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start  >  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(END_FE);  }	      if(index    <    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	22	None	replace
149	[BUG]  [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(END_FE);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  if(c[pos.getIndex()]  ==  QUOTE)  {  stripCustom.append(END_FE);  }	      if(index    <    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	22	None	replace
150	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  AppendQuotedString(pattern,  start,  pos);  }  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  AppendQuotedString(pattern,  start,  pos);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  AppendQuotedString(pattern,  start,  pos);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
151	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  index);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  index);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	28	None	replace
152	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }	      if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	14	None	replace
153	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(END_FE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }	      if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	14	None	replace
154	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }	      if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	14	None	replace
155	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }  [CE]  cannot  find  symbol  format  [FE]                      junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }	      if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  format	14	None	replace
156	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index  +  1,  foundFormats.length);  }	      if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index    +    1,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	10	None	replace
157	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }	      if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	13	None	replace
158	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index);  }	      if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	13	None	replace
159	[BUG]  [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }  [CE]  cannot  find  symbol  format  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  System.arraycopy(c,  start,  format,  fmtCount,  index);  }	      if(index    >=    0)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    findFormats,    fmtCount,    index);    }    	non-compiled	[CE]  cannot  find  symbol  format	13	None	replace
160	[BUG]  [BUGGY]  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	15	None	add
161	[BUG]  [BUGGY]  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));	  	non-compiled	[CE]  orphaned  default	15	None	add
162	[BUG]  [BUGGY]  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  break;  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  >  0)  {  seekNonWs(pattern,  pos);  }  if(start  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  break;  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    >    0)    {    seekNonWs(pattern,    pos);    }    if(start  >  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  break;	  	non-compiled	[CE]  orphaned  default	15	None	add
163	[BUG]  [BUGGY]  if(fmtCount  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(fmtCount  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(fmtCount  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	9	None	replace
164	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	9	None	replace
165	[BUG]  [BUGGY]  if(index  <  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  <  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  if(c[pos.getIndex()  -  1]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }	      if(index    <    0)    {    if(c[pos.getIndex()]    ==    QUOTE)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	20	None	replace
166	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  AppendQuotedString(pattern,  start,  pos);  }  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  AppendQuotedString(pattern,  start,  pos);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  AppendQuotedString(pattern,  start,  pos);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    pos);    }    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
167	[BUG]  [BUGGY]  if(i  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  i  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(i  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(i  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  i	19	None	replace
168	[BUG]  [BUGGY]  if(index  >=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  -1)  {  stripCustom.append(QUOTE);  }  else  {  System.arraycopy(c,  start,  fmtCount,  index,  foundFormats.length);  }	      if(index    >=    -1)    {    stripCustom.append(END_FE);    }    else    {    System.arraycopy(c,    start,    fmtCount,    index,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	12	None	replace
169	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  fmtCount);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  fmtCount);  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	appendQuotedString(pattern,  pos,  stripCustom,  fmtCount);	  appendQuotedString(pattern,    start,    stripCustom);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	6	None	replace
170	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	18	None	replace
171	[BUG]  [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }	  if(start    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
172	[BUG]  [BUGGY]  if(index  >  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >  0)  {  stripCustom.append(DUMMY_PATTERN);  }  else  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }	      if(index    <    0)    {    stripCustom.append(DUMMY_PATTERN);    }    else    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	11	None	replace
173	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	7	None	replace
174	[BUG]  [BUGGY]  if(fmtCount  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(fmtCount  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(fmtCount  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	7	None	replace
175	[BUG]  [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }	  if(start    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
176	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  start,  pos);  }  else  {  appendQuotedString(pattern,  start,  stripCustom);  }	  if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	17	None	replace
177	[BUG]  [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(index  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  AppendQuotedString(pattern,  start,  stripCustom);  }	  if(start    >=    0)    {    seekNonWs(pattern,    pos);    }    else    {    appendQuotedString(pattern,    start,    stripCustom);    }    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
178	[BUG]  [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	26	None	add
179	[BUG]  [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  if(start  <  0)  {  seekNonWs(pattern,  pos);  }  if(start  <  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	if(start    <    0)    {    seekNonWs(pattern,    pos);    }    if(start  <  0)  {  seekNonWs(pattern,  pos);  System.arraycopy(c,  start,  fmtCount,  readArgumentIndex(pattern,  pos));	  	non-compiled	[CE]  orphaned  default	26	None	add
180	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end(pos));  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  end(pos));  stripCustom.append(END_FE).append(index);  [BUGGY]    seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  end(pos));  stripCustom.append(END_FE).append(index);	      int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	1	None	replace
181	[BUG]  [BUGGY]  AppendQuotedString(pattern,  pos,  stripCustom);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);    [BUGGY]  AppendQuotedString(pattern,  pos,  stripCustom);  [BUGGY]    Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	169	169	1	replace	AppendQuotedString(pattern,  pos,  stripCustom);	  appendQuotedString(pattern,    pos);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
