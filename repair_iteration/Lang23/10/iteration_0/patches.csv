bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  [BUGGY]  appendQuotedString(pattern,  pos);  [BUGGY]  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendQuotedString(pattern,  pos);	seekNonWs(pattern,  pos);  	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	19	None	replace
2	[BUG]  [BUGGY]  if(c.length()  >  0)  {  seekNonWs(pattern,  pos);  }  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  [BUGGY]  if(c.length()  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  >  0)  {  seekNonWs(pattern,  pos);  }	seekNonWs(pattern,  pos);  	non-compiled	[CE]  cannot  find  symbol	19	None	replace
3	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  seekNonWs(pattern,  pos);  }  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  [BUGGY]  if(c.length()  ==  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  ==  0)  {  seekNonWs(pattern,  pos);  }	seekNonWs(pattern,  pos);  	non-compiled	[CE]  cannot  find  symbol	19	None	replace
4	[BUG]  [BUGGY]  if(c.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  [BUGGY]  if(c.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	seekNonWs(pattern,  pos);  	non-compiled	[CE]  cannot  find  symbol	19	None	replace
5	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]            junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  [BUGGY]    [BUGGY]  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	  	seekNonWs(pattern,  pos);  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	19	1	replace
6	[BUG]  [BUGGY]    [FE]  junit.framework.AssertionFailedError:  registry  [FE]            junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  [BUGGY]    [BUGGY]  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	  	seekNonWs(pattern,  pos);  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	19	1	replace
7	[BUG]  [BUGGY]    int  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  [BUGGY]    int  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	    int  fmtCount  =  readArgumentIndex(pattern,  pos);		non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	20	None	add
8	[BUG]  [BUGGY]    char[]  c  =  pattern.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  [BUGGY]    char[]  c  =  pattern.toCharArray();  [BUGGY]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	    char[]  c  =  pattern.toCharArray();		non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	20	None	add
9	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  [BUGGY]    fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	    fmtCount  =  readArgumentIndex(pattern,  pos);		compilable	  [FE]  IllegalArgumentException  	20	5	add
10	[BUG]  [BUGGY]    fmtCount  =  readArgumentIndex(pattern,  pos);  [FE]  IllegalArgumentException  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  [BUGGY]    fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	    fmtCount  =  readArgumentIndex(pattern,  pos);		compilable	  [FE]  IllegalArgumentException  	20	5	add
11	[BUG]  [BUGGY]    int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  [BUGGY]    int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [BUGGY]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	    int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());		non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	20	None	add
12	[BUG]  [BUGGY]    fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  [BUGGY]    fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [BUGGY]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	    fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());		non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	20	None	add
13	[BUG]  [BUGGY]    if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  [BUGGY]    if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }  [BUGGY]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	    if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }		non-compiled	[CE]  orphaned  default	20	None	add
14	[BUG]  [BUGGY]    if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFunction(it.next());  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  [BUGGY]    if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFunction(it.next());  }  [BUGGY]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	    if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFunction(it.next());  }		non-compiled	[CE]  orphaned  default	20	None	add
15	[BUG]  [BUGGY]    if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendAndSet(it.next());  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  [BUGGY]    if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendAndSet(it.next());  }  [BUGGY]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	    if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendAndSet(it.next());  }		non-compiled	[CE]  orphaned  default	20	None	add
16	[BUG]  [BUGGY]    pos.setIndex(index);  [CE]  cannot  find  symbol  index  [FE]          junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  [BUGGY]    pos.setIndex(index);  [BUGGY]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	    pos.setIndex(index);		non-compiled	[CE]  cannot  find  symbol  index	20	None	add
17	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  [BUGGY]  if(c.length()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	seekNonWs(pattern,  pos);  	non-compiled	[CE]  cannot  find  symbol	19	None	replace
18	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  [BUGGY]  if(c.length()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [BUGGY]  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }	seekNonWs(pattern,  pos);  	non-compiled	[CE]  cannot  find  symbol	19	None	replace
19	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  [BUGGY]  if(c.length()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	seekNonWs(pattern,  pos);  	non-compiled	[CE]  cannot  find  symbol	19	None	replace
20	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos));	seekNonWs(pattern,  pos);  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	19	None	replace
21	[BUG]  [BUGGY]    if(c.length()  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  [BUGGY]    if(c.length()  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	    if(c.length()  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }		non-compiled	[CE]  orphaned  default	20	None	add
22	[BUG]  [BUGGY]    if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  [BUGGY]    if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	    if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }		non-compiled	[CE]  orphaned  default	20	None	add
23	[BUG]  [BUGGY]  if(c.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  registry  [CONTEXT]  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  [BUGGY]  if(c.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	seekNonWs(pattern,  pos);  	non-compiled	[CE]  cannot  find  symbol	19	None	replace
