bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(pattern,  c);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(pattern,  c);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  >  0)  {  seekNonWs(pattern,  c);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
2	[BUG]  [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  >  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
3	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  start  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol  start	4	None	replace
4	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1);  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1);	      fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	12	None	replace
5	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  +  1);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  +  1);  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  +  1);	      fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	12	None	replace
6	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(c,  pos.getIndex());  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  fmtCount  =  readArgumentIndex(c,  pos.getIndex());  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(c,  pos.getIndex());	      fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	12	None	replace
7	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  start,  pos.getIndex());  [CE]  cannot  find  symbol  start  [FE]                      junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  start,  pos.getIndex());  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  start,  pos.getIndex());	      fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    	non-compiled	[CE]  cannot  find  symbol  start	12	None	replace
8	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index);  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index);	      int    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	7	None	replace
9	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start);  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start);	      int    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	7	None	replace
10	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  pos);	      int    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	7	None	replace
11	[BUG]  [BUGGY]  char[]  c  =  toPattern.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  char[]  c  =  toPattern.toCharArray();  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char[]  c  =  toPattern.toCharArray();	      char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	8	None	replace
12	[BUG]  [BUGGY]  char[]  c  =  pattern.toPattern();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  char[]  c  =  pattern.toPattern();  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char[]  c  =  pattern.toPattern();	      char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	8	None	replace
13	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray()  +  1;  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  char[]  c  =  pattern.toCharArray()  +  1;  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char[]  c  =  pattern.toCharArray()  +  1;	      char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	8	None	replace
14	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendQuotedString(pattern,  pos,  stripCustom);	  appendQuotedString(pattern,    pos);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	1	None	replace
15	[BUG]  [BUGGY]  appendQuotedString(pattern,  fmtCount,  stripCustom);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  appendQuotedString(pattern,  fmtCount,  stripCustom);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendQuotedString(pattern,  fmtCount,  stripCustom);	  appendQuotedString(pattern,    pos);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	1	None	replace
16	[BUG]  [BUGGY]  appendQuotedString(c,  pos);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  appendQuotedString(c,  pos);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendQuotedString(c,  pos);	  appendQuotedString(pattern,    pos);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	1	None	replace
17	[BUG]  [BUGGY]  appendQuotedString(c,  pattern,  pos);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  appendQuotedString(c,  pattern,  pos);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendQuotedString(c,  pattern,  pos);	  appendQuotedString(pattern,    pos);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	1	None	replace
18	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendAndSet(it.next());  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendAndSet(it.next());  }  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendAndSet(it.next());  }	      if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendAndSet(it.next());    }    	non-compiled	[CE]  orphaned  default	15	None	replace
19	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.size();  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  int  fmtCount  =  foundDescriptions.size();  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  foundDescriptions.size();	      if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendAndSet(it.next());    }    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	15	None	replace
20	[BUG]  [BUGGY]  Integer  fmtCount  =  foundDescriptions.iterator();  it.hasNext();)  {  appendAndSet(fmtCount);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  Integer  fmtCount  =  foundDescriptions.iterator();  it.hasNext();)  {  appendAndSet(fmtCount);  }  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	Integer  fmtCount  =  foundDescriptions.iterator();  it.hasNext();)  {  appendAndSet(fmtCount);  }	      if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendAndSet(it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
21	[BUG]  [BUGGY]  if(pos.length()  ==  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(pos.length()  ==  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  ==  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
22	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(c.length()  ==  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  ==  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
23	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  IllegalArgumentException  	17	5	replace
24	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [FE]  IllegalArgumentException  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  IllegalArgumentException  	17	5	replace
25	[BUG]  [BUGGY]  if(pos.length()  ==  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(pos.length()  ==  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  ==  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
26	[BUG]  [BUGGY]  if(c.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(c.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
27	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);	  if(c.length()    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	19	None	replace
28	[BUG]  [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(pattern,  c);  }  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(pattern,  c);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  >  0)  {  seekNonWs(pattern,  c);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
29	[BUG]  [BUGGY]  if(c.length()  >  0)  {  seekNonWs(pattern,  fmtCount);  }  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(c.length()  >  0)  {  seekNonWs(pattern,  fmtCount);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  >  0)  {  seekNonWs(pattern,  fmtCount);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
30	[BUG]  [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(c,  pos);  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(c,  pos);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  >  0)  {  seekNonWs(c,  pos);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
31	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	      if(c.length()    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  orphaned  default	22	None	replace
32	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	      if(c.length()    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  orphaned  default	22	None	replace
33	[BUG]  [BUGGY]  if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(c.length()    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  orphaned  default	22	None	replace
34	[BUG]  [BUGGY]  if(pos.length()  ==  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(pos.length()  ==  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  ==  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(START_FE).append(index);    }    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
35	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(START_FE).append(index);    }    	compilable	  [FE]  IllegalArgumentException  	18	5	replace
36	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [FE]  IllegalArgumentException  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(START_FE).append(index);    }    	compilable	  [FE]  IllegalArgumentException  	18	5	replace
37	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(c.length()  ==  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  ==  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(START_FE).append(index);    }    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
38	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }	      if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendFormat(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	13	None	replace
39	[BUG]  [BUGGY]  Integer  fmtCount  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  Integer  fmtCount  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	Integer  fmtCount  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }	      if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendFormat(DUMMY_PATTERN);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
40	[BUG]  [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
41	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	23	1	replace
42	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	23	1	replace
43	[BUG]  [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(pattern,  c);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(pattern,  c);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  >  0)  {  seekNonWs(pattern,  c);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
44	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(c.length()  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	      if(c.length()    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	21	None	replace
45	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	      if(c.length()    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	21	None	replace
46	[BUG]  [BUGGY]  if(c.length()  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(c.length()  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }	      if(c.length()    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	21	None	replace
47	[BUG]  [BUGGY]  if(pos.length()  ==  0)  {  seekNonWs(pattern,  c);  }  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(pos.length()  ==  0)  {  seekNonWs(pattern,  c);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  ==  0)  {  seekNonWs(pattern,  c);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
48	[BUG]  [BUGGY]  if(pos.length()  ==  0)  {  seekNonWs(pattern,  c.length());  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(pos.length()  ==  0)  {  seekNonWs(pattern,  c.length());  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  ==  0)  {  seekNonWs(pattern,  c.length());  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
49	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  seekNonWs(pattern,  fmtCount);  }  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(c.length()  ==  0)  {  seekNonWs(pattern,  fmtCount);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  ==  0)  {  seekNonWs(pattern,  fmtCount);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
50	[BUG]  [BUGGY]      if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]      if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	        if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  true);  break;  }	  	non-compiled	[CE]  orphaned  default	5	None	add
51	[BUG]  [BUGGY]      if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  true);  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]      if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	        if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  true);  }	  	non-compiled	[CE]  orphaned  default	5	None	add
52	[BUG]  [BUGGY]      if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]      if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	        if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  	non-compiled	[CE]  orphaned  default	5	None	add
53	[BUG]  [BUGGY]      if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(c[i]);  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]      if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(c[i]);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	        if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(c[i]);  }	  	non-compiled	[CE]  orphaned  default	5	None	add
54	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  pos.setIndex(fmtCount);  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	pos.setIndex(fmtCount);	      pos.setIndex(index);    	compilable	  [FE]  IllegalArgumentException  	16	5	replace
55	[BUG]  [BUGGY]  pos.setIndex(fmtCount);  [FE]  IllegalArgumentException  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  pos.setIndex(fmtCount);  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	pos.setIndex(fmtCount);	      pos.setIndex(index);    	compilable	  [FE]  IllegalArgumentException  	16	5	replace
56	[BUG]  [BUGGY]  pos.setIndex(start);  [CE]  cannot  find  symbol  start  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  pos.setIndex(start);  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	pos.setIndex(start);	      pos.setIndex(index);    	non-compiled	[CE]  cannot  find  symbol  start	16	None	replace
57	[BUG]  [BUGGY]  pos.setIndex(i);  [CE]  cannot  find  symbol  i  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  pos.setIndex(i);  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	pos.setIndex(i);	      pos.setIndex(index);    	non-compiled	[CE]  cannot  find  symbol  i	16	None	replace
58	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  START_FE);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  START_FE);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  START_FE);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	20	None	replace
59	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(0));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(0));  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(0));	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	20	None	replace
60	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	20	None	replace
61	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFunction(it.next());  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFunction(it.next());  }  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFunction(it.next());  }	      if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendFunction(it.next());    }    	non-compiled	[CE]  orphaned  default	14	None	replace
62	[BUG]  [BUGGY]  Integer  fmtCount  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFunction(it.next());  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  Integer  fmtCount  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFunction(it.next());  }  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	Integer  fmtCount  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFunction(it.next());  }	      if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendFunction(it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
63	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  index);  [CE]  cannot  find  symbol  index  [FE]    IllegalArgumentException    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  index);  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  index);	      fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  cannot  find  symbol  index	10	None	replace
64	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  start);  [CE]  cannot  find  symbol  start  [FE]      IllegalArgumentException    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  start);  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  start);	      fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  cannot  find  symbol  start	10	None	replace
65	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  1);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  1);  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  1);	      fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	10	None	replace
66	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(c,  pos);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  fmtCount  =  readArgumentIndex(c,  pos);  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(c,  pos);	      fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	10	None	replace
67	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1);  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1);	      int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	11	None	replace
68	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  +  1);  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  +  1);	      int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	11	None	replace
69	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  pos.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  pos.getIndex());  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(c,  pos.getIndex());	      int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	11	None	replace
70	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());	      int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	11	None	replace
71	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]      fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	        fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount  =  readArgumentIndex(pattern,  pos);	  	compilable	  [FE]  IllegalArgumentException  	9	5	add
72	[BUG]  [BUGGY]      fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]      fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	        fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount  =  readArgumentIndex(pattern,  pos);	  	compilable	  [FE]  IllegalArgumentException  	9	5	add
73	[BUG]  [BUGGY]      fmtCount  =  readArgumentIndex(pattern,  pos);  int  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]      IllegalArgumentException    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]      fmtCount  =  readArgumentIndex(pattern,  pos);  int  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	        fmtCount    =    readArgumentIndex(pattern,    pos);    int  fmtCount  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	9	None	add
74	[BUG]  [BUGGY]      fmtCount  =  readArgumentIndex(pattern,  pos);  Integer  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        IllegalArgumentException    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]      fmtCount  =  readArgumentIndex(pattern,  pos);  Integer  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	        fmtCount    =    readArgumentIndex(pattern,    pos);    Integer  fmtCount  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	9	None	add
75	[BUG]  [BUGGY]      fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos));  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]      fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos));  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	        fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount  =  readArgumentIndex(pattern,  pos));	  	non-compiled	[CE]  ';'  expected	9	None	add
76	[BUG]  [BUGGY]  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendAndSet(it.next());  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendAndSet(it.next());  }  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendAndSet(it.next());  }	      if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendAndSet(it.next());    }    	non-compiled	[CE]  orphaned  default	15	None	replace
77	[BUG]  [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendAndSet(it.next());  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendAndSet(it.next());  }  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendAndSet(it.next());  }	      if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendAndSet(it.next());    }    	non-compiled	[CE]  orphaned  default	15	None	replace
78	[BUG]  [BUGGY]  if(c.length()!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(c.length()!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
79	[BUG]  [BUGGY]  if(c.length()  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(c.length()  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
80	[BUG]  [BUGGY]  AppendQuotedString(pattern,  pos,  stripCustom);  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  AppendQuotedString(pattern,  pos,  stripCustom);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	AppendQuotedString(pattern,  pos,  stripCustom);	  appendQuotedString(pattern,    pos);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
81	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(c.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	      if(c.length()    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  orphaned  default	22	None	replace
82	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    IllegalArgumentException    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos  +  1);  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos  +  1);	      fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	10	None	replace
83	[BUG]  [BUGGY]  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }	      if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendFormat(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	13	None	replace
84	[BUG]  [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }	      if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendFormat(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	13	None	replace
85	[BUG]  [BUGGY]      if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()  ==  0)  {  continue;  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]      if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()  ==  0)  {  continue;  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	        if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()  ==  0)  {  continue;  }	  	non-compiled	[CE]  orphaned  default	5	None	add
86	[BUG]  [BUGGY]      if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  fmtCount,  foundFormats.length);  }  else  {  System.arraycopy(c,  0,  fmtCount,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]      if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  fmtCount,  foundFormats.length);  }  else  {  System.arraycopy(c,  0,  fmtCount,  foundFormats.length);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	        if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  fmtCount,  foundFormats.length);  }  else  {  System.arraycopy(c,  0,  fmtCount,  foundFormats.length);  }	  	non-compiled	[CE]  cannot  find  symbol  length	5	None	add
87	[BUG]  [BUGGY]      if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()  ==  0)  {  return;  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]      if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()  ==  0)  {  return;  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	        if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()  ==  0)  {  return;  }	  	non-compiled	[CE]  orphaned  default	5	None	add
88	[BUG]  [BUGGY]      if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  fmtCount,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]      if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  fmtCount,  foundFormats.length);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	        if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  fmtCount,  foundFormats.length);  }	  	non-compiled	[CE]  cannot  find  symbol  length	5	None	add
89	[BUG]  [BUGGY]      if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.charAt(i)!=  '-')  {  continue;  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]      if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.charAt(i)!=  '-')  {  continue;  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	        if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.charAt(i)!=  '-')  {  continue;  }	  	non-compiled	[CE]  orphaned  default	5	None	add
90	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1,  c);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1,  c);  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1,  c);	      fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	12	None	replace
91	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  END_FE);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  END_FE);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  END_FE);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	20	None	replace
92	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  0);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  0);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  0);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	20	None	replace
93	[BUG]  [BUGGY]  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFunction(it.next());  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFunction(it.next());  }  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFunction(it.next());  }	      if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendFunction(it.next());    }    	non-compiled	[CE]  orphaned  default	14	None	replace
94	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(it.next());  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(it.next());  }  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(it.next());  }	      if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendFunction(it.next());    }    	non-compiled	[CE]  orphaned  default	14	None	replace
95	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()));  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()));	      int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	11	None	replace
96	[BUG]  [BUGGY]      fmtCount  =  readArgumentIndex(pattern,  pos);  String  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]    IllegalArgumentException    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]      fmtCount  =  readArgumentIndex(pattern,  pos);  String  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	        fmtCount    =    readArgumentIndex(pattern,    pos);    String  fmtCount  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	9	None	add
97	[BUG]  [BUGGY]  char[]  c  =  this.pattern.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  char[]  c  =  this.pattern.toCharArray();  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char[]  c  =  this.pattern.toCharArray();	      char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	8	None	replace
98	[BUG]  [BUGGY]  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  start  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol  start	4	None	replace
99	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(c.length()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
100	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  if(c.length()  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(fmtCount  ==  0)  {  if(c.length()  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  if(c.length()  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	      if(c.length()    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	21	None	replace
101	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(c!=  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c!=  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	      if(c.length()    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	21	None	replace
102	[BUG]  [BUGGY]  if(c.length()!=  0)  {  seekNonWs(pattern,  pos);  }  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(c.length()!=  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()!=  0)  {  seekNonWs(pattern,  pos);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
103	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	23	1	replace
104	[BUG]  [BUGGY]  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	23	1	replace
105	[BUG]  [BUGGY]  if(c.length()  <  0)  {  seekNonWs(pattern,  pos);  }  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(c.length()  <  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  <  0)  {  seekNonWs(pattern,  pos);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
106	[BUG]  [BUGGY]  if(c.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(c.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
107	[BUG]  [BUGGY]  if(c.length()!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(c.length()!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
108	[BUG]  [BUGGY]  if(c.length()  <  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(c.length()  <  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  <  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	      if(c.length()    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  orphaned  default	22	None	replace
109	[BUG]  [BUGGY]  if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.remove());  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.remove());  }  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.remove());  }	      if(c.length()    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  orphaned  default	22	None	replace
110	[BUG]  [BUGGY]  if(c.length()  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(c.length()  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
111	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	23	1	replace
112	[BUG]  [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	23	1	replace
113	[BUG]  [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFunction(it.next());  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFunction(it.next());  }  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFunction(it.next());  }	      if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendFunction(it.next());    }    	non-compiled	[CE]  orphaned  default	14	None	replace
114	[BUG]  [BUGGY]  if(fmtCount  <  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFunction(it.next());  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(fmtCount  <  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFunction(it.next());  }  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  <  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFunction(it.next());  }	      if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendFunction(it.next());    }    	non-compiled	[CE]  orphaned  default	14	None	replace
115	[BUG]  [BUGGY]  if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	      	non-compiled	[CE]  orphaned  default	6	None	replace
116	[BUG]  [BUGGY]  if(c.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(c.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(START_FE).append(index);    }    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
117	[BUG]  [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  start  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol  start	4	None	replace
118	[BUG]  [BUGGY]  if(next(pos.getIndex())  ==  0)  {  seekNonWs(pattern,  pos);  }  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(next(pos.getIndex())  ==  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(next(pos.getIndex())  ==  0)  {  seekNonWs(pattern,  pos);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	3	None	replace
119	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	fmtCount  =  readArgumentIndex(pattern,  next(pos));	      fmtCount    =    readArgumentIndex(pattern,    pos);    	compilable	  [FE]  IllegalArgumentException  	10	5	replace
120	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  next(pos));	      fmtCount    =    readArgumentIndex(pattern,    pos);    	compilable	  [FE]  IllegalArgumentException  	10	5	replace
121	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  0);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]      IllegalArgumentException    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  0);  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  0);	      fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	10	None	replace
122	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  2);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  2);  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  2);	      int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	11	None	replace
123	[BUG]  [BUGGY]  if(c.length()  <  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(c.length()  <  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  <  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	      if(c.length()    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	21	None	replace
124	[BUG]  [BUGGY]  if(c.length()  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(c.length()  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
125	[BUG]  [BUGGY]  pos.setIndex(FIELD_FE);  [CE]  cannot  find  symbol  FIELD_FE  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  pos.setIndex(FIELD_FE);  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	pos.setIndex(FIELD_FE);	      pos.setIndex(index);    	non-compiled	[CE]  cannot  find  symbol  FIELD_FE	16	None	replace
126	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  c);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  c);  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos,  c);	      int    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	7	None	replace
127	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  END_FE);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  END_FE);  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos,  END_FE);	      int    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	7	None	replace
128	[BUG]  [BUGGY]  if(next(pos.getIndex())>  0)  {  seekNonWs(pattern,  pos);  }  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  if(next(pos.getIndex())>  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(next(pos.getIndex())>  0)  {  seekNonWs(pattern,  pos);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	2	None	replace
129	[BUG]  [BUGGY]      if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]      if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	        if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }	  	non-compiled	[CE]  orphaned  default	5	None	add
130	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	appendQuotedString(pattern,  pos,  stripCustom,  true);	  appendQuotedString(pattern,    pos);    	compilable	  [FE]  IllegalArgumentException  	1	5	replace
131	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  [FE]  IllegalArgumentException  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]    int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendQuotedString(pattern,  pos,  stripCustom,  true);	  appendQuotedString(pattern,    pos);    	compilable	  [FE]  IllegalArgumentException  	1	5	replace
132	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  c);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;    [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  c);  [BUGGY]    seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  c);	      fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	12	None	replace
