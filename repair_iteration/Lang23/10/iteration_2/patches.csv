bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(pos.length()!=  0)  {  seekNonWs(pattern,  c);  }  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()!=  0)  {  seekNonWs(pattern,  c);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()!=  0)  {  seekNonWs(pattern,  c);  }	  if(c.length()!=    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
2	[BUG]  [BUGGY]  if(pos.length()  >=  0)  {  seekNonWs(pattern,  c);  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  >=  0)  {  seekNonWs(pattern,  c);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  >=  0)  {  seekNonWs(pattern,  c);  }	  if(c.length()!=    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
3	[BUG]  [BUGGY]  if(c.length()!=  0)  {  seekNonWs(pattern,  fmtCount);  }  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()!=  0)  {  seekNonWs(pattern,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()!=  0)  {  seekNonWs(pattern,  fmtCount);  }	  if(c.length()!=    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
4	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(c[i]);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(c[i]);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(c[i]);  }	          if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    appendString(c[i]);    }    	non-compiled	[CE]  orphaned  default	53	None	replace
5	[BUG]  [BUGGY]  Integer  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  Integer  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	Integer  fmtCount  =  readArgumentIndex(pattern,  pos);	          if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    appendString(c[i]);    }    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	53	None	replace
6	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(c,  pos.getIndex()  -  1,  pattern);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(c,  pos.getIndex()  -  1,  pattern);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(c,  pos.getIndex()  -  1,  pattern);	  fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    -    1,    c);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	90	None	replace
7	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1,  c,  END_FE);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1,  c,  END_FE);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1,  c,  END_FE);	  fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    -    1,    c);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	90	None	replace
8	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1,  c,  fmtCount);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1,  c,  fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1,  c,  fmtCount);	  fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    -    1,    c);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	90	None	replace
9	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1,  c,  START_FE);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1,  c,  START_FE);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1,  c,  START_FE);	  fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    -    1,    c);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	90	None	replace
10	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(pos.getIndex()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	111	1	add
11	[BUG]  [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.getIndex()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	111	1	add
12	[BUG]  [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(pos.getIndex()  >  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(pos.getIndex()  >  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.getIndex()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(pos.getIndex()  >  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	111	None	add
13	[BUG]  [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(pos.getIndex()  >  0)  {  seekNonWs(c,  fmtCount,  fmtCount);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(pos.getIndex()  >  0)  {  seekNonWs(c,  fmtCount,  fmtCount);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.getIndex()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(pos.getIndex()  >  0)  {  seekNonWs(c,  fmtCount,  fmtCount);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	111	None	add
14	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(pos.getIndex()  >  0)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(pos.getIndex()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(pos.getIndex()  >  0)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	111	1	add
15	[BUG]  [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(pos.getIndex()  >  0)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(pos.getIndex()  >  0)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.getIndex()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(pos.getIndex()  >  0)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	111	1	add
16	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);	  if(fmtCount    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(START_FE).append(index);    }    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	36	None	replace
17	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }	  if(fmtCount    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(START_FE).append(index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	36	1	replace
18	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }	  if(fmtCount    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(START_FE).append(index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	36	1	replace
19	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(fmtCount    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(START_FE).append(index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	36	1	replace
20	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(fmtCount    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(START_FE).append(index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	36	1	replace
21	[BUG]  [BUGGY]  Integer  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  Integer  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	Integer  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);	  if(fmtCount    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(START_FE).append(index);    }    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	36	None	replace
22	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  c);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  c);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  c);	  int    fmtCount    =    readArgumentIndex(pattern,    pos,    c);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	126	None	replace
23	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  c);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  c);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  c);	  int    fmtCount    =    readArgumentIndex(pattern,    pos,    c);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	126	None	replace
24	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  START_FE);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  START_FE);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos,  START_FE);	  int    fmtCount    =    readArgumentIndex(pattern,    pos,    c);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	126	None	replace
25	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos,  c);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos,  c);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  pos,  c);	  int    fmtCount    =    readArgumentIndex(pattern,    pos,    c);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	126	None	replace
26	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }	  if(c.length()    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    	non-compiled	[CE]  orphaned  default	46	None	replace
27	[BUG]  [BUGGY]  if(pos.length()  ==  0)  {  seekNonWs(pattern,  c);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  ==  0)  {  seekNonWs(pattern,  c);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  ==  0)  {  seekNonWs(pattern,  c);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
28	[BUG]  [BUGGY]  if(pos.length()  ==  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  ==  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  ==  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
29	[BUG]  [BUGGY]  if(fmtCount.length()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  int  cannot  be  dereferenced  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount.length()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount.length()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	99	None	replace
30	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(stripCustom!=  null)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(stripCustom!=  null)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(stripCustom.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	104	1	replace
31	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(stripCustom!=  null)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(stripCustom!=  null)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(stripCustom.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	104	1	replace
32	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(stripCustom.length()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(stripCustom.length()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(stripCustom.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	104	1	replace
33	[BUG]  [BUGGY]  if(stripCustom.length()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(stripCustom.length()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(stripCustom.length()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(stripCustom.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	104	1	replace
34	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  -  1));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  -  1));  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  -  1));	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos.getIndex()));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	95	None	replace
35	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  +  1));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  +  1));  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  +  1));	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos.getIndex()));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	95	None	replace
36	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index(pos.getIndex()));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index(pos.getIndex()));  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index(pos.getIndex()));	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos.getIndex()));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	95	None	replace
37	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()));  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()));	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos.getIndex()));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	95	None	replace
38	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos));  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	fmtCount    =    readArgumentIndex(pattern,    next(pos));    fmtCount  =  readArgumentIndex(pattern,  next(pos));	  	compilable	  [FE]  IllegalArgumentException  	119	5	add
39	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos));  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos));  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount    =    readArgumentIndex(pattern,    next(pos));    fmtCount  =  readArgumentIndex(pattern,  next(pos));	  	compilable	  [FE]  IllegalArgumentException  	119	5	add
40	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos));  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]      IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos));  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount    =    readArgumentIndex(pattern,    next(pos));    int  fmtCount  =  readArgumentIndex(pattern,  next(pos));	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	119	None	add
41	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos));  Integer  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos));  Integer  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount    =    readArgumentIndex(pattern,    next(pos));    Integer  fmtCount  =  readArgumentIndex(pattern,  next(pos));	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	119	None	add
42	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos));  String  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos));  String  fmtCount  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount    =    readArgumentIndex(pattern,    next(pos));    String  fmtCount  =  readArgumentIndex(pattern,  next(pos));	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	119	None	add
43	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos));  fmtCount  =  readArgumentIndex(pattern,  next(0));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos));  fmtCount  =  readArgumentIndex(pattern,  next(0));  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount    =    readArgumentIndex(pattern,    next(pos));    fmtCount  =  readArgumentIndex(pattern,  next(0));	  	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	119	None	add
44	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  0,  c.length);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  0,  c.length);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  0,  c.length);	  fmtCount    =    readArgumentIndex(pattern,    0);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	121	None	replace
45	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  index,  0);  [CE]  cannot  find  symbol  index  [FE]            IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  index,  0);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  index,  0);	  fmtCount    =    readArgumentIndex(pattern,    0);    	non-compiled	[CE]  cannot  find  symbol  index	121	None	replace
46	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  start,  0);  [CE]  cannot  find  symbol  start  [FE]              IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  start,  0);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  start,  0);	  fmtCount    =    readArgumentIndex(pattern,    0);    	non-compiled	[CE]  cannot  find  symbol  start	121	None	replace
47	[BUG]  [BUGGY]  if(pos  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(fmtCount    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	3	None	replace
48	[BUG]  [BUGGY]  if(i  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  i  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(i  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(i  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(fmtCount    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol  i	3	None	replace
49	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(0));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(0));  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  next(0));	  fmtCount    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	120	None	replace
50	[BUG]  [BUGGY]  fmtCount  =  parseFormatDescription(pattern,  next(pos));  [CE]  incompatible  types  [FE]      IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  parseFormatDescription(pattern,  next(pos));  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  parseFormatDescription(pattern,  next(pos));	  fmtCount    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  incompatible  types	120	None	replace
51	[BUG]  [BUGGY]  pos.setIndex(FIRST_FE);  [CE]  cannot  find  symbol  FIRST_FE  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  pos.setIndex(FIRST_FE);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	pos.setIndex(FIRST_FE);	  pos.setIndex(start);    	non-compiled	[CE]  cannot  find  symbol  FIRST_FE	56	None	replace
52	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.charAt(i)!=  '-')  {  continue;  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.charAt(i)!=  '-')  {  continue;  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.charAt(i)!=  '-')  {  continue;  }	          if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    c    =    it.next();    if(c.charAt(i)!=    '-')    {    continue;    }    	non-compiled	[CE]  orphaned  default	89	None	replace
53	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.charAt(i)!=  '-')  {  continue  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.charAt(i)!=  '-')  {  continue  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.charAt(i)!=  '-')  {  continue	          if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    c    =    it.next();    if(c.charAt(i)!=    '-')    {    continue;    }    	non-compiled	[CE]  ';'  expected	89	None	replace
54	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.charAt(i)  ==  '-')  {  continue;  }  [CE]  orphaned  default  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.charAt(i)  ==  '-')  {  continue;  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.charAt(i)  ==  '-')  {  continue;  }	          if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    c    =    it.next();    if(c.charAt(i)!=    '-')    {    continue;    }    	non-compiled	[CE]  orphaned  default	89	None	replace
55	[BUG]  [BUGGY]  if(pos.length()  <  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  <  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  <  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
56	[BUG]  [BUGGY]  if(c.length()  <  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  <  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  <  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
57	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(fmtCount  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  IllegalArgumentException  	110	5	replace
58	[BUG]  [BUGGY]  if(fmtCount  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [FE]  IllegalArgumentException  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  IllegalArgumentException  	110	5	replace
59	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  end);  [CE]  cannot  find  symbol  end  [FE]        IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  end);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  end);	  fmtCount    =    readArgumentIndex(pattern,    index);    	non-compiled	[CE]  cannot  find  symbol  end	63	None	replace
60	[BUG]  [BUGGY]  if(pos.getIndex()  <  fmtCount)  {  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [CE]  orphaned  default  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.getIndex()  <  fmtCount)  {  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.getIndex()  <  fmtCount)  {  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(fmtCount    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  orphaned  default	42	None	replace
61	[BUG]  [BUGGY]  if(pos.getIndex()  <  fmtCount)  {  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  [CE]  orphaned  default  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.getIndex()  <  fmtCount)  {  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.getIndex()  <  fmtCount)  {  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }	  if(fmtCount    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  orphaned  default	42	None	replace
62	[BUG]  [BUGGY]  if(pos.getIndex()  <  fmtCount)  {  if(fmtCount  >  1)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.getIndex()  <  fmtCount)  {  if(fmtCount  >  1)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.getIndex()  <  fmtCount)  {  if(fmtCount  >  1)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(fmtCount    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  orphaned  default	42	None	replace
63	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  pos);	  int    fmtCount    =    readArgumentIndex(pattern,    start);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	9	None	replace
64	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  index);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  index);	  int    fmtCount    =    readArgumentIndex(pattern,    start);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	9	None	replace
65	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]          fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	                fmtCount        =        readArgumentIndex(pattern,        pos);        fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);	  	compilable	  [FE]  IllegalArgumentException  	71	5	add
66	[BUG]  [BUGGY]          fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]          fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	                fmtCount        =        readArgumentIndex(pattern,        pos);        fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);	  	compilable	  [FE]  IllegalArgumentException  	71	5	add
67	[BUG]  [BUGGY]          fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount  =  readArgumentIndex(pattern,  pos);  int  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]      IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]          fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount  =  readArgumentIndex(pattern,  pos);  int  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	                fmtCount        =        readArgumentIndex(pattern,        pos);        fmtCount    =    readArgumentIndex(pattern,    pos);    int  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	71	None	add
68	[BUG]  [BUGGY]          fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount  =  readArgumentIndex(pattern,  pos);  Integer  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]          fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount  =  readArgumentIndex(pattern,  pos);  Integer  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	                fmtCount        =        readArgumentIndex(pattern,        pos);        fmtCount    =    readArgumentIndex(pattern,    pos);    Integer  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	71	None	add
69	[BUG]  [BUGGY]          fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount  =  readArgumentIndex(pattern,  pos);  String  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]          fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount  =  readArgumentIndex(pattern,  pos);  String  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	                fmtCount        =        readArgumentIndex(pattern,        pos);        fmtCount    =    readArgumentIndex(pattern,    pos);    String  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	71	None	add
70	[BUG]  [BUGGY]          fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  [CE]  ')'  expected  [FE]            IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]          fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	                fmtCount        =        readArgumentIndex(pattern,        pos);        fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,	  	non-compiled	[CE]  ')'  expected	71	None	add
71	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  index));  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  index));  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  index));	          fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount    =    readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  ';'  expected	75	None	replace
72	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos)+  1;  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	fmtCount  =  readArgumentIndex(pattern,  pos)+  1;	          fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount    =    readArgumentIndex(pattern,    pos));    	compilable	  [FE]  IllegalArgumentException  	75	5	replace
73	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos)+  1;  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos)+  1;  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos)+  1;	          fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount    =    readArgumentIndex(pattern,    pos));    	compilable	  [FE]  IllegalArgumentException  	75	5	replace
74	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos  +  1));  [CE]  ';'  expected  [FE]                  IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos  +  1));  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos  +  1));	          fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount    =    readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  ';'  expected	75	None	replace
75	[BUG]  [BUGGY]  Integer  fmtCount  =  foundDescriptions.size();  for(Iterator  it  =  fmtCount;  it.hasNext();)  {  appendFunction(it.next());  }  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  Integer  fmtCount  =  foundDescriptions.size();  for(Iterator  it  =  fmtCount;  it.hasNext();)  {  appendFunction(it.next());  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	Integer  fmtCount  =  foundDescriptions.size();  for(Iterator  it  =  fmtCount;  it.hasNext();)  {  appendFunction(it.next());  }	  if(fmtCount    <    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendFunction(it.next());    }    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	114	None	replace
76	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);	  if(fmtCount    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	24	None	replace
77	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  index,  pos.getIndex());  [CE]  cannot  find  symbol  index  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  index,  pos.getIndex());  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  index,  pos.getIndex());	  fmtCount    =    readArgumentIndex(pattern,    start,    pos.getIndex());    	non-compiled	[CE]  cannot  find  symbol  index	7	None	replace
78	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos,  pos.getIndex());  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos,  pos.getIndex());  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos,  pos.getIndex());	  fmtCount    =    readArgumentIndex(pattern,    start,    pos.getIndex());    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	7	None	replace
79	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	45	None	replace
80	[BUG]  [BUGGY]  if(c.length()  >  0)  {  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  >  0)  {  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  >  0)  {  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	45	None	replace
81	[BUG]  [BUGGY]  char[]  c  =  pattern.toString();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  char[]  c  =  pattern.toString();  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char[]  c  =  pattern.toString();	  char[]    c    =    pattern.toPattern();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	12	None	replace
82	[BUG]  [BUGGY]  if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  orphaned  default	32	None	replace
83	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.remove());  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.remove());  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.remove());  }	  if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  orphaned  default	32	None	replace
84	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(it.next());  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(it.next());  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(it.next());  }	  if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(it.next());    }    	non-compiled	[CE]  orphaned  default	94	None	replace
85	[BUG]  [BUGGY]  Integer  fmtCount  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(it.next());  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  Integer  fmtCount  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(it.next());  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	Integer  fmtCount  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(it.next());  }	  if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
86	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos  +  1,  c.length  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos  +  1,  c.length  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos  +  1,  c.length  +  1);	  fmtCount    =    readArgumentIndex(pattern,    pos    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	82	None	replace
87	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  index  +  1);  [CE]  cannot  find  symbol  index  [FE]          IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  index  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  index  +  1);	  fmtCount    =    readArgumentIndex(pattern,    pos    +    1);    	non-compiled	[CE]  cannot  find  symbol  index	82	None	replace
88	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos  +  1,  c.length);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos  +  1,  c.length);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos  +  1,  c.length);	  fmtCount    =    readArgumentIndex(pattern,    pos    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	82	None	replace
89	[BUG]  [BUGGY]  if(pos.length()  ==  0)  {  seekNonWs(c,  pos);  }  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  ==  0)  {  seekNonWs(c,  pos);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  ==  0)  {  seekNonWs(c,  pos);  }	  if(pos.length()    ==    0)    {    seekNonWs(pattern,    c);    }    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
90	[BUG]  [BUGGY]  if(pos.length()  ==  0)  {  seekNonWs(c,  pattern);  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  ==  0)  {  seekNonWs(c,  pattern);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  ==  0)  {  seekNonWs(c,  pattern);  }	  if(pos.length()    ==    0)    {    seekNonWs(pattern,    c);    }    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
91	[BUG]  [BUGGY]  if(pos.length()  ==  0)  {  seekNonWs(pattern,  fmtCount);  }  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  ==  0)  {  seekNonWs(pattern,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  ==  0)  {  seekNonWs(pattern,  fmtCount);  }	  if(pos.length()    ==    0)    {    seekNonWs(pattern,    c);    }    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
92	[BUG]  [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(stripCustom.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
93	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(stripCustom.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	103	1	add
94	[BUG]  [BUGGY]  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(stripCustom.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	103	1	add
95	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(stripCustom.length()  >  0)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(stripCustom.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(stripCustom.length()  >  0)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	103	1	add
96	[BUG]  [BUGGY]  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(stripCustom.length()  >  0)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(stripCustom.length()  >  0)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(stripCustom.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(stripCustom.length()  >  0)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	103	1	add
97	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(stripCustom.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	103	1	add
98	[BUG]  [BUGGY]  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(stripCustom.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	103	1	add
99	[BUG]  [BUGGY]  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(stripCustom.length()  >  0)  {  seekNonWs(c,  fmtCount,  fmtCount);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(stripCustom.length()  >  0)  {  seekNonWs(c,  fmtCount,  fmtCount);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(stripCustom.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(stripCustom.length()  >  0)  {  seekNonWs(c,  fmtCount,  fmtCount);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	103	None	add
100	[BUG]  [BUGGY]  Integer  fmtCount  =  foundDescriptions.size();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  Integer  fmtCount  =  foundDescriptions.size();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	Integer  fmtCount  =  foundDescriptions.size();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }	  Integer    fmtCount    =    foundDescriptions.iterator();    it.hasNext();)    {    appendFormat(DUMMY_PATTERN);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
101	[BUG]  [BUGGY]  char  fmtCount  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  char  fmtCount  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char  fmtCount  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }	  Integer    fmtCount    =    foundDescriptions.iterator();    it.hasNext();)    {    appendFormat(DUMMY_PATTERN);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
102	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.size();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  foundDescriptions.size();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  foundDescriptions.size();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }	  Integer    fmtCount    =    foundDescriptions.iterator();    it.hasNext();)    {    appendFormat(DUMMY_PATTERN);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
103	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	  if(c.length()    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  orphaned  default	115	None	replace
104	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	  if(c.length()    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  orphaned  default	115	None	replace
105	[BUG]  [BUGGY]  n  =  readArgumentIndex(pattern,  pos);  [CE]  cannot  find  symbol  n  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  n  =  readArgumentIndex(pattern,  pos);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	n  =  readArgumentIndex(pattern,  pos);	          fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  cannot  find  symbol  n	72	None	replace
106	[BUG]  [BUGGY]  if(pos.length()  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	  if(c.length()    >=    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
107	[BUG]  [BUGGY]  if(pos.length()  >=  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  >=  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  >=  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	  if(c.length()    >=    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
108	[BUG]  [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  >  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(pos.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
109	[BUG]  [BUGGY]  if(pos.length()  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(pos.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
110	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index(0));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index(0));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index(0));	  int    fmtCount    =    readArgumentIndex(pattern,    next(0));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	59	None	replace
111	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(1));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(1));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(1));	  int    fmtCount    =    readArgumentIndex(pattern,    next(0));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	59	None	replace
112	[BUG]  [BUGGY]  if(pos.getIndex()  ==  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.getIndex()  ==  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.getIndex()  ==  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	  if(pos.length()    ==    0)    {    seekNonWs(pattern,    c);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	25	None	replace
113	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  findDescriptions.iterator();  it.hasNext();)  {  appendAndSet(it.next());  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  findDescriptions.iterator();  it.hasNext();)  {  appendAndSet(it.next());  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >  0)  {  for(Iterator  it  =  findDescriptions.iterator();  it.hasNext();)  {  appendAndSet(it.next());  }	  if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendAndSet(it.next());    }    	non-compiled	[CE]  orphaned  default	77	None	replace
114	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c!=  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c!=  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }	  if(c!=    null)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	101	None	replace
115	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c  ==  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c  ==  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(c!=    null)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	101	None	replace
116	[BUG]  [BUGGY]  if(c  ==  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c  ==  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c  ==  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }	  if(c!=    null)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	101	None	replace
117	[BUG]  [BUGGY]  Integer  fmtCount  =  foundDescriptions.size();  it.hasNext();)  {  appendAndSet(fmtCount);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  Integer  fmtCount  =  foundDescriptions.size();  it.hasNext();)  {  appendAndSet(fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	Integer  fmtCount  =  foundDescriptions.size();  it.hasNext();)  {  appendAndSet(fmtCount);  }	  Integer    fmtCount    =    foundDescriptions.iterator();    it.hasNext();)    {    appendAndSet(fmtCount);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
118	[BUG]  [BUGGY]  char  fmtCount  =  foundDescriptions.iterator();  it.hasNext();)  {  appendAndSet(fmtCount);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  char  fmtCount  =  foundDescriptions.iterator();  it.hasNext();)  {  appendAndSet(fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char  fmtCount  =  foundDescriptions.iterator();  it.hasNext();)  {  appendAndSet(fmtCount);  }	  Integer    fmtCount    =    foundDescriptions.iterator();    it.hasNext();)    {    appendAndSet(fmtCount);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
119	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.size();  it.hasNext();)  {  appendAndSet(fmtCount);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  foundDescriptions.size();  it.hasNext();)  {  appendAndSet(fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  foundDescriptions.size();  it.hasNext();)  {  appendAndSet(fmtCount);  }	  Integer    fmtCount    =    foundDescriptions.iterator();    it.hasNext();)    {    appendAndSet(fmtCount);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
120	[BUG]  [BUGGY]  if(pos.length()  ==  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  ==  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  ==  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    fmtCount);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(START_FE).append(index);    }    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
121	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  c.length());  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  c.length());  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  seekNonWs(pattern,  c.length());  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    fmtCount);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(START_FE).append(index);    }    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
122	[BUG]  [BUGGY]  if(pos.length()  ==  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  ==  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  ==  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    fmtCount);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(START_FE).append(index);    }    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
123	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  c.length());  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  c.length());  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  seekNonWs(pattern,  c.length());  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    fmtCount);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(START_FE).append(index);    }    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
124	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()  ==  0)  {  return;  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()  ==  0)  {  return;  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()  ==  0)  {  return;  }	          if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    c    =    it.next();    if(c.length()    ==    0)    {    return;    }    	non-compiled	[CE]  orphaned  default	87	None	replace
125	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()!=  0)  {  return;  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()!=  0)  {  return;  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()!=  0)  {  return;  }	          if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    c    =    it.next();    if(c.length()    ==    0)    {    return;    }    	non-compiled	[CE]  orphaned  default	87	None	replace
126	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()!=  0)  {  return;  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()!=  0)  {  return;  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()!=  0)  {  return;  }	          if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    c    =    it.next();    if(c.length()    ==    0)    {    return;    }    	non-compiled	[CE]  orphaned  default	87	None	replace
127	[BUG]  [BUGGY]  if(fmtCount  <  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  <  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  <  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(c.length()    <    0)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	123	None	replace
128	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CE]  unreachable  statement  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendQuotedString(pattern,  pos,  stripCustom,  true);  break;	  if(c.length()    <    0)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  unreachable  statement	123	None	replace
129	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  findDescriptions.iterator();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  findDescriptions.iterator();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >  0)  {  for(Iterator  it  =  findDescriptions.iterator();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }	  if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendFormat(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	84	None	replace
130	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  START_FE,  END_FE);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  START_FE,  END_FE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  START_FE,  END_FE);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos),    START_FE);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	58	None	replace
131	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos),  START_FE);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos),  START_FE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  next(pos),  START_FE);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos),    START_FE);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	58	None	replace
132	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos),  END_FE);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos),  END_FE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  next(pos),  END_FE);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos),    END_FE);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	91	None	replace
133	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(0),  END_FE);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(0),  END_FE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(0),  END_FE);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos),    END_FE);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	91	None	replace
134	[BUG]  [BUGGY]  if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendAndSet(it.next());  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendAndSet(it.next());  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendAndSet(it.next());  }	  if(fmtCount!=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendAndSet(it.next());    }    	non-compiled	[CE]  orphaned  default	76	None	replace
135	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  findDescriptions.iterator();  it.hasNext();)  {  appendAndSet(it.next());  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  findDescriptions.iterator();  it.hasNext();)  {  appendAndSet(it.next());  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  for(Iterator  it  =  findDescriptions.iterator();  it.hasNext();)  {  appendAndSet(it.next());  }	  if(fmtCount!=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendAndSet(it.next());    }    	non-compiled	[CE]  orphaned  default	76	None	replace
136	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	  if(c.length()    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	33	None	replace
137	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  orphaned  default  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	  if(c.length()    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	33	None	replace
138	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  orphaned  default  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	  if(c.length()    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	33	None	replace
139	[BUG]  [BUGGY]  if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFunction(it.next());  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFunction(it.next());  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFunction(it.next());  }	  if(fmtCount!=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendFunction(it.next());    }    	non-compiled	[CE]  orphaned  default	93	None	replace
140	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.remove());  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.remove());  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.remove());  }	  if(c.length()    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.remove());    }    	non-compiled	[CE]  orphaned  default	109	None	replace
141	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.remove());  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.remove());  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.remove());  }	  if(c.length()    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.remove());    }    	non-compiled	[CE]  orphaned  default	109	None	replace
142	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  index);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  index);	  char    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	10	None	replace
143	[BUG]  [BUGGY]  String  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  String  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	String  fmtCount  =  readArgumentIndex(pattern,  pos);	  char    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	10	None	replace
144	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  start);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  start);	  char    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	10	None	replace
145	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  0,  pos);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  0,  pos);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  0,  pos);	  char    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	10	None	replace
146	[BUG]  [BUGGY]  if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }	  if(fmtCount!=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendFormat(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	83	None	replace
147	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  findDescriptions.iterator();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  findDescriptions.iterator();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  for(Iterator  it  =  findDescriptions.iterator();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }	  if(fmtCount!=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendFormat(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	83	None	replace
148	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(pos.length()    ==    0)    {    seekNonWs(pattern,    c);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	21	None	replace
149	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }	  if(pos.length()    ==    0)    {    seekNonWs(pattern,    c);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(START_FE).append(index);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	34	None	replace
150	[BUG]  [BUGGY]  if(pos.length()  <  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  <  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  <  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(pos.length()    >    0)    {    seekNonWs(c,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
151	[BUG]  [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.getIndex()  >  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(pos.length()    >    0)    {    seekNonWs(c,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	2	None	replace
152	[BUG]  [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(c,  fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(c,  fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  >  0)  {  seekNonWs(c,  fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(pos.length()    >    0)    {    seekNonWs(c,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
153	[BUG]  [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  >  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(START_FE).append(index);    }    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
154	[BUG]  [BUGGY]  if(c.length()  >  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  >  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  >  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(START_FE).append(index);    }    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
155	[BUG]  [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  >  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(START_FE).append(index);    }    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
156	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  appendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	appendQuotedString(pattern,    pos,    stripCustom,    true);    appendQuotedString(pattern,  pos,  stripCustom,  true);	  	compilable	  [FE]  IllegalArgumentException  	130	5	add
157	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  appendQuotedString(pattern,  pos,  stripCustom,  true);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  appendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendQuotedString(pattern,    pos,    stripCustom,    true);    appendQuotedString(pattern,  pos,  stripCustom,  true);	  	compilable	  [FE]  IllegalArgumentException  	130	5	add
158	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CE]  unreachable  statement  [FE]      IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendQuotedString(pattern,    pos,    stripCustom,    true);    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;	  	non-compiled	[CE]  unreachable  statement	130	None	add
159	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  appendQuotedString(pattern,  pos,  stripCustom,  false);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	appendQuotedString(pattern,    pos,    stripCustom,    true);    appendQuotedString(pattern,  pos,  stripCustom,  false);	  	compilable	  [FE]  IllegalArgumentException  	130	5	add
160	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  appendQuotedString(pattern,  pos,  stripCustom,  false);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  appendQuotedString(pattern,  pos,  stripCustom,  false);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendQuotedString(pattern,    pos,    stripCustom,    true);    appendQuotedString(pattern,  pos,  stripCustom,  false);	  	compilable	  [FE]  IllegalArgumentException  	130	5	add
161	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  AppendQuotedString(pattern,  pos,  stripCustom,  true);  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  AppendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendQuotedString(pattern,    pos,    stripCustom,    true);    AppendQuotedString(pattern,  pos,  stripCustom,  true);	  	non-compiled	[CE]  cannot  find  symbol	130	None	add
162	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  pattern);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  appendQuotedString(pattern,  pos,  pattern);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendQuotedString(pattern,  pos,  pattern);	  appendQuotedString(c,    pattern,    pos);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	17	None	replace
163	[BUG]  [BUGGY]  appendQuotedString(p,  c,  pattern,  pos);  [CE]  cannot  find  symbol  p  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  appendQuotedString(p,  c,  pattern,  pos);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendQuotedString(p,  c,  pattern,  pos);	  appendQuotedString(c,    pattern,    pos);    	non-compiled	[CE]  cannot  find  symbol  p	17	None	replace
164	[BUG]  [BUGGY]  appendQuotedString(c,  pos,  pattern);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  appendQuotedString(c,  pos,  pattern);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendQuotedString(c,  pos,  pattern);	  appendQuotedString(c,    pattern,    pos);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	17	None	replace
165	[BUG]  [BUGGY]  appendQuotedString(pattern,  c,  pos);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  appendQuotedString(pattern,  c,  pos);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendQuotedString(pattern,  c,  pos);	  appendQuotedString(c,    pattern,    pos);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	17	None	replace
166	[BUG]  [BUGGY]  if(next(c.getIndex())>  0)  {  seekNonWs(pattern,  pos);  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(next(c.getIndex())>  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(next(c.getIndex())>  0)  {  seekNonWs(pattern,  pos);  }	  if(next(pos.getIndex())>    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
167	[BUG]  [BUGGY]  if(next(pos.getIndex())>  0)  {  seekNonWs(pattern,  fmtCount);  }  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(next(pos.getIndex())>  0)  {  seekNonWs(pattern,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(next(pos.getIndex())>  0)  {  seekNonWs(pattern,  fmtCount);  }	  if(next(pos.getIndex())>    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	128	None	replace
168	[BUG]  [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(c,  pattern);  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(c,  pattern);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  >  0)  {  seekNonWs(c,  pattern);  }	  if(pos.length()    >    0)    {    seekNonWs(pattern,    c);    }    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
169	[BUG]  [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(pattern,  fmtCount);  }  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(pattern,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  >  0)  {  seekNonWs(pattern,  fmtCount);  }	  if(pos.length()    >    0)    {    seekNonWs(pattern,    c);    }    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
170	[BUG]  [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(c,  fmtCount);  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(c,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  >  0)  {  seekNonWs(c,  fmtCount);  }	  if(pos.length()    >    0)    {    seekNonWs(c,    pos);    }    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
171	[BUG]  [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(c,  START_FE);  }  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(c,  START_FE);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  >  0)  {  seekNonWs(c,  START_FE);  }	  if(pos.length()    >    0)    {    seekNonWs(c,    pos);    }    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
172	[BUG]  [BUGGY]  if(pos.length()  <  0)  {  seekNonWs(c,  pos);  }  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  <  0)  {  seekNonWs(c,  pos);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  <  0)  {  seekNonWs(c,  pos);  }	  if(pos.length()    >    0)    {    seekNonWs(c,    pos);    }    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
173	[BUG]  [BUGGY]  if(c.length()  >  0)  {  seekNonWs(c,  pos);  }  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  >  0)  {  seekNonWs(c,  pos);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  >  0)  {  seekNonWs(c,  pos);  }	  if(pos.length()    >    0)    {    seekNonWs(c,    pos);    }    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
174	[BUG]  [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  >  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
175	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	26	1	replace
176	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	26	1	replace
177	[BUG]  [BUGGY]  if(pos.getIndex()  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  start  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.getIndex()  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.getIndex()  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(pos.getIndex()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol  start	117	None	replace
178	[BUG]  [BUGGY]  if(pos.getIndex()  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  start  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.getIndex()  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.getIndex()  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(pos.getIndex()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol  start	117	None	replace
179	[BUG]  [BUGGY]  Integer  fmtCount  =  readArgumentIndex(pattern,  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  Integer  fmtCount  =  readArgumentIndex(pattern,  index);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	Integer  fmtCount  =  readArgumentIndex(pattern,  index);	          fmtCount    =    readArgumentIndex(pattern,    pos);    Integer    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	74	None	replace
180	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()  ==  0)  {  continue;  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()  ==  0)  {  continue;  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()  ==  0)  {  continue;  }	          if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    c    =    it.next();    if(c.length()    ==    0)    {    continue;    }    	non-compiled	[CE]  orphaned  default	85	None	replace
181	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()  ==  0)  {  continue  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()  ==  0)  {  continue  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()  ==  0)  {  continue	          if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    c    =    it.next();    if(c.length()    ==    0)    {    continue;    }    	non-compiled	[CE]  ';'  expected	85	None	replace
182	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()  ==  0)  {  continue  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()  ==  0)  {  continue  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()  ==  0)  {  continue	          if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    c    =    it.next();    if(c.length()    ==    0)    {    continue;    }    	non-compiled	[CE]  ';'  expected	85	None	replace
183	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  index,  1);  [CE]  cannot  find  symbol  index  [FE]            IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  index,  1);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  index,  1);	  fmtCount    =    readArgumentIndex(pattern,    1);    	non-compiled	[CE]  cannot  find  symbol  index	65	None	replace
184	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos,  1);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos,  1);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos,  1);	  fmtCount    =    readArgumentIndex(pattern,    1);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	65	None	replace
185	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  start,  1);  [CE]  cannot  find  symbol  start  [FE]                IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  start,  1);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  start,  1);	  fmtCount    =    readArgumentIndex(pattern,    1);    	non-compiled	[CE]  cannot  find  symbol  start	65	None	replace
186	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  0,  1);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  0,  1);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  0,  1);	  fmtCount    =    readArgumentIndex(pattern,    1);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	65	None	replace
187	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    +    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	68	None	replace
188	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(c);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(c);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(c);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	27	None	replace
189	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount  +  1);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	27	None	replace
190	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	27	None	replace
191	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos),    c);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	60	None	replace
192	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c,  START_FE);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c,  START_FE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c,  START_FE);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos),    c);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	60	None	replace
193	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  false);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	appendQuotedString(pattern,  pos,  stripCustom,  false);	  appendQuotedString(pattern,    pos,    stripCustom,    true);    	compilable	  [FE]  IllegalArgumentException  	131	5	replace
194	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  false);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  false);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendQuotedString(pattern,  pos,  stripCustom,  false);	  appendQuotedString(pattern,    pos,    stripCustom,    true);    	compilable	  [FE]  IllegalArgumentException  	131	5	replace
195	[BUG]  [BUGGY]  AppendQuotedString(pattern,  pos,  stripCustom,  false);  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  AppendQuotedString(pattern,  pos,  stripCustom,  false);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	AppendQuotedString(pattern,  pos,  stripCustom,  false);	  appendQuotedString(pattern,    pos,    stripCustom,    true);    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
196	[BUG]  [BUGGY]  applyPattern(pattern,  pos,  stripCustom,  true);  [CE]  no  suitable  method  found  for  applyPattern(String,ParsePosition,StringBuilder,boolean)  [FE]        IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  applyPattern(pattern,  pos,  stripCustom,  true);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	applyPattern(pattern,  pos,  stripCustom,  true);	  appendQuotedString(pattern,    pos,    stripCustom,    true);    	non-compiled	[CE]  no  suitable  method  found  for  applyPattern(String,ParsePosition,StringBuilder,boolean)	131	None	replace
197	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(fmtCount    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	41	1	add
198	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	41	1	add
199	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(fmtCount  >  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(fmtCount  >  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(fmtCount  >  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	41	None	add
200	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(fmtCount  >  0)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(fmtCount    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(fmtCount  >  0)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	41	1	add
201	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(fmtCount  >  0)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(fmtCount  >  0)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(fmtCount  >  0)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	41	1	add
202	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(fmtCount    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	41	1	add
203	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	41	1	add
204	[BUG]  [BUGGY]  if(fmtCount  <  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  <  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  <  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  if(c.length()    <    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  orphaned  default	108	None	replace
205	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	8	None	replace
206	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index  +  2);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index  +  2);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index  +  2);	  int    fmtCount    =    readArgumentIndex(pattern,    index);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	8	None	replace
207	[BUG]  [BUGGY]  char[]  c  =  toPattern.toCharArray(fmtCount);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  char[]  c  =  toPattern.toCharArray(fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char[]  c  =  toPattern.toCharArray(fmtCount);	  char[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	11	None	replace
208	[BUG]  [BUGGY]  char[]  c  =  toPattern.toString();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  char[]  c  =  toPattern.toString();  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char[]  c  =  toPattern.toString();	  char[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	11	None	replace
209	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1);	  int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    -    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	67	None	replace
210	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  true);  break;  }	          if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    appendString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	50	None	replace
211	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  false);  break;  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  false);  break;  }	          if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    appendString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	50	None	replace
212	[BUG]  [BUGGY]  appendString(pattern,  pos,  stripCustom,  true);  break;  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  appendString(pattern,  pos,  stripCustom,  true);  break;  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendString(pattern,  pos,  stripCustom,  true);  break;	          if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    appendString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
213	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.getIndex()  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(pos.getIndex()  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(pos.getIndex()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	112	1	replace
214	[BUG]  [BUGGY]  if(pos.getIndex()  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.getIndex()  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.getIndex()  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(pos.getIndex()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	112	1	replace
215	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.getIndex()  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(pos.getIndex()  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(pos.getIndex()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	112	1	replace
216	[BUG]  [BUGGY]  if(pos.getIndex()  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.getIndex()  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.getIndex()  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(pos.getIndex()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	112	1	replace
217	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.getIndex()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(pos.getIndex()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(pos.getIndex()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	112	1	replace
218	[BUG]  [BUGGY]  if(pos.getIndex()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.getIndex()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.getIndex()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(pos.getIndex()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	112	1	replace
219	[BUG]  [BUGGY]  Integer  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  Integer  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	Integer  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());	  int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    -    2);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	122	None	replace
220	[BUG]  [BUGGY]  appendQuotedString(pattern,  fmtCount,  stripCustom,  true);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  appendQuotedString(pattern,  fmtCount,  stripCustom,  true);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendQuotedString(pattern,  fmtCount,  stripCustom,  true);	  appendQuotedString(pattern,    fmtCount,    stripCustom);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	15	None	replace
221	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  fmtCount,  stripCustom);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  appendQuotedString(pattern,  pos,  fmtCount,  stripCustom);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendQuotedString(pattern,  pos,  fmtCount,  stripCustom);	  appendQuotedString(pattern,    fmtCount,    stripCustom);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	15	None	replace
222	[BUG]  [BUGGY]  appendQuotedString(pattern,  fmtCount,  stripCustom,  false);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  appendQuotedString(pattern,  fmtCount,  stripCustom,  false);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendQuotedString(pattern,  fmtCount,  stripCustom,  false);	  appendQuotedString(pattern,    fmtCount,    stripCustom);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	15	None	replace
223	[BUG]  [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(c,  fmtCount);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(c,  fmtCount);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  >  0)  {  seekNonWs(c,  fmtCount);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(pos.length()    >    0)    {    seekNonWs(pattern,    c);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
224	[BUG]  [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  >  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(pos.length()    >    0)    {    seekNonWs(pattern,    c);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
225	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  fmtCount);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  fmtCount);	  fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    +    1);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	5	None	replace
226	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  /  1);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  /  1);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  /  1);	  fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    +    1);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	5	None	replace
227	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  pos.setIndex(fmtCount  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	pos.setIndex(fmtCount  +  1);	  pos.setIndex(fmtCount);    	compilable	  [FE]  IllegalArgumentException  	55	5	replace
228	[BUG]  [BUGGY]  pos.setIndex(fmtCount  +  1);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  pos.setIndex(fmtCount  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	pos.setIndex(fmtCount  +  1);	  pos.setIndex(fmtCount);    	compilable	  [FE]  IllegalArgumentException  	55	5	replace
229	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  c);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  appendQuotedString(pattern,  pos,  c);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendQuotedString(pattern,  pos,  c);	  appendQuotedString(c,    pos);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	16	None	replace
230	[BUG]  [BUGGY]  appendQuotedString(c,  pos,  stripCustom);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  appendQuotedString(c,  pos,  stripCustom);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendQuotedString(c,  pos,  stripCustom);	  appendQuotedString(c,    pos);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	16	None	replace
231	[BUG]  [BUGGY]  if(c.length()  >  0)  {  int  fmtCount  =  c.length();  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  >  0)  {  int  fmtCount  =  c.length();  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  >  0)  {  int  fmtCount  =  c.length();  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(fmtCount    ==    0)    {    if(c.length()    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	100	None	replace
232	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos,  END_FE);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start,  pos,  END_FE);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start,  pos,  END_FE);	  int    fmtCount    =    readArgumentIndex(pattern,    pos,    END_FE);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	127	None	replace
233	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  END_FE);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index,  END_FE);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index,  END_FE);	  int    fmtCount    =    readArgumentIndex(pattern,    pos,    END_FE);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	127	None	replace
234	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos,  END_FE);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos,  END_FE);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  pos,  END_FE);	  int    fmtCount    =    readArgumentIndex(pattern,    pos,    END_FE);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	127	None	replace
235	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(fmtCount    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  IllegalArgumentException  	23	5	add
236	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  IllegalArgumentException  	23	5	add
237	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(fmtCount    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }	  	compilable	  [FE]  IllegalArgumentException  	23	5	add
238	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }	  	compilable	  [FE]  IllegalArgumentException  	23	5	add
239	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(FIELD_FE).append(index);  }  [CE]  cannot  find  symbol  FIELD_FE  [FE]        IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(FIELD_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(FIELD_FE).append(index);  }	  	non-compiled	[CE]  cannot  find  symbol  FIELD_FE	23	None	add
240	[BUG]  [BUGGY]  if(pos.length()!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	  if(c.length()!=    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
241	[BUG]  [BUGGY]  if(pos.length()!=  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()!=  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()!=  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	  if(c.length()!=    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
242	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	pos.setIndex(fmtCount);    pos.setIndex(fmtCount);	  	compilable	  [FE]  IllegalArgumentException  	54	5	add
243	[BUG]  [BUGGY]  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  pos.setIndex(fmtCount);  pos.setIndex(fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	pos.setIndex(fmtCount);    pos.setIndex(fmtCount);	  	compilable	  [FE]  IllegalArgumentException  	54	5	add
244	[BUG]  [BUGGY]  pos.setIndex(fmtCount);  int  fmtCount  =  readArgumentIndex(pattern,  pos);  pos.setIndex(fmtCount);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]      IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  pos.setIndex(fmtCount);  int  fmtCount  =  readArgumentIndex(pattern,  pos);  pos.setIndex(fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	pos.setIndex(fmtCount);    int  fmtCount  =  readArgumentIndex(pattern,  pos);  pos.setIndex(fmtCount);	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	54	None	add
245	[BUG]  [BUGGY]  pos.setIndex(fmtCount);  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  pos.setIndex(fmtCount);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  pos.setIndex(fmtCount);  int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  pos.setIndex(fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	pos.setIndex(fmtCount);    int  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  pos.setIndex(fmtCount);	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	54	None	add
246	[BUG]  [BUGGY]  pos.setIndex(fmtCount);  int  fmtCount  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  pos.setIndex(fmtCount);  int  fmtCount  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	pos.setIndex(fmtCount);    int  fmtCount  =  readArgumentIndex(pattern,  pos);  stripCustom.append(END_FE).append(fmtCount);	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	54	None	add
247	[BUG]  [BUGGY]  pos.setIndex(fmtCount);  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  pos.setIndex(fmtCount);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  pos.setIndex(fmtCount);  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  pos.setIndex(fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	pos.setIndex(fmtCount);    int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  pos.setIndex(fmtCount);	  	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	54	None	add
248	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }	          if(c.length()    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    break;    }    	non-compiled	[CE]  orphaned  default	129	None	replace
249	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }  }	          if(c.length()    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    break;    }    	non-compiled	[CE]  orphaned  default	129	None	replace
250	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }	          if(c.length()    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    break;    }    	non-compiled	[CE]  orphaned  default	129	None	replace
251	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  seekNonWs(pattern,  fmtCount  +  1);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  ==  0)  {  seekNonWs(pattern,  fmtCount  +  1);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  ==  0)  {  seekNonWs(pattern,  fmtCount  +  1);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    fmtCount);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
252	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(c,  start,  pos.getIndex());  [CE]  cannot  find  symbol  start  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(c,  start,  pos.getIndex());  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(c,  start,  pos.getIndex());	  fmtCount    =    readArgumentIndex(c,    pos.getIndex());    	non-compiled	[CE]  cannot  find  symbol  start	6	None	replace
253	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(c,  pos.getIndex()  -  1);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(c,  pos.getIndex()  -  1);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(c,  pos.getIndex()  -  1);	  fmtCount    =    readArgumentIndex(c,    pos.getIndex());    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	6	None	replace
254	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(c,  pos.getIndex()  +  1);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(c,  pos.getIndex()  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(c,  pos.getIndex()  +  1);	  fmtCount    =    readArgumentIndex(c,    pos.getIndex());    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	6	None	replace
255	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);	          if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	52	1	replace
256	[BUG]  [BUGGY]  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);	          if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	52	1	replace
257	[BUG]  [BUGGY]  Integer  fmtCount  =  appendQuotedString(pattern,  pos);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  Integer  fmtCount  =  appendQuotedString(pattern,  pos);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	Integer  fmtCount  =  appendQuotedString(pattern,  pos);	          if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	52	None	replace
258	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(fmtCount    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(START_FE).append(index);    }    if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  IllegalArgumentException  	35	5	add
259	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(START_FE).append(index);    }    if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  	compilable	  [FE]  IllegalArgumentException  	35	5	add
260	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(fmtCount    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(START_FE).append(index);    }    if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }	  	compilable	  [FE]  IllegalArgumentException  	35	5	add
261	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(START_FE).append(index);    }    if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }	  	compilable	  [FE]  IllegalArgumentException  	35	5	add
262	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(STRING_FE).append(index);  }  [CE]  cannot  find  symbol  STRING_FE  [FE]        IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(STRING_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(START_FE).append(index);    }    if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(STRING_FE).append(index);  }	  	non-compiled	[CE]  cannot  find  symbol  STRING_FE	35	None	add
263	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(FIELD_FE).append(index);  }  [CE]  cannot  find  symbol  FIELD_FE  [FE]          IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(FIELD_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(START_FE).append(index);    }    if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(FIELD_FE).append(index);  }	  	non-compiled	[CE]  cannot  find  symbol  FIELD_FE	35	None	add
264	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(FINAL_FE).append(index);  }  [CE]  cannot  find  symbol  FINAL_FE  [FE]            IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(FINAL_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(START_FE).append(index);    }    if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(FINAL_FE).append(index);  }	  	non-compiled	[CE]  cannot  find  symbol  FINAL_FE	35	None	add
265	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(c,  start,  pos);  [CE]  cannot  find  symbol  start  [FE]              IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(c,  start,  pos);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(c,  start,  pos);	  fmtCount    =    readArgumentIndex(c,    pos);    	non-compiled	[CE]  cannot  find  symbol  start	66	None	replace
266	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(c,  pos,  START_FE);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(c,  pos,  START_FE);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(c,  pos,  START_FE);	  fmtCount    =    readArgumentIndex(c,    pos);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	66	None	replace
267	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(c,  pos,  fmtCount);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(c,  pos,  fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(c,  pos,  fmtCount);	  fmtCount    =    readArgumentIndex(c,    pos);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	66	None	replace
268	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.size()  -  1;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  foundDescriptions.size()  -  1;  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  foundDescriptions.size()  -  1;	  int    fmtCount    =    foundDescriptions.size();    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	19	None	replace
269	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.size()  +  1;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  foundDescriptions.size()  +  1;  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  foundDescriptions.size()  +  1;	  int    fmtCount    =    foundDescriptions.size();    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	19	None	replace
270	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.size()  -  2;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  foundDescriptions.size()  -  2;  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  foundDescriptions.size()  -  2;	  int    fmtCount    =    foundDescriptions.size();    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	19	None	replace
271	[BUG]  [BUGGY]  Integer  fmtCount  =  foundDescriptions.size();  it.hasNext();)  {  appendFunction(it.next());  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  Integer  fmtCount  =  foundDescriptions.size();  it.hasNext();)  {  appendFunction(it.next());  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	Integer  fmtCount  =  foundDescriptions.size();  it.hasNext();)  {  appendFunction(it.next());  }	  Integer    fmtCount    =    foundDescriptions.iterator();    it.hasNext();)    {    appendFunction(it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
272	[BUG]  [BUGGY]  char  fmtCount  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFunction(it.next());  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  char  fmtCount  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFunction(it.next());  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char  fmtCount  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFunction(it.next());  }	  Integer    fmtCount    =    foundDescriptions.iterator();    it.hasNext();)    {    appendFunction(it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
273	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.size();  it.hasNext();)  {  appendFunction(it.next());  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  foundDescriptions.size();  it.hasNext();)  {  appendFunction(it.next());  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  foundDescriptions.size();  it.hasNext();)  {  appendFunction(it.next());  }	  Integer    fmtCount    =    foundDescriptions.iterator();    it.hasNext();)    {    appendFunction(it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
274	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  true);  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  true);  }	          if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    appendString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	51	None	replace
275	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  false);  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  false);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  false);  }	          if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    appendString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	51	None	replace
276	[BUG]  [BUGGY]  appendString(pattern,  pos,  stripCustom,  true);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  appendString(pattern,  pos,  stripCustom,  true);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendString(pattern,  pos,  stripCustom,  true);	          if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    appendString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
277	[BUG]  [BUGGY]  if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  foundFormats.length,  fmtCount);  }  else  {  System.arraycopy(c,  0,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  foundFormats.length,  fmtCount);  }  else  {  System.arraycopy(c,  0,  foundFormats.length);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  foundFormats.length,  fmtCount);  }  else  {  System.arraycopy(c,  0,  foundFormats.length);  }	          if(!foundFormats.contains(c))    {    System.arraycopy(c,    0,    fmtCount,    foundFormats.length);    }    else    {    System.arraycopy(c,    0,    fmtCount,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	86	None	replace
278	[BUG]  [BUGGY]  if(foundFormats!=  null)  {  if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  foundFormats.length,  fmtCount);  }  else  {  System.arraycopy(c,  0,  foundFormats.length  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(foundFormats!=  null)  {  if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  foundFormats.length,  fmtCount);  }  else  {  System.arraycopy(c,  0,  foundFormats.length  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(foundFormats!=  null)  {  if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  foundFormats.length,  fmtCount);  }  else  {  System.arraycopy(c,  0,  foundFormats.length	          if(!foundFormats.contains(c))    {    System.arraycopy(c,    0,    fmtCount,    foundFormats.length);    }    else    {    System.arraycopy(c,    0,    fmtCount,    foundFormats.length);    }    	non-compiled	[CE]  ')'  expected	86	None	replace
279	[BUG]  [BUGGY]  if(foundFormats.length!=  0)  {  if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  foundFormats.length,  fmtCount);  }  else  {  System.arraycopy(c,  0,  foundFormats.length  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(foundFormats.length!=  0)  {  if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  foundFormats.length,  fmtCount);  }  else  {  System.arraycopy(c,  0,  foundFormats.length  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(foundFormats.length!=  0)  {  if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  foundFormats.length,  fmtCount);  }  else  {  System.arraycopy(c,  0,  foundFormats.length	          if(!foundFormats.contains(c))    {    System.arraycopy(c,    0,    fmtCount,    foundFormats.length);    }    else    {    System.arraycopy(c,    0,    fmtCount,    foundFormats.length);    }    	non-compiled	[CE]  ')'  expected	86	None	replace
280	[BUG]  [BUGGY]  if(foundFormats.length!=  0)  {  if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  foundFormats.length);  }  else  {  System.arraycopy(c,  0,  foundFormats.length);  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(foundFormats.length!=  0)  {  if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  foundFormats.length);  }  else  {  System.arraycopy(c,  0,  foundFormats.length);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(foundFormats.length!=  0)  {  if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  foundFormats.length);  }  else  {  System.arraycopy(c,  0,  foundFormats.length);  }	          if(!foundFormats.contains(c))    {    System.arraycopy(c,    0,    fmtCount,    foundFormats.length);    }    else    {    System.arraycopy(c,    0,    fmtCount,    foundFormats.length);    }    	non-compiled	[CE]  orphaned  default	86	None	replace
281	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  seekNonWs(pattern,  pos.length());  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  ==  0)  {  seekNonWs(pattern,  pos.length());  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  ==  0)  {  seekNonWs(pattern,  pos.length());  }	  if(pos.length()    ==    0)    {    seekNonWs(pattern,    c.length());    }    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
282	[BUG]  [BUGGY]  if(pos.length()  ==  0)  {  seekNonWs(c,  pattern.length());  }  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  ==  0)  {  seekNonWs(c,  pattern.length());  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  ==  0)  {  seekNonWs(c,  pattern.length());  }	  if(pos.length()    ==    0)    {    seekNonWs(pattern,    c.length());    }    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
283	[BUG]  [BUGGY]  if(pos.length()  ==  0)  {  seekNonWs(c,  pos.length());  }  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  ==  0)  {  seekNonWs(c,  pos.length());  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  ==  0)  {  seekNonWs(c,  pos.length());  }	  if(pos.length()    ==    0)    {    seekNonWs(pattern,    c.length());    }    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
284	[BUG]  [BUGGY]  seekNonWs(pattern,  c.length());  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  seekNonWs(pattern,  c.length());  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	seekNonWs(pattern,  c.length());	  if(pos.length()    ==    0)    {    seekNonWs(pattern,    c.length());    }    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
285	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(c,  pos.getIndex(),  pattern);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(c,  pos.getIndex(),  pattern);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(c,  pos.getIndex(),  pattern);	  fmtCount    =    readArgumentIndex(pattern,    pos.getIndex(),    c);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	132	None	replace
286	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  c,  END_FE);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  c,  END_FE);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  c,  END_FE);	  fmtCount    =    readArgumentIndex(pattern,    pos.getIndex(),    c);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	132	None	replace
287	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  c,  fmtCount);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  c,  fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  c,  fmtCount);	  fmtCount    =    readArgumentIndex(pattern,    pos.getIndex(),    c);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	132	None	replace
288	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  c,  START_FE);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  c,  START_FE);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  c,  START_FE);	  fmtCount    =    readArgumentIndex(pattern,    pos.getIndex(),    c);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	132	None	replace
289	[BUG]  [BUGGY]  String  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  String  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	String  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex());	  char    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	70	None	replace
290	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(c,  pos.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  char  fmtCount  =  readArgumentIndex(c,  pos.getIndex());  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char  fmtCount  =  readArgumentIndex(c,  pos.getIndex());	  char    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	70	None	replace
291	[BUG]  [BUGGY]  if(c.length()  >  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  >  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  >  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
292	[BUG]  [BUGGY]  if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  foundDescriptions.length,  fmtCount);  }  [CE]  cannot  find  symbol  length  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  foundDescriptions.length,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  foundDescriptions.length,  fmtCount);  }	          if(!foundFormats.contains(c))    {    System.arraycopy(c,    0,    fmtCount,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	88	None	replace
293	[BUG]  [BUGGY]  if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  foundFormats.length,  fmtCount);  }  [CE]  cannot  find  symbol  length  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  foundFormats.length,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  foundFormats.length,  fmtCount);  }	          if(!foundFormats.contains(c))    {    System.arraycopy(c,    0,    fmtCount,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	88	None	replace
294	[BUG]  [BUGGY]  if(foundFormats!=  null)  {  System.arraycopy(c,  0,  foundFormats,  fmtCount);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(foundFormats!=  null)  {  System.arraycopy(c,  0,  foundFormats,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(foundFormats!=  null)  {  System.arraycopy(c,  0,  foundFormats,  fmtCount);  }	          if(!foundFormats.contains(c))    {    System.arraycopy(c,    0,    fmtCount,    foundFormats.length);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	88	None	replace
295	[BUG]  [BUGGY]  if(!foundFormats.contains(c)&&  foundFormats.length  >  0)  {  System.arraycopy(c,  0,  foundFormats,  fmtCount);  }  [CE]  cannot  find  symbol  length  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(!foundFormats.contains(c)&&  foundFormats.length  >  0)  {  System.arraycopy(c,  0,  foundFormats,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(!foundFormats.contains(c)&&  foundFormats.length  >  0)  {  System.arraycopy(c,  0,  foundFormats,  fmtCount);  }	          if(!foundFormats.contains(c))    {    System.arraycopy(c,    0,    fmtCount,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	88	None	replace
296	[BUG]  [BUGGY]  String  c  =  this.pattern.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  String  c  =  this.pattern.toCharArray();  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	String  c  =  this.pattern.toCharArray();	  char[]    c    =    this.pattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	97	None	replace
297	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  1);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  1);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos),    0);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	92	None	replace
298	[BUG]  [BUGGY]  if(fmtCount.length()  >  0)  {  seekNonWs(pattern,  c.length());  }  [CE]  int  cannot  be  dereferenced  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount.length()  >  0)  {  seekNonWs(pattern,  c.length());  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount.length()  >  0)  {  seekNonWs(pattern,  c.length());  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    fmtCount);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	29	None	replace
299	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  c.length());  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  c.length());  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >  0)  {  seekNonWs(pattern,  c.length());  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
300	[BUG]  [BUGGY]  if(c.length()  >  0)  {  seekNonWs(pattern,  fmtCount  +  1);  }  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  >  0)  {  seekNonWs(pattern,  fmtCount  +  1);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  >  0)  {  seekNonWs(pattern,  fmtCount  +  1);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
301	[BUG]  [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(c,  start);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(c,  start);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  >  0)  {  seekNonWs(c,  start);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(pos.length()    >    0)    {    seekNonWs(pattern,    c);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
302	[BUG]  [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(c,  start);  }  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(c,  start);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  >  0)  {  seekNonWs(c,  start);  }	  if(pos.length()    >    0)    {    seekNonWs(pattern,    c);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
303	[BUG]  [BUGGY]  AppendQuotedString(pattern,  pos,  stripCustom,  true);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  AppendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	AppendQuotedString(pattern,  pos,  stripCustom,  true);	  AppendQuotedString(pattern,    pos,    stripCustom);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
304	[BUG]  [BUGGY]  AppendQuotedString(c,  pos,  stripCustom);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  AppendQuotedString(c,  pos,  stripCustom);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	AppendQuotedString(c,  pos,  stripCustom);	  AppendQuotedString(pattern,    pos,    stripCustom);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
305	[BUG]  [BUGGY]  AppendQuotedString(stripCustom,  pos,  pattern);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  AppendQuotedString(stripCustom,  pos,  pattern);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	AppendQuotedString(stripCustom,  pos,  pattern);	  AppendQuotedString(pattern,    pos,    stripCustom);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
306	[BUG]  [BUGGY]  if(pos.length()!=  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()!=  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()!=  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()!=    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
307	[BUG]  [BUGGY]  if(c.length()!=  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()!=  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()!=  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()!=    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
308	[BUG]  [BUGGY]  if(pos.length()!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()!=    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
309	[BUG]  [BUGGY]  char[]  c  =  pattern.toStringArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  char[]  c  =  pattern.toStringArray();  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char[]  c  =  pattern.toStringArray();	  char[]    c    =    pattern.toCharArray()    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	13	None	replace
310	[BUG]  [BUGGY]  char[]  c  =  Pattern.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  char[]  c  =  Pattern.toCharArray();  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char[]  c  =  Pattern.toCharArray();	  char[]    c    =    pattern.toCharArray()    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	13	None	replace
311	[BUG]  [BUGGY]  if(pos.length()  <  0)  {  seekNonWs(pattern,  c);  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  <  0)  {  seekNonWs(pattern,  c);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  <  0)  {  seekNonWs(pattern,  c);  }	  if(c.length()    <    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
312	[BUG]  [BUGGY]  if(c.length()  <  0)  {  seekNonWs(pattern,  fmtCount);  }  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  <  0)  {  seekNonWs(pattern,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  <  0)  {  seekNonWs(pattern,  fmtCount);  }	  if(c.length()    <    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
313	[BUG]  [BUGGY]  if(next(c.getIndex())  ==  0)  {  seekNonWs(pattern,  pos);  }  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(next(c.getIndex())  ==  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(next(c.getIndex())  ==  0)  {  seekNonWs(pattern,  pos);  }	  if(next(pos.getIndex())    ==    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
314	[BUG]  [BUGGY]  if(next(pos.getIndex())  ==  0)  {  seekNonWs(pattern,  fmtCount);  }  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(next(pos.getIndex())  ==  0)  {  seekNonWs(pattern,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(next(pos.getIndex())  ==  0)  {  seekNonWs(pattern,  fmtCount);  }	  if(next(pos.getIndex())    ==    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	118	None	replace
315	[BUG]  [BUGGY]  if(next(pos.getIndex())  ==  0)  {  seekNonWs(pattern,  pos,  stripCustom);  }  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(next(pos.getIndex())  ==  0)  {  seekNonWs(pattern,  pos,  stripCustom);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(next(pos.getIndex())  ==  0)  {  seekNonWs(pattern,  pos,  stripCustom);  }	  if(next(pos.getIndex())    ==    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	118	None	replace
316	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  pos.getIndex()  -  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  pos.getIndex()  -  1);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(c,  pos.getIndex()  -  1);	  int    fmtCount    =    readArgumentIndex(c,    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	69	None	replace
317	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  pos.getIndex()  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  pos.getIndex()  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(c,  pos.getIndex()  +  1);	  int    fmtCount    =    readArgumentIndex(c,    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	69	None	replace
318	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  start.getIndex());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(c,  start.getIndex());  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(c,  start.getIndex());	  int    fmtCount    =    readArgumentIndex(c,    pos.getIndex());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	69	None	replace
319	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  pos.setIndex(START_FE);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	pos.setIndex(START_FE);	  pos.setIndex(FIELD_FE);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	125	5	replace
320	[BUG]  [BUGGY]  pos.setIndex(START_FE);  [FE]  ArrayIndexOutOfBoundsException  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  pos.setIndex(START_FE);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	pos.setIndex(START_FE);	  pos.setIndex(FIELD_FE);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	125	5	replace
321	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  pos.setIndex(END_FE);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	pos.setIndex(END_FE);	  pos.setIndex(FIELD_FE);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	125	5	replace
322	[BUG]  [BUGGY]  pos.setIndex(END_FE);  [FE]  ArrayIndexOutOfBoundsException  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  pos.setIndex(END_FE);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	pos.setIndex(END_FE);	  pos.setIndex(FIELD_FE);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	125	5	replace
323	[BUG]  [BUGGY]  if(pos.length()  <  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  <  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  <  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	  if(c.length()    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
324	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(fmtCount  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	  if(c.length()    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	compilable	  [FE]  IllegalArgumentException  	124	5	replace
325	[BUG]  [BUGGY]  if(fmtCount  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [FE]  IllegalArgumentException  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  <  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	  if(c.length()    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	compilable	  [FE]  IllegalArgumentException  	124	5	replace
326	[BUG]  [BUGGY]  if(fmtCount.length()  ==  0)  {  seekNonWs(pattern,  c.length());  }  [CE]  int  cannot  be  dereferenced  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount.length()  ==  0)  {  seekNonWs(pattern,  c.length());  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount.length()  ==  0)  {  seekNonWs(pattern,  c.length());  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    fmtCount);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	49	None	replace
327	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  seekNonWs(pattern,  fmtCount  +  1);  }  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  ==  0)  {  seekNonWs(pattern,  fmtCount  +  1);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  ==  0)  {  seekNonWs(pattern,  fmtCount  +  1);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
328	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  c.length());  }  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  c.length());  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  seekNonWs(pattern,  c.length());  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
329	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  start  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  start  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    start);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	9	None	replace
330	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.remove());  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.remove());  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.remove());  }	  if(c.length()    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.remove());    }    	non-compiled	[CE]  orphaned  default	109	None	replace
331	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c!=  null)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(c!=  null)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	106	1	replace
332	[BUG]  [BUGGY]  if(c!=  null)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c!=  null)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c!=  null)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	106	1	replace
333	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1,  c,  0);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1,  c,  0);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1,  c,  0);	  fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    -    1,    c);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	90	None	replace
334	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()  ==  0)  {  return  [CE]  '.class'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()  ==  0)  {  return  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()  ==  0)  {  return	          if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    c    =    it.next();    if(c.length()    ==    0)    {    return;    }    	non-compiled	[CE]  '.class'  expected	87	None	replace
335	[BUG]  [BUGGY]  if(!foundDescriptions.contains(c))  {  System.arraycopy(c,  0,  fmtCount,  foundFormats.length);  }  else  {  System.arraycopy(c,  0,  fmtCount,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(!foundDescriptions.contains(c))  {  System.arraycopy(c,  0,  fmtCount,  foundFormats.length);  }  else  {  System.arraycopy(c,  0,  fmtCount,  foundFormats.length);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(!foundDescriptions.contains(c))  {  System.arraycopy(c,  0,  fmtCount,  foundFormats.length);  }  else  {  System.arraycopy(c,  0,  fmtCount,  foundFormats.length);  }	          if(!foundFormats.contains(c))    {    System.arraycopy(c,    0,    fmtCount,    foundFormats.length);    }    else    {    System.arraycopy(c,    0,    fmtCount,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	86	None	replace
336	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  System.arraycopy(c,  0,  foundDescriptions,  fmtCount);  }  else  {  System.arraycopy(c,  0,  foundDescriptions.length);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(foundDescriptions!=  null)  {  System.arraycopy(c,  0,  foundDescriptions,  fmtCount);  }  else  {  System.arraycopy(c,  0,  foundDescriptions.length);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(foundDescriptions!=  null)  {  System.arraycopy(c,  0,  foundDescriptions,  fmtCount);  }  else  {  System.arraycopy(c,  0,  foundDescriptions.length);  }	          if(!foundFormats.contains(c))    {    System.arraycopy(c,    0,    fmtCount,    foundFormats.length);    }    else    {    System.arraycopy(c,    0,    fmtCount,    foundFormats.length);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	86	None	replace
337	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  System.arraycopy(c,  0,  foundDescriptions,  fmtCount);  }  else  {  System.arraycopy(c,  0,  foundFormats.length);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(foundDescriptions!=  null)  {  System.arraycopy(c,  0,  foundDescriptions,  fmtCount);  }  else  {  System.arraycopy(c,  0,  foundFormats.length);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(foundDescriptions!=  null)  {  System.arraycopy(c,  0,  foundDescriptions,  fmtCount);  }  else  {  System.arraycopy(c,  0,  foundFormats.length);  }	          if(!foundFormats.contains(c))    {    System.arraycopy(c,    0,    fmtCount,    foundFormats.length);    }    else    {    System.arraycopy(c,    0,    fmtCount,    foundFormats.length);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	86	None	replace
338	[BUG]  [BUGGY]  if(!foundDescriptions.contains(c))  {  System.arraycopy(c,  0,  foundFormats.length,  fmtCount);  }  else  {  System.arraycopy(c,  0,  foundFormats.length,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(!foundDescriptions.contains(c))  {  System.arraycopy(c,  0,  foundFormats.length,  fmtCount);  }  else  {  System.arraycopy(c,  0,  foundFormats.length,  foundFormats.length);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(!foundDescriptions.contains(c))  {  System.arraycopy(c,  0,  foundFormats.length,  fmtCount);  }  else  {  System.arraycopy(c,  0,  foundFormats.length,  foundFormats.length);  }	          if(!foundFormats.contains(c))    {    System.arraycopy(c,    0,    fmtCount,    foundFormats.length);    }    else    {    System.arraycopy(c,    0,    fmtCount,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	86	None	replace
339	[BUG]  [BUGGY]  AppendQuotedString(pattern,  pos,  c);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  AppendQuotedString(pattern,  pos,  c);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	AppendQuotedString(pattern,  pos,  c);	  appendQuotedString(c,    pattern,    pos);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
340	[BUG]  [BUGGY]  if(c.length()  <  =  0)  {  seekNonWs(pattern,  pos);  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  <  =  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  <  =  0)  {  seekNonWs(pattern,  pos);  }	  if(c.length()    <    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
341	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(fmtCount  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(fmtCount    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	24	1	replace
342	[BUG]  [BUGGY]  if(fmtCount  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(fmtCount    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	24	1	replace
343	[BUG]  [BUGGY]  Integer  fmtCount  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormat(ESCAPED_QUOTE);  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  Integer  fmtCount  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormat(ESCAPED_QUOTE);  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	Integer  fmtCount  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormat(ESCAPED_QUOTE);  }	  Integer    fmtCount    =    foundDescriptions.iterator();    it.hasNext();)    {    appendFormat(DUMMY_PATTERN);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
344	[BUG]  [BUGGY]  pos.setIndex(FIELD_FE  +  1);  [CE]  cannot  find  symbol  FIELD_FE  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  pos.setIndex(FIELD_FE  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	pos.setIndex(FIELD_FE  +  1);	  pos.setIndex(FIELD_FE);    	non-compiled	[CE]  cannot  find  symbol  FIELD_FE	125	None	replace
345	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  appendQuotedString(pattern,  pos,  null,  true);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	appendQuotedString(pattern,  pos,  null,  true);	  appendQuotedString(pattern,    pos,    stripCustom,    true);    	compilable	  [FE]  IllegalArgumentException  	131	5	replace
346	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  null,  true);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  appendQuotedString(pattern,  pos,  null,  true);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendQuotedString(pattern,  pos,  null,  true);	  appendQuotedString(pattern,    pos,    stripCustom,    true);    	compilable	  [FE]  IllegalArgumentException  	131	5	replace
347	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  appendAndSet(it.next());  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  appendAndSet(it.next());  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  appendAndSet(it.next());  }	  if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendAndSet(it.next());    }    	non-compiled	[CE]  orphaned  default	18	None	replace
348	[BUG]  [BUGGY]  pos.setIndex(FIELD_NAME);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  pos.setIndex(FIELD_NAME);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	pos.setIndex(FIELD_NAME);	  pos.setIndex(start);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	56	None	replace
349	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(0));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(0));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  next(0));	  int    fmtCount    =    readArgumentIndex(pattern,    next(0));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	59	None	replace
350	[BUG]  [BUGGY]  float  fmtCount  =  readArgumentIndex(pattern,  pos);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  float  fmtCount  =  readArgumentIndex(pattern,  pos);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	float  fmtCount  =  readArgumentIndex(pattern,  pos);	          fmtCount    =    readArgumentIndex(pattern,    pos);    int    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	73	None	replace
351	[BUG]  [BUGGY]  if(c!=  END_FE)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [CE]  incomparable  types:  char[]  and  char  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c!=  END_FE)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c!=  END_FE)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	  if(c.length()!=    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	non-compiled	[CE]  incomparable  types:  char[]  and  char	78	None	replace
352	[BUG]  [BUGGY]  if(!foundDescriptions.contains(c))  {  System.arraycopy(c,  0,  fmtCount,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(!foundDescriptions.contains(c))  {  System.arraycopy(c,  0,  fmtCount,  foundFormats.length);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(!foundDescriptions.contains(c))  {  System.arraycopy(c,  0,  fmtCount,  foundFormats.length);  }	          if(!foundFormats.contains(c))    {    System.arraycopy(c,    0,    fmtCount,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	88	None	replace
353	[BUG]  [BUGGY]  if(foundDescriptions.contains(c))  {  System.arraycopy(c,  0,  fmtCount,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(foundDescriptions.contains(c))  {  System.arraycopy(c,  0,  fmtCount,  foundFormats.length);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(foundDescriptions.contains(c))  {  System.arraycopy(c,  0,  fmtCount,  foundFormats.length);  }	          if(!foundFormats.contains(c))    {    System.arraycopy(c,    0,    fmtCount,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	88	None	replace
354	[BUG]  [BUGGY]  if(!foundDescriptions.contains(c))  {  System.arraycopy(c,  0,  foundFormats.length,  fmtCount);  }  [CE]  cannot  find  symbol  length  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(!foundDescriptions.contains(c))  {  System.arraycopy(c,  0,  foundFormats.length,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(!foundDescriptions.contains(c))  {  System.arraycopy(c,  0,  foundFormats.length,  fmtCount);  }	          if(!foundFormats.contains(c))    {    System.arraycopy(c,    0,    fmtCount,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	88	None	replace
355	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos  +  1));  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos  +  1));  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  next(pos  +  1));	  fmtCount    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	120	None	replace
356	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	  if(c.length()    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  orphaned  default	115	None	replace
357	[BUG]  [BUGGY]  if(next(pos.getIndex())  >=  0)  {  seekNonWs(pattern,  pos);  }  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(next(pos.getIndex())  >=  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(next(pos.getIndex())  >=  0)  {  seekNonWs(pattern,  pos);  }	  if(next(pos.getIndex())>    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	128	None	replace
358	[BUG]  [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [CE]  cannot  find  symbol  index  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(index  ==  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(index  ==  0)  {  seekNonWs(pattern,  c);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	  if(pos.length()    ==    0)    {    seekNonWs(pattern,    c);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol  index	25	None	replace
359	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount	  if(pos.length()    ==    0)    {    seekNonWs(pattern,    c);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	non-compiled	[CE]  ')'  expected	25	None	replace
360	[BUG]  [BUGGY]  if(fmtCount!=  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  true);  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount!=  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount!=  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  true);  }	          if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    appendString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	51	None	replace
361	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  false);  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  false);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  false);  }	          if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    appendString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	51	None	replace
362	[BUG]  [BUGGY]  if(peekNonWs(c,  pos.length()  ==  0))  {  seekNonWs(pattern,  pos);  }  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(peekNonWs(c,  pos.length()  ==  0))  {  seekNonWs(pattern,  pos);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(peekNonWs(c,  pos.length()  ==  0))  {  seekNonWs(pattern,  pos);  }	  if(pos.length()    ==    0)    {    seekNonWs(pattern,    c);    }    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
363	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  1);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos,  1);	  int    fmtCount    =    readArgumentIndex(pattern,    pos,    END_FE);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	127	None	replace
364	[BUG]  [BUGGY]  if(stripCustom.length()  >  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(stripCustom.length()  >  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(stripCustom.length()  >  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(stripCustom.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	98	None	replace
365	[BUG]  [BUGGY]  if(c.length()!=  0)  {  seekNonWs(pattern,  fmtCount  +  1);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()!=  0)  {  seekNonWs(pattern,  fmtCount  +  1);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()!=  0)  {  seekNonWs(pattern,  fmtCount  +  1);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    fmtCount);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
366	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	  if(c.length()    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	33	None	replace
367	[BUG]  [BUGGY]  if(c.length()  >  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  >  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  >  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(pos.length()    >    0)    {    seekNonWs(c,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
368	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(pos.length()    >    0)    {    seekNonWs(c,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	2	None	replace
369	[BUG]  [BUGGY]  if(i  >  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  i  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(i  >  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(i  >  0)  {  seekNonWs(c,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(pos.length()    >    0)    {    seekNonWs(c,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol  i	2	None	replace
370	[BUG]  [BUGGY]  if(c.length()!=  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()!=  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()!=  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(c.length()    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    	non-compiled	[CE]  orphaned  default	46	None	replace
371	[BUG]  [BUGGY]  char[]  c  =  getFormat(pattern.toPattern());  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  char[]  c  =  getFormat(pattern.toPattern());  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char[]  c  =  getFormat(pattern.toPattern());	  char[]    c    =    pattern.toPattern();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	12	None	replace
372	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos));  }  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos));  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos));  }	          fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount    =    readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  ';'  expected	75	None	replace
373	[BUG]  [BUGGY]  appendQuotedString(pattern,  fmtCount,  c,  stripCustom);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  appendQuotedString(pattern,  fmtCount,  c,  stripCustom);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendQuotedString(pattern,  fmtCount,  c,  stripCustom);	  appendQuotedString(pattern,    fmtCount,    stripCustom);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	15	None	replace
374	[BUG]  [BUGGY]  appendQuotedString(pattern,  fmtCount,  i,  stripCustom);  [CE]  cannot  find  symbol  i  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  appendQuotedString(pattern,  fmtCount,  i,  stripCustom);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendQuotedString(pattern,  fmtCount,  i,  stripCustom);	  appendQuotedString(pattern,    fmtCount,    stripCustom);    	non-compiled	[CE]  cannot  find  symbol  i	15	None	replace
375	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(fmtCount    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	42	1	replace
376	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(fmtCount    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	42	1	replace
377	[BUG]  [BUGGY]  if(end  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  end  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(end  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(end  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(fmtCount    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol  end	42	None	replace
378	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }	  if(fmtCount    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	42	1	replace
379	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }	  if(fmtCount    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	42	1	replace
380	[BUG]  [BUGGY]  ArrayList  foundDescriptions  =  findDescriptions.iterator();  it.hasNext();)  {  appendAndSet(fmtCount);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  ArrayList  foundDescriptions  =  findDescriptions.iterator();  it.hasNext();)  {  appendAndSet(fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	ArrayList  foundDescriptions  =  findDescriptions.iterator();  it.hasNext();)  {  appendAndSet(fmtCount);  }	  Integer    fmtCount    =    foundDescriptions.iterator();    it.hasNext();)    {    appendAndSet(fmtCount);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
381	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendAndSet(fmtCount);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendAndSet(fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendAndSet(fmtCount);  }	  Integer    fmtCount    =    foundDescriptions.iterator();    it.hasNext();)    {    appendAndSet(fmtCount);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
382	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendAndSet(fmtCount);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendAndSet(fmtCount);  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendAndSet(fmtCount);  }	  Integer    fmtCount    =    foundDescriptions.iterator();    it.hasNext();)    {    appendAndSet(fmtCount);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
383	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(fmtCount  >  0)  {  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  }	          fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount    =    readArgumentIndex(pattern,    pos);    	compilable	  [FE]  IllegalArgumentException  	72	5	replace
384	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >  0)  {  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  }	          fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount    =    readArgumentIndex(pattern,    pos);    	compilable	  [FE]  IllegalArgumentException  	72	5	replace
385	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(fmtCount  ==  0)  {  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  }	          fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount    =    readArgumentIndex(pattern,    pos);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	72	1	replace
386	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  }	          fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount    =    readArgumentIndex(pattern,    pos);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	72	1	replace
387	[BUG]  [BUGGY]  char[]  c  =  it.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  char[]  c  =  it.toCharArray();  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char[]  c  =  it.toCharArray();	  char[]    c    =    this.pattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	97	None	replace
388	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(pos.getIndex()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	111	1	add
389	[BUG]  [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.getIndex()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	111	1	add
390	[BUG]  [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  fmtCount,  fmtCount);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.getIndex()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  fmtCount,  fmtCount);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	111	None	add
391	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos)-  1,  END_FE);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos)-  1,  END_FE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos)-  1,  END_FE);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos),    END_FE);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	91	None	replace
392	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1  -  1);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1  -  1);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1  -  1);	  fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    -    1);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	4	None	replace
393	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1  +  1);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1  +  1);	  fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    -    1);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	4	None	replace
394	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos)-  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos)-  1);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos)-  1);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos),    0);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	92	None	replace
395	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos),  0);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  next(pos),  0);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  next(pos),  0);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos),    0);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	92	None	replace
396	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c!=  null)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(c!=  null)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	26	1	replace
397	[BUG]  [BUGGY]  if(c!=  null)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c!=  null)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c!=  null)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	26	1	replace
398	[BUG]  [BUGGY]  if(c.length()  >  0)  {  seekNonWs(pattern,  pos  +  1);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  >  0)  {  seekNonWs(pattern,  pos  +  1);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  >  0)  {  seekNonWs(pattern,  pos  +  1);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
399	[BUG]  [BUGGY]  if(i  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.charAt(i)!=  '-')  {  continue;  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(i  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.charAt(i)!=  '-')  {  continue;  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(i  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.charAt(i)!=  '-')  {  continue;  }	          if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    c    =    it.next();    if(c.charAt(i)!=    '-')    {    continue;    }    	non-compiled	[CE]  orphaned  default	89	None	replace
400	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(c,  pos.getIndex(),  p);  [CE]  cannot  find  symbol  p  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(c,  pos.getIndex(),  p);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(c,  pos.getIndex(),  p);	  fmtCount    =    readArgumentIndex(pattern,    pos.getIndex(),    c);    	non-compiled	[CE]  cannot  find  symbol  p	132	None	replace
401	[BUG]  [BUGGY]  pos.setIndex(indent);  [CE]  cannot  find  symbol  indent  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  pos.setIndex(indent);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	pos.setIndex(indent);	  pos.setIndex(i);    	non-compiled	[CE]  cannot  find  symbol  indent	57	None	replace
402	[BUG]  [BUGGY]  if(fmtCount!=  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount!=  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount!=  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  true);  break;  }	          if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    appendString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	50	None	replace
403	[BUG]  [BUGGY]  if(fmtCount!=  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  false);  break;  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount!=  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount!=  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  false);  break;  }	          if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    appendString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	50	None	replace
404	[BUG]  [BUGGY]  if(c!=  null)  {  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c!=  null)  {  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c!=  null)  {  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	45	None	replace
405	[BUG]  [BUGGY]  if(c!=  null)  {  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c!=  null)  {  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c!=  null)  {  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }	  if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	45	None	replace
406	[BUG]  [BUGGY]  char  fmtCount  =  foundDescriptions.size();  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  char  fmtCount  =  foundDescriptions.size();  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char  fmtCount  =  foundDescriptions.size();	  int    fmtCount    =    foundDescriptions.size();    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	19	None	replace
407	[BUG]  [BUGGY]  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(it.next());  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(it.next());  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(it.next());  }	  if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(it.next());    }    	non-compiled	[CE]  orphaned  default	94	None	replace
408	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  0,  c);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  0,  c);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  0,  c);	  fmtCount    =    readArgumentIndex(pattern,    0);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	121	None	replace
409	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  0,  pos);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  0,  pos);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  0,  pos);	  fmtCount    =    readArgumentIndex(pattern,    0);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	121	None	replace
410	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  1,  0);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  1,  0);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  1,  0);	  fmtCount    =    readArgumentIndex(pattern,    0);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	121	None	replace
411	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  fmtCount);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  appendQuotedString(pattern,  pos,  fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendQuotedString(pattern,  pos,  fmtCount);	  appendQuotedString(pattern,    pos,    stripCustom);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	14	None	replace
412	[BUG]  [BUGGY]  if(c.length()  >  0)  {  seekNonWs(pos,  pos);  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  >  0)  {  seekNonWs(pos,  pos);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  >  0)  {  seekNonWs(pos,  pos);  }	  if(pos.length()    >    0)    {    seekNonWs(c,    pos);    }    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
413	[BUG]  [BUGGY]  if(c.length()  >  0)  {  seekNonWs(p,  pos);  }  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  >  0)  {  seekNonWs(p,  pos);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  >  0)  {  seekNonWs(p,  pos);  }	  if(pos.length()    >    0)    {    seekNonWs(c,    pos);    }    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
414	[BUG]  [BUGGY]  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  fmtCount,  fmtCount);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(stripCustom.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  fmtCount,  fmtCount);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	103	None	add
415	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(stripCustom!=  null)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(stripCustom.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(stripCustom!=  null)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	103	1	add
416	[BUG]  [BUGGY]  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(stripCustom!=  null)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(stripCustom!=  null)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(stripCustom.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(stripCustom!=  null)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	103	1	add
417	[BUG]  [BUGGY]  if(c.length()!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
418	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  start  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol  start	99	None	replace
419	[BUG]  [BUGGY]  if(stripCustom.length()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  start  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(stripCustom.length()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(stripCustom.length()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol  start	99	None	replace
420	[BUG]  [BUGGY]  if(c.length()  <  =  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  <  =  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  <  =  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
421	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos  +  1,  fmtCount);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos  +  1,  fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos  +  1,  fmtCount);	  fmtCount    =    readArgumentIndex(pattern,    pos    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	82	None	replace
422	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount  [CE]  ')'  expected  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount	  	non-compiled	[CE]  ')'  expected	41	None	add
423	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  START_FE  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  START_FE  +  1);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  START_FE  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos),    START_FE);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	58	None	replace
424	[BUG]  [BUGGY]  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount!=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  }	  if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  orphaned  default	31	None	replace
425	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  c,  END_FE);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  c,  END_FE);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos,  c,  END_FE);	  int    fmtCount    =    readArgumentIndex(pattern,    pos,    c);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	126	None	replace
426	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  start);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  start);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos,  start);	  int    fmtCount    =    readArgumentIndex(pattern,    pos,    c);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	126	None	replace
427	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  seekNonWs(pattern,  fmtCount  +  1);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  ==  0)  {  seekNonWs(pattern,  fmtCount  +  1);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  ==  0)  {  seekNonWs(pattern,  fmtCount  +  1);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    fmtCount);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(START_FE).append(index);    }    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
428	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  c);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  c);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >  0)  {  seekNonWs(pattern,  c);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(pos.length()    >    0)    {    seekNonWs(pattern,    c);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	1	None	replace
429	[BUG]  [BUGGY]  if(i  >  0)  {  seekNonWs(pattern,  c);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  i  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(i  >  0)  {  seekNonWs(pattern,  c);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(i  >  0)  {  seekNonWs(pattern,  c);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(pos.length()    >    0)    {    seekNonWs(pattern,    c);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol  i	1	None	replace
430	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex())+  1;  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex())+  1;  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos.getIndex())+  1;	  fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    +    1);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	5	None	replace
431	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  seekNonWs(pattern,  0,  fmtCount);  }  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  ==  0)  {  seekNonWs(pattern,  0,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  ==  0)  {  seekNonWs(pattern,  0,  fmtCount);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
432	[BUG]  [BUGGY]  if(fmtCount!=  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(c[i]);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount!=  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(c[i]);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount!=  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(c[i]);  }	          if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    appendString(c[i]);    }    	non-compiled	[CE]  orphaned  default	53	None	replace
433	[BUG]  [BUGGY]  char[]  c  =  toPattern.toCharArray()  +  1;  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  char[]  c  =  toPattern.toCharArray()  +  1;  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char[]  c  =  toPattern.toCharArray()  +  1;	  char[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	11	None	replace
434	[BUG]  [BUGGY]  if(c.length()  <  =  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  <  =  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  <  =  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	  if(c.length()    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
435	[BUG]  [BUGGY]  pos.setIndex(fmtCount);  int  pos  =  readArgumentIndex(pattern,  pos);  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  pos.setIndex(fmtCount);  int  pos  =  readArgumentIndex(pattern,  pos);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	pos.setIndex(fmtCount);    int  pos  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	54	None	add
436	[BUG]  [BUGGY]  pos.setIndex(fmtCount);  int  index  =  readArgumentIndex(pattern,  pos);  [CE]  variable  index  is  already  defined  in  method  applyPattern(String)  [FE]      IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  pos.setIndex(fmtCount);  int  index  =  readArgumentIndex(pattern,  pos);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	pos.setIndex(fmtCount);    int  index  =  readArgumentIndex(pattern,  pos);	  	non-compiled	[CE]  variable  index  is  already  defined  in  method  applyPattern(String)	54	None	add
437	[BUG]  [BUGGY]  pos.setIndex(fmtCount);  int  pos.setIndex(fmtCount);  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  pos.setIndex(fmtCount);  int  pos.setIndex(fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	pos.setIndex(fmtCount);    int  pos.setIndex(fmtCount);	  	non-compiled	[CE]  ';'  expected	54	None	add
438	[BUG]  [BUGGY]  pos.setIndex(fmtCount);  int  index  =  readArgumentIndex(pattern,  next(pos));  [CE]  variable  index  is  already  defined  in  method  applyPattern(String)  [FE]          IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  pos.setIndex(fmtCount);  int  index  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	pos.setIndex(fmtCount);    int  index  =  readArgumentIndex(pattern,  next(pos));	  	non-compiled	[CE]  variable  index  is  already  defined  in  method  applyPattern(String)	54	None	add
439	[BUG]  [BUGGY]  if(c.length()  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  >=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()!=    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
440	[BUG]  [BUGGY]  AppendQuotedString(pattern,  pos,  DUMMY_PATTERN);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  AppendQuotedString(pattern,  pos,  DUMMY_PATTERN);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	AppendQuotedString(pattern,  pos,  DUMMY_PATTERN);	  AppendQuotedString(pattern,    pos,    stripCustom);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
441	[BUG]  [BUGGY]  AppendQuotedString(pattern,  pos,  fmtCount);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  AppendQuotedString(pattern,  pos,  fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	AppendQuotedString(pattern,  pos,  fmtCount);	  AppendQuotedString(pattern,    pos,    stripCustom);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
442	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c  +  1);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c  +  1);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos),    c);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	60	None	replace
443	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]          fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount  =  readArgumentIndex(pattern,  pos);  if(fmtCount  ==  0)  {  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	                fmtCount        =        readArgumentIndex(pattern,        pos);        fmtCount    =    readArgumentIndex(pattern,    pos);    if(fmtCount  ==  0)  {  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  }	  	compilable	  [FE]  IllegalArgumentException  	71	5	add
444	[BUG]  [BUGGY]          fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount  =  readArgumentIndex(pattern,  pos);  if(fmtCount  ==  0)  {  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]          fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount  =  readArgumentIndex(pattern,  pos);  if(fmtCount  ==  0)  {  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	                fmtCount        =        readArgumentIndex(pattern,        pos);        fmtCount    =    readArgumentIndex(pattern,    pos);    if(fmtCount  ==  0)  {  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  }	  	compilable	  [FE]  IllegalArgumentException  	71	5	add
445	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FMT).append(index);  }  [CE]  cannot  find  symbol  END_FMT  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FMT).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FMT).append(index);  }	  	non-compiled	[CE]  cannot  find  symbol  END_FMT	23	None	add
446	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [CE]  cannot  find  symbol  index  [FE]      IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  	non-compiled	[CE]  cannot  find  symbol  index	23	None	add
447	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos  +  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos  +  1);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  pos  +  1);	  char    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	10	None	replace
448	[BUG]  [BUGGY]  if(c!=  null)  {  if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c!=  null)  {  if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c!=  null)  {  if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(fmtCount    ==    0)    {    if(c.length()    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	100	None	replace
449	[BUG]  [BUGGY]  if(c!=  null)  {  if(fmtCount  ==  0)  {  if(c.length()  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  [CE]  '.class'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c!=  null)  {  if(fmtCount  ==  0)  {  if(c.length()  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c!=  null)  {  if(fmtCount  ==  0)  {  if(c.length()  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,	  if(fmtCount    ==    0)    {    if(c.length()    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  '.class'  expected	100	None	replace
450	[BUG]  [BUGGY]  if(c!=  null)  {  if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c!=  null)  {  if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c!=  null)  {  if(fmtCount  ==  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }	  if(fmtCount    ==    0)    {    if(c.length()    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	100	None	replace
451	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(stripCustom  ==  null)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(stripCustom  ==  null)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(stripCustom.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	104	1	replace
452	[BUG]  [BUGGY]  if(stripCustom  ==  null)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(stripCustom  ==  null)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(stripCustom  ==  null)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(stripCustom.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	104	1	replace
453	[BUG]  [BUGGY]  if(end  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(end  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(end  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	          if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  orphaned  default	52	None	replace
454	[BUG]  [BUGGY]  if(end  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  System.arraycopy(c,  0,  c,  start,  fmtCount);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(end  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  System.arraycopy(c,  0,  c,  start,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(end  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  System.arraycopy(c,  0,  c,  start,  fmtCount);  }	          if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  orphaned  default	52	None	replace
455	[BUG]  [BUGGY]  if(end  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount  +  1);  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(end  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount  +  1);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(end  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount  +  1);  }	          if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  orphaned  default	52	None	replace
456	[BUG]  [BUGGY]  if(end  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  System.arraycopy(c,  0,  c,  end,  fmtCount);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(end  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  System.arraycopy(c,  0,  c,  end,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(end  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  System.arraycopy(c,  0,  c,  end,  fmtCount);  }	          if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  orphaned  default	52	None	replace
457	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  [CE]  '.class'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,	  if(fmtCount    ==    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  '.class'  expected	32	None	replace
458	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }	          if(c.length()    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    break;    }    	non-compiled	[CE]  orphaned  default	129	None	replace
459	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }	          if(c.length()    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    break;    }    	non-compiled	[CE]  orphaned  default	129	None	replace
460	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  e,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  e  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  e,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  e,  fmtCount,  fmtCount);  }	  	non-compiled	[CE]  cannot  find  symbol  e	41	None	add
461	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount  [CE]  ')'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(fmtCount  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount	  	non-compiled	[CE]  ')'  expected	41	None	add
462	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  start  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >  0)  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(fmtCount    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol  start	3	None	replace
463	[BUG]  [BUGGY]  if(pos.getIndex()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  start  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.getIndex()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.getIndex()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol  start	99	None	replace
464	[BUG]  [BUGGY]  if(pos.length()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
465	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(c,  pos.getIndex(),  END_FE);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(c,  pos.getIndex(),  END_FE);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(c,  pos.getIndex(),  END_FE);	  fmtCount    =    readArgumentIndex(c,    pos.getIndex());    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	6	None	replace
466	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(c,  pos.getIndex()  -  1,  pos);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(c,  pos.getIndex()  -  1,  pos);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(c,  pos.getIndex()  -  1,  pos);	  fmtCount    =    readArgumentIndex(c,    pos.getIndex());    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	6	None	replace
467	[BUG]  [BUGGY]  if(c.length  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  start  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(pos.length()    >    0)    {    seekNonWs(pattern,    c);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol  start	1	None	replace
468	[BUG]  [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  c);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  c);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  c);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(pos.length()    >    0)    {    seekNonWs(pattern,    c);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	1	None	replace
469	[BUG]  [BUGGY]  if(next(c,  pos.getIndex())  ==  0)  {  seekNonWs(pattern,  pos);  }  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(next(c,  pos.getIndex())  ==  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(next(c,  pos.getIndex())  ==  0)  {  seekNonWs(pattern,  pos);  }	  if(next(pos.getIndex())    ==    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	118	None	replace
470	[BUG]  [BUGGY]  if(foundFormats!=  null)  {  System.arraycopy(c,  0,  foundFormats.length,  fmtCount);  }  else  {  System.arraycopy(c,  0,  fmtCount,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(foundFormats!=  null)  {  System.arraycopy(c,  0,  foundFormats.length,  fmtCount);  }  else  {  System.arraycopy(c,  0,  fmtCount,  foundFormats.length);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(foundFormats!=  null)  {  System.arraycopy(c,  0,  foundFormats.length,  fmtCount);  }  else  {  System.arraycopy(c,  0,  fmtCount,  foundFormats.length);  }	          if(!foundFormats.contains(c))    {    System.arraycopy(c,    0,    fmtCount,    foundFormats.length);    }    else    {    System.arraycopy(c,    0,    fmtCount,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	86	None	replace
471	[BUG]  [BUGGY]  if(foundFormats.length!=  0)  {  System.arraycopy(c,  0,  foundFormats.length,  fmtCount);  }  else  {  System.arraycopy(c,  0,  fmtCount,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(foundFormats.length!=  0)  {  System.arraycopy(c,  0,  foundFormats.length,  fmtCount);  }  else  {  System.arraycopy(c,  0,  fmtCount,  foundFormats.length);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(foundFormats.length!=  0)  {  System.arraycopy(c,  0,  foundFormats.length,  fmtCount);  }  else  {  System.arraycopy(c,  0,  fmtCount,  foundFormats.length);  }	          if(!foundFormats.contains(c))    {    System.arraycopy(c,    0,    fmtCount,    foundFormats.length);    }    else    {    System.arraycopy(c,    0,    fmtCount,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	86	None	replace
472	[BUG]  [BUGGY]  if(foundFormats.length  ==  0)  {  System.arraycopy(c,  0,  foundFormats.length,  fmtCount);  }  else  {  System.arraycopy(c,  0,  fmtCount,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(foundFormats.length  ==  0)  {  System.arraycopy(c,  0,  foundFormats.length,  fmtCount);  }  else  {  System.arraycopy(c,  0,  fmtCount,  foundFormats.length);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(foundFormats.length  ==  0)  {  System.arraycopy(c,  0,  foundFormats.length,  fmtCount);  }  else  {  System.arraycopy(c,  0,  fmtCount,  foundFormats.length);  }	          if(!foundFormats.contains(c))    {    System.arraycopy(c,    0,    fmtCount,    foundFormats.length);    }    else    {    System.arraycopy(c,    0,    fmtCount,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	86	None	replace
473	[BUG]  [BUGGY]  appendQuotedString(pattern,  fmtCount,  stripCustom,  END_FE);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  appendQuotedString(pattern,  fmtCount,  stripCustom,  END_FE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendQuotedString(pattern,  fmtCount,  stripCustom,  END_FE);	  appendQuotedString(pattern,    fmtCount,    stripCustom);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	15	None	replace
474	[BUG]  [BUGGY]  if(c.length()  <  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  <  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  <  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.next());  break;  }	          if(c.length()    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    break;    }    	non-compiled	[CE]  orphaned  default	129	None	replace
475	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(c.length  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }	  if(pos.length()    ==    0)    {    seekNonWs(pattern,    c);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(START_FE).append(index);    }    	compilable	  [FE]  IllegalArgumentException  	34	5	replace
476	[BUG]  [BUGGY]  if(c.length  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [FE]  IllegalArgumentException  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }	  if(pos.length()    ==    0)    {    seekNonWs(pattern,    c);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(START_FE).append(index);    }    	compilable	  [FE]  IllegalArgumentException  	34	5	replace
477	[BUG]  [BUGGY]  Integer  fmtCount  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFunction(c.next());  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  Integer  fmtCount  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFunction(c.next());  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	Integer  fmtCount  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFunction(c.next());  }	  Integer    fmtCount    =    foundDescriptions.iterator();    it.hasNext();)    {    appendFunction(it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
478	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFunction(it.next());  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFunction(it.next());  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFunction(it.next());  }	  Integer    fmtCount    =    foundDescriptions.iterator();    it.hasNext();)    {    appendFunction(it.next());    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
479	[BUG]  [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  fmtCount,  0);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  fmtCount,  0);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  fmtCount,  0);  }	  if(pos.getIndex()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	117	None	replace
480	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c,  END_FE);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c,  END_FE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c,  END_FE);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos),    c);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	60	None	replace
481	[BUG]  [BUGGY]  if(next(pos.getIndex())  <  0)  {  seekNonWs(pattern,  pos);  }  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(next(pos.getIndex())  <  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(next(pos.getIndex())  <  0)  {  seekNonWs(pattern,  pos);  }	  if(c.length()    <    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	105	None	replace
482	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(c.length  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	  if(pos.length()    ==    0)    {    seekNonWs(pattern,    c);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	compilable	  [FE]  IllegalArgumentException  	25	5	replace
483	[BUG]  [BUGGY]  if(c.length  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [FE]  IllegalArgumentException  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	  if(pos.length()    ==    0)    {    seekNonWs(pattern,    c);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	compilable	  [FE]  IllegalArgumentException  	25	5	replace
484	[BUG]  [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(it.next());  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(it.next());  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >=  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(it.next());  }	  if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(it.next());    }    	non-compiled	[CE]  orphaned  default	94	None	replace
485	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(c.length!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()!=    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	107	1	replace
486	[BUG]  [BUGGY]  if(c.length!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()!=    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	107	1	replace
487	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()));  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()));  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()));	  fmtCount    =    readArgumentIndex(pattern,    start,    pos.getIndex());    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	7	None	replace
488	[BUG]  [BUGGY]  if(c.length  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	45	None	replace
489	[BUG]  [BUGGY]  if(c.length()  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	45	None	replace
490	[BUG]  [BUGGY]  if(c.length()  <  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  <  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  <  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.next());  }	  if(c.length()    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  orphaned  default	115	None	replace
491	[BUG]  [BUGGY]  if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.remove());  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.remove());  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  pos,  it.remove());  }	  if(c.length()    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  orphaned  default	115	None	replace
492	[BUG]  [BUGGY]  if(c.length()  >  0)  {  seekNonWs(pattern,  pos,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  >  0)  {  seekNonWs(pattern,  pos,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  >  0)  {  seekNonWs(pattern,  pos,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
493	[BUG]  [BUGGY]  if(c.length()  >  0)  {  seekNonWs(pattern,  i);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  >  0)  {  seekNonWs(pattern,  i);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  >  0)  {  seekNonWs(pattern,  i);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
494	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  -  2));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  -  2));  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex()  -  2));	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos.getIndex()));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	95	None	replace
495	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex())-  1);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex())-  1);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos.getIndex())-  1);	  int    fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    -    1);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	67	None	replace
496	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  fmtCount);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendQuotedString(pattern,  pos,  stripCustom,  fmtCount);	  appendQuotedString(pattern,    pos,    stripCustom);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	14	None	replace
497	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  END_FE);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  END_FE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendQuotedString(pattern,  pos,  stripCustom,  END_FE);	  appendQuotedString(pattern,    pos,    stripCustom);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	14	None	replace
498	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(c.length!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	  if(c.length()!=    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	78	1	replace
499	[BUG]  [BUGGY]  if(c.length!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length!=  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	  if(c.length()!=    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	78	1	replace
500	[BUG]  [BUGGY]  if(fmtCount  <  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  <  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  <  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendFormat(DUMMY_PATTERN);  }	  if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendFormat(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	84	None	replace
501	[BUG]  [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c!=  null  &&  c.length  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c!=  null  &&  c.length  >  0)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(c!=    null)    {    for(int    i    =    0;    i    <    c.length();    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	101	None	replace
502	[BUG]  [BUGGY]  if(fmtCount!=  fmtCount)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount!=  fmtCount)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount!=  fmtCount)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(pattern,  pos,  stripCustom,  true);  break;  }	          if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    appendString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	50	None	replace
503	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  c.length;  i++)  {  appendString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  c.length;  i++)  {  appendString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  c.length;  i++)  {  appendString(pattern,  pos,  stripCustom,  true);  break;  }	          if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    appendString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	50	None	replace
504	[BUG]  [BUGGY]  if(c.length()  <  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  <  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  <  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	  if(c.length()    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	33	None	replace
505	[BUG]  [BUGGY]  if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [CE]  orphaned  default  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }	  if(c.length()    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	33	None	replace
506	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  c,  0);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  c,  0);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  c,  0);	  fmtCount    =    readArgumentIndex(pattern,    pos.getIndex(),    c);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	132	None	replace
507	[BUG]  [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos,  fmtCount);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  char  fmtCount  =  readArgumentIndex(pattern,  pos,  fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char  fmtCount  =  readArgumentIndex(pattern,  pos,  fmtCount);	  char    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	10	None	replace
508	[BUG]  [BUGGY]  if(c.length  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	          if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  orphaned  default	52	None	replace
509	[BUG]  [BUGGY]  if(c.length  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount  +  1);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount  +  1);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount  +  1);  }	          if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  orphaned  default	52	None	replace
510	[BUG]  [BUGGY]  if(c.length  >  0)  {  for(int  i  =  0;  i  <  charCount;  i++)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length  >  0)  {  for(int  i  =  0;  i  <  charCount;  i++)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length  >  0)  {  for(int  i  =  0;  i  <  charCount;  i++)  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	          if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  orphaned  default	52	None	replace
511	[BUG]  [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(pattern,  pos,  c);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(pattern,  pos,  c);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  >  0)  {  seekNonWs(pattern,  pos,  c);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(pos.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
512	[BUG]  [BUGGY]  Integer  fmtCount  =  readArgumentIndex(pattern,  0);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  Integer  fmtCount  =  readArgumentIndex(pattern,  0);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	Integer  fmtCount  =  readArgumentIndex(pattern,  0);	          fmtCount    =    readArgumentIndex(pattern,    pos);    Integer    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	74	None	replace
513	[BUG]  [BUGGY]  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(stripCustom.size()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(stripCustom.size()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(stripCustom.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(stripCustom.size()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  	non-compiled	[CE]  cannot  find  symbol	103	None	add
514	[BUG]  [BUGGY]  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount  [CE]  ')'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(stripCustom.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(stripCustom.length()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount	  	non-compiled	[CE]  ')'  expected	103	None	add
515	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  c,  START_FE);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  c,  START_FE);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos,  c,  START_FE);	  int    fmtCount    =    readArgumentIndex(pattern,    pos,    c);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	126	None	replace
516	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  next(pos));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  next(pos));  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos,  next(pos));	  int    fmtCount    =    readArgumentIndex(pattern,    pos,    c);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	126	None	replace
517	[BUG]  [BUGGY]  pos.setIndex(fmtCount);  int  pos  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  pos.setIndex(fmtCount);  int  pos  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	pos.setIndex(fmtCount);    int  pos  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	54	None	add
518	[BUG]  [BUGGY]  pos.setIndex(fmtCount);  int  pos  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(fmtCount);  [CE]  variable  pos  is  already  defined  in  method  applyPattern(String)  [FE]      IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  pos.setIndex(fmtCount);  int  pos  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(fmtCount);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	pos.setIndex(fmtCount);    int  pos  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(fmtCount);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  applyPattern(String)	54	None	add
519	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  fmtCount,  [CE]  '.class'  expected  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  fmtCount,  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >  0)  {  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  fmtCount,	          fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  '.class'  expected	72	None	replace
520	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  seekNonWs(pattern,  fmtCount  -  1);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  ==  0)  {  seekNonWs(pattern,  fmtCount  -  1);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  ==  0)  {  seekNonWs(pattern,  fmtCount  -  1);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    fmtCount);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
521	[BUG]  [BUGGY]  if(c.length  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(c[i]);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(c[i]);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length  >  0)  {  for(int  i  =  0;  i  <  fmtCount;  i++)  {  appendString(c[i]);  }	          if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    appendString(c[i]);    }    	non-compiled	[CE]  orphaned  default	53	None	replace
522	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(fmtCount);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(fmtCount);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(fmtCount);	          if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    appendString(c[i]);    }    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	53	None	replace
523	[BUG]  [BUGGY]  char[]  c  =  this.toPattern.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  char[]  c  =  this.toPattern.toCharArray();  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char[]  c  =  this.toPattern.toCharArray();	  char[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	11	None	replace
524	[BUG]  [BUGGY]  if(next(pos.getIndex())!=  0)  {  seekNonWs(pattern,  pos);  }  [CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(next(pos.getIndex())!=  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(next(pos.getIndex())!=  0)  {  seekNonWs(pattern,  pos);  }	  if(c.length()!=    0)    {    seekNonWs(pattern,    pos);    }    	non-compiled	[CE]  method  next  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	102	None	replace
525	[BUG]  [BUGGY]  char[]  c  =  Pattern.compile(this.pattern,  pos.toCharArray());  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  char[]  c  =  Pattern.compile(this.pattern,  pos.toCharArray());  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char[]  c  =  Pattern.compile(this.pattern,  pos.toCharArray());	  char[]    c    =    this.pattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	97	None	replace
526	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos);  [CE]  ')'  expected  [FE]          IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  next(pos);	  fmtCount    =    readArgumentIndex(pattern,    start);    	non-compiled	[CE]  ')'  expected	64	None	replace
527	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  0);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  0);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos.getIndex(),  0);	  fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    +    1);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	5	None	replace
528	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(pos.getIndex()  >  1)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(pos.getIndex()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(pos.getIndex()  >  1)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	111	1	add
529	[BUG]  [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(pos.getIndex()  >  1)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(pos.getIndex()  >  1)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.getIndex()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(pos.getIndex()  >  1)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	111	1	add
530	[BUG]  [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount  [CE]  ')'  expected  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.getIndex()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount	  	non-compiled	[CE]  ')'  expected	111	None	add
531	[BUG]  [BUGGY]  if(c.length  >  0)  {  seekNonWs(pattern,  pos.length());  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length  >  0)  {  seekNonWs(pattern,  pos.length());  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length  >  0)  {  seekNonWs(pattern,  pos.length());  }	  if(pos.length()    >    0)    {    seekNonWs(pattern,    c);    }    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
532	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(c.length  >  0)  {  seekNonWs(pattern,  pos);  }	  if(pos.length()    >    0)    {    seekNonWs(pattern,    c);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	28	1	replace
533	[BUG]  [BUGGY]  if(c.length  >  0)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length  >  0)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length  >  0)  {  seekNonWs(pattern,  pos);  }	  if(pos.length()    >    0)    {    seekNonWs(pattern,    c);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	28	1	replace
534	[BUG]  [BUGGY]  if(c.length()  <  0)  {  seekNonWs(pattern,  pos,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  <  0)  {  seekNonWs(pattern,  pos,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  <  0)  {  seekNonWs(pattern,  pos,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
535	[BUG]  [BUGGY]  if(c.length()  <  0)  {  seekNonWs(pattern,  pos  +  1);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  <  0)  {  seekNonWs(pattern,  pos  +  1);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  <  0)  {  seekNonWs(pattern,  pos  +  1);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(c.length()    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
536	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()  ==  0)  {  return;  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()  ==  0)  {  return;  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()  ==  0)  {  return;  }	          if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    c    =    it.next();    if(c.length()    ==    0)    {    return;    }    	non-compiled	[CE]  orphaned  default	87	None	replace
537	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  2);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  2);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos,  2);	  int    fmtCount    =    readArgumentIndex(pattern,    pos,    END_FE);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	127	None	replace
538	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  4);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos,  4);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos,  4);	  int    fmtCount    =    readArgumentIndex(pattern,    pos,    END_FE);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	127	None	replace
539	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  null);  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  null);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendQuotedString(pattern,  pos,  stripCustom,  null);	  appendQuotedString(pattern,    pos,    stripCustom,    true);    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	131	None	replace
540	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.next(1));  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  pos.next(1));  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  pos.next(1));	  int    fmtCount    =    readArgumentIndex(pattern,    next(0));    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	59	None	replace
541	[BUG]  [BUGGY]  char[]  c  =  this.pattern.toPattern();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  char[]  c  =  this.pattern.toPattern();  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	char[]  c  =  this.pattern.toPattern();	  char[]    c    =    pattern.toPattern();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	12	None	replace
542	[BUG]  [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(c,  pos,  fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  >  0)  {  seekNonWs(c,  pos,  fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  >  0)  {  seekNonWs(c,  pos,  fmtCount);  }  else  {  System.arraycopy(c,  start,  fmtCount,  fmtCount);  }	  if(pos.length()    >    0)    {    seekNonWs(c,    pos);    }    else    {    System.arraycopy(c,    start,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
543	[BUG]  [BUGGY]  if(fmtCount.length()  ==  0)  {  seekNonWs(pattern,  c.length);  }  [CE]  int  cannot  be  dereferenced  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount.length()  ==  0)  {  seekNonWs(pattern,  c.length);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount.length()  ==  0)  {  seekNonWs(pattern,  c.length);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    fmtCount);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	49	None	replace
544	[BUG]  [BUGGY]  if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  foundFormats,  fmtCount);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  foundFormats,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  foundFormats,  fmtCount);  }	          if(!foundFormats.contains(c))    {    System.arraycopy(c,    0,    fmtCount,    foundFormats.length);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	88	None	replace
545	[BUG]  [BUGGY]  if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  foundDescriptions,  fmtCount,  foundFormats.length);  }  [CE]  cannot  find  symbol  length  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  foundDescriptions,  fmtCount,  foundFormats.length);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  foundDescriptions,  fmtCount,  foundFormats.length);  }	          if(!foundFormats.contains(c))    {    System.arraycopy(c,    0,    fmtCount,    foundFormats.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	88	None	replace
546	[BUG]  [BUGGY]  if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  foundDescriptions,  fmtCount);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  foundDescriptions,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(!foundFormats.contains(c))  {  System.arraycopy(c,  0,  foundDescriptions,  fmtCount);  }	          if(!foundFormats.contains(c))    {    System.arraycopy(c,    0,    fmtCount,    foundFormats.length);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	88	None	replace
547	[BUG]  [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  c);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  c);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.getIndex()  >  0)  {  seekNonWs(pattern,  c);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(pos.length()    >    0)    {    seekNonWs(pattern,    c);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  method  seekNonWs  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	43	None	replace
548	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(c.length  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(pos.length()    >    0)    {    seekNonWs(pattern,    c);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	43	1	replace
549	[BUG]  [BUGGY]  if(c.length  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(pos.length()    >    0)    {    seekNonWs(pattern,    c);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	43	1	replace
550	[BUG]  [BUGGY]  if(c.length()  <  0)  {  seekNonWs(pattern,  pos,  END_FE);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  <  0)  {  seekNonWs(pattern,  pos,  END_FE);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  <  0)  {  seekNonWs(pattern,  pos,  END_FE);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	  if(c.length()    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
551	[BUG]  [BUGGY]  if(c.length()  <  0)  {  seekNonWs(pattern,  pos  +  1);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  <  0)  {  seekNonWs(pattern,  pos  +  1);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  <  0)  {  seekNonWs(pattern,  pos  +  1);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	  if(c.length()    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
552	[BUG]  [BUGGY]  if(c.length()  <  0)  {  seekNonWs(pattern,  i);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  <  0)  {  seekNonWs(pattern,  i);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  <  0)  {  seekNonWs(pattern,  i);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	  if(c.length()    <    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
553	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1,  c,  DEMY_PATTERN);  [CE]  cannot  find  symbol  DEMY_PATTERN  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1,  c,  DEMY_PATTERN);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos.getIndex()  -  1,  c,  DEMY_PATTERN);	  fmtCount    =    readArgumentIndex(pattern,    pos.getIndex()    -    1,    c);    	non-compiled	[CE]  cannot  find  symbol  DEMY_PATTERN	90	None	replace
554	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  c.length;  i++)  {  appendString(pattern,  pos,  stripCustom,  true);  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  c.length;  i++)  {  appendString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >  0)  {  for(int  i  =  0;  i  <  c.length;  i++)  {  appendString(pattern,  pos,  stripCustom,  true);  }	          if(fmtCount    >    0)    {    for(int    i    =    0;    i    <    fmtCount;    i++)    {    appendString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	51	None	replace
555	[BUG]  [BUGGY]  if(c.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()  ==  0)  {  continue;  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()  ==  0)  {  continue;  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  ==  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  if(c.length()  ==  0)  {  continue;  }	          if(fmtCount    >    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    c    =    it.next();    if(c.length()    ==    0)    {    continue;    }    	non-compiled	[CE]  orphaned  default	85	None	replace
556	[BUG]  [BUGGY]  if(c.length()  <  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  <  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  <  0)  {  for(int  i  =  0;  i  <  fmtCount;  ++i)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }	  if(c.length()    <    0)    {    for(int    i    =    0;    i    <    fmtCount;    ++i)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	123	None	replace
557	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos),  c);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  next(pos),  c);	  fmtCount    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	120	None	replace
558	[BUG]  [BUGGY]  if(fmtCount  <  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendAndSet(it.next());  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  <  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendAndSet(it.next());  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  <  1)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendAndSet(it.next());  }	  if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendAndSet(it.next());    }    	non-compiled	[CE]  orphaned  default	77	None	replace
559	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  if(fmtCount  ==  0)  {  seekNonWs(pattern,  p);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [CE]  cannot  find  symbol  p  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  if(fmtCount  ==  0)  {  seekNonWs(pattern,  p);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    if(fmtCount  ==  0)  {  seekNonWs(pattern,  p);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  	non-compiled	[CE]  cannot  find  symbol  p	23	None	add
560	[BUG]  [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  >  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendString(pattern,  it.next());  }	  if(fmtCount    >=    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendFunction(it.next());    }    	non-compiled	[CE]  orphaned  default	113	None	replace
561	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  Iterator  it  =  foundDescriptions.iterator();  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	Iterator  it  =  foundDescriptions.iterator();	  Integer    fmtCount    =    foundDescriptions.iterator();    it.hasNext();)    {    appendAndSet(fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	20	1	replace
562	[BUG]  [BUGGY]  Iterator  it  =  foundDescriptions.iterator();  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  Iterator  it  =  foundDescriptions.iterator();  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	Iterator  it  =  foundDescriptions.iterator();	  Integer    fmtCount    =    foundDescriptions.iterator();    it.hasNext();)    {    appendAndSet(fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	20	1	replace
563	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos));  ifmtCount  =  readArgumentIndex(pattern,  next(pos));  [CE]  cannot  find  symbol  ifmtCount  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  next(pos));  ifmtCount  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount    =    readArgumentIndex(pattern,    next(pos));    ifmtCount  =  readArgumentIndex(pattern,  next(pos));	  	non-compiled	[CE]  cannot  find  symbol  ifmtCount	119	None	add
564	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  1)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(fmtCount  ==  1)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(fmtCount    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	24	3	replace
565	[BUG]  [BUGGY]  if(fmtCount  ==  1)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount  ==  1)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount  ==  1)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(fmtCount    ==    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	24	3	replace
566	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(c.length  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(pos.length()    ==    0)    {    seekNonWs(pattern,    c);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  IllegalArgumentException  	21	5	replace
567	[BUG]  [BUGGY]  if(c.length  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [FE]  IllegalArgumentException  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length  ==  0)  {  seekNonWs(pattern,  pos);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(index);  }	  if(pos.length()    ==    0)    {    seekNonWs(pattern,    c);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(index);    }    	compilable	  [FE]  IllegalArgumentException  	21	5	replace
568	[BUG]  [BUGGY]          fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount  =  readArgumentIndex(pattern,  pos);  if(fmtCount  ==  0)  {  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  fmtCount,  fmtCount  [CE]  ')'  expected  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]          fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount  =  readArgumentIndex(pattern,  pos);  if(fmtCount  ==  0)  {  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  fmtCount,  fmtCount  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	                fmtCount        =        readArgumentIndex(pattern,        pos);        fmtCount    =    readArgumentIndex(pattern,    pos);    if(fmtCount  ==  0)  {  fmtCount  =  readArgumentIndex(pattern,  pos);  fmtCount  =  readArgumentIndex(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  fmtCount,  fmtCount	  	non-compiled	[CE]  ')'  expected	71	None	add
569	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  char[]  c  =  pattern.toCharArray();  appendQuotedString(pattern,  pos,  stripCustom,  true);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  char[]  c  =  pattern.toCharArray();  appendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendQuotedString(pattern,    pos,    stripCustom,    true);    char[]  c  =  pattern.toCharArray();  appendQuotedString(pattern,  pos,  stripCustom,  true);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	130	None	add
570	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  char[]  c  =  pattern.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]      IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  char[]  c  =  pattern.toCharArray();  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	appendQuotedString(pattern,    pos,    stripCustom,    true);    char[]  c  =  pattern.toCharArray();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	130	None	add
571	[BUG]  [BUGGY]  if(i  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [CE]  cannot  find  symbol  i  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(i  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(i  >  0)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(fmtCount    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol  i	42	None	replace
572	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.getIndex()  <  fmtCount)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(pos.getIndex()  <  fmtCount)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(fmtCount    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	42	1	replace
573	[BUG]  [BUGGY]  if(pos.getIndex()  <  fmtCount)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.getIndex()  <  fmtCount)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.getIndex()  <  fmtCount)  {  seekNonWs(pattern,  pos);  }  else  {  System.arraycopy(c,  0,  c,  fmtCount,  fmtCount);  }	  if(fmtCount    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	42	1	replace
574	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(stripCustom!=  null)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	if(stripCustom!=  null)  {  seekNonWs(pattern,  pos);  }	  if(stripCustom.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	104	1	replace
575	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  seekNonWs(pattern,  pos);  }  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(stripCustom!=  null)  {  seekNonWs(pattern,  pos);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(stripCustom!=  null)  {  seekNonWs(pattern,  pos);  }	  if(stripCustom.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    System.arraycopy(c,    0,    c,    fmtCount,    fmtCount);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	104	1	replace
576	[BUG]  [BUGGY]  if(c.length()  <  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.remove());  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  <  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.remove());  }  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  <  0)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  appendQuotedString(pattern,  pos,  it.remove());  }	  if(c.length()    <    0)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    appendQuotedString(pattern,    pos,    it.next());    }    	non-compiled	[CE]  orphaned  default	108	None	replace
577	[BUG]  [BUGGY]  if(fmtCount.length()  >  0)  {  seekNonWs(pattern,  c.length);  }  [CE]  int  cannot  be  dereferenced  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(fmtCount.length()  >  0)  {  seekNonWs(pattern,  c.length);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(fmtCount.length()  >  0)  {  seekNonWs(pattern,  c.length);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    fmtCount);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	29	None	replace
578	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  c,  pos);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  c,  pos);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  c,  pos);	  fmtCount    =    readArgumentIndex(c,    pos);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	66	None	replace
579	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(c,  pos,  END_FE);  [CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(c,  pos,  END_FE);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(c,  pos,  END_FE);	  fmtCount    =    readArgumentIndex(c,    pos);    	non-compiled	[CE]  method  readArgumentIndex  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	66	None	replace
580	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos  +  1,  c);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos  +  1,  c);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos  +  1,  c);	  fmtCount    =    readArgumentIndex(pattern,    pos    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	82	None	replace
581	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(char  END_FE);  [CE]  '.class'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(char  END_FE);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(char  END_FE);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    	non-compiled	[CE]  '.class'  expected	27	None	replace
582	[BUG]  [BUGGY]  if(c.length()  >  0)  {  seekNonWs(pattern,  pos,  END_FE);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  >  0)  {  seekNonWs(pattern,  pos,  END_FE);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  >  0)  {  seekNonWs(pattern,  pos,  END_FE);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
583	[BUG]  [BUGGY]  if(c.length()  >  0)  {  seekNonWs(pattern,  i);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  >  0)  {  seekNonWs(pattern,  i);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  >  0)  {  seekNonWs(pattern,  i);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(fmtCount);  }	  if(c.length()    >    0)    {    seekNonWs(pattern,    pos);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(fmtCount);    }    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
584	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  pos.setIndex(0);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	pos.setIndex(0);	  pos.setIndex(fmtCount);    	compilable	  [FE]  IllegalArgumentException  	55	4	replace
585	[BUG]  [BUGGY]  pos.setIndex(0);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  pos.setIndex(0);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	pos.setIndex(0);	  pos.setIndex(fmtCount);    	compilable	  [FE]  IllegalArgumentException  	55	4	replace
586	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos)-  1;  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	add	fmtCount  =  readArgumentIndex(pattern,  pos)-  1;	          fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount    =    readArgumentIndex(pattern,    pos));    	compilable	  [FE]  IllegalArgumentException  	75	5	replace
587	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos)-  1;  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos)-  1;  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos)-  1;	          fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount    =    readArgumentIndex(pattern,    pos));    	compilable	  [FE]  IllegalArgumentException  	75	5	replace
588	[BUG]  [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos));  [CE]  ';'  expected  [FE]                IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  fmtCount  =  readArgumentIndex(pattern,  pos));  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	fmtCount  =  readArgumentIndex(pattern,  pos));	          fmtCount    =    readArgumentIndex(pattern,    pos);    fmtCount    =    readArgumentIndex(pattern,    pos));    	non-compiled	[CE]  ';'  expected	75	None	replace
589	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos)-  1,  0);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  next(pos)-  1,  0);  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  next(pos)-  1,  0);	  int    fmtCount    =    readArgumentIndex(pattern,    next(pos),    0);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	92	None	replace
590	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  0);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          IllegalArgumentException      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  0);  [BUGGY]      seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  0);	          fmtCount    =    readArgumentIndex(pattern,    pos);    int    fmtCount    =    readArgumentIndex(pattern,    pos);    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	73	None	replace
591	[BUG]  [BUGGY]  if(peekNonWs(c,  pos.length())  ==  0)  {  seekNonWs(pattern,  c.length());  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(peekNonWs(c,  pos.length())  ==  0)  {  seekNonWs(pattern,  c.length());  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(peekNonWs(c,  pos.length())  ==  0)  {  seekNonWs(pattern,  c.length());  }	  if(pos.length()    ==    0)    {    seekNonWs(pattern,    c.length());    }    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
592	[BUG]  [BUGGY]  if(pos.length()  ==  0)  {  seekNonWs(pattern,  c,  fmtCount);  }  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(pos.length()  ==  0)  {  seekNonWs(pattern,  c,  fmtCount);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(pos.length()  ==  0)  {  seekNonWs(pattern,  c,  fmtCount);  }	  if(pos.length()    ==    0)    {    seekNonWs(pattern,    c.length());    }    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
593	[BUG]  [BUGGY]  if(c.length()  <  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;      [BUGGY]  if(c.length()  <  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }  [BUGGY]      int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	165	165	1	replace	if(c.length()  <  0)  {  seekNonWs(pattern,  fmtCount);  }  else  {  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  }	  if(c.length()    ==    0)    {    seekNonWs(pattern,    fmtCount);    }    else    {    int    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(START_FE).append(index);    }    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
