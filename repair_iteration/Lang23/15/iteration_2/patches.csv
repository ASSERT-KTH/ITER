bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  start,  index,  true);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  appendQuotedString(pattern,  pos,  start,  index,  true);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	appendQuotedString(pattern,  pos,  start,  index,  true);  break;	  appendQuotedString(pattern,    pos,    start,    true);    break;    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	7	None	replace
2	[BUG]  [BUGGY]  if(c[pos.getIndex()  ]  ==  START_FE)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  cannot  find  symbol  format  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(c[pos.getIndex()  ]  ==  START_FE)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(c[pos.getIndex()  ]  ==  START_FE)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(c[pos.getIndex()    ]    ==    QUOTE)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  cannot  find  symbol  format	15	None	replace
3	[BUG]  [BUGGY]  if(start  >=  -1)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [CE]  cannot  find  symbol  format  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(start  >=  -1)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(start  >=  -1)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }	  if(index    >=    -1)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    break;    }    	non-compiled	[CE]  cannot  find  symbol  format	88	None	replace
4	[BUG]  [BUGGY]  Format  format  =  pattern.toString();  [CE]  incompatible  types  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  pattern.toString();  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  pattern.toString();	  Format    format    =    DUMMY_PATTERN.toString();    	non-compiled	[CE]  incompatible  types	2	None	replace
5	[BUG]  [BUGGY]  Format  format  =  DUMMY_PATTERN.substring(start,  index);  [CE]  incompatible  types  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  DUMMY_PATTERN.substring(start,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  DUMMY_PATTERN.substring(start,  index);	  Format    format    =    DUMMY_PATTERN.toString();    	non-compiled	[CE]  incompatible  types	2	None	replace
6	[BUG]  [BUGGY]  Format  format  =  DUMMY_PATTERN.getValue();  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  DUMMY_PATTERN.getValue();  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  DUMMY_PATTERN.getValue();	  Format    format    =    DUMMY_PATTERN.toString();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
7	[BUG]  [BUGGY]  Format  format  =  registry.getFormat(DUMMY_PATTERN,  start);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  registry.getFormat(DUMMY_PATTERN,  start);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  registry.getFormat(DUMMY_PATTERN,  start);	  Format    format    =    registry.getFormat(DUMMY_PATTERN);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
8	[BUG]  [BUGGY]  Format  format  =  this.registry.getFormat(DUMMY_PATTERN);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  this.registry.getFormat(DUMMY_PATTERN);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  this.registry.getFormat(DUMMY_PATTERN);	  Format    format    =    registry.getFormat(DUMMY_PATTERN);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
9	[BUG]  [BUGGY]  Format  format  =  c.getFormat(DUMMY_PATTERN);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  c.getFormat(DUMMY_PATTERN);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  c.getFormat(DUMMY_PATTERN);	  Format    format    =    registry.getFormat(DUMMY_PATTERN);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
10	[BUG]  [BUGGY]  Format  format  =  iterator.getFormat(DUMMY_PATTERN);  [CE]  cannot  find  symbol  iterator  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  iterator.getFormat(DUMMY_PATTERN);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  iterator.getFormat(DUMMY_PATTERN);	  Format    format    =    registry.getFormat(DUMMY_PATTERN);    	non-compiled	[CE]  cannot  find  symbol  iterator	1	None	replace
11	[BUG]  [BUGGY]  if(index  >=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMM  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMM  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMM	  if(index    >=    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMM    	non-compiled	[CE]  ')'  expected	48	None	replace
12	[BUG]  [BUGGY]  if(index!=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMM  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index!=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMM  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index!=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMM	  if(index    >=    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMM    	non-compiled	[CE]  ')'  expected	48	None	replace
13	[BUG]  [BUGGY]  if(index  >=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMM  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMM  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMM	  if(index    >=    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMM    	non-compiled	[CE]  ')'  expected	48	None	replace
14	[BUG]  [BUGGY]  Format  format  =  getFormat(c,  start,  index);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(c,  start,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(c,  start,  index);	  Format    format    =    getFormat(c,    index);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	105	None	replace
15	[BUG]  [BUGGY]  Format  format  =  getFormat(start,  pos,  index);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(start,  pos,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(start,  pos,  index);	  Format    format    =    getFormat(c,    index);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	105	None	replace
16	[BUG]  [BUGGY]  Format  format  =  getFormat(index,  c);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(index,  c);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(index,  c);	  Format    format    =    getFormat(c,    index);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	105	None	replace
17	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  pos,  stripCustom,  true);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  appendQuotedString(pattern,  start,  pos,  stripCustom,  true);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	appendQuotedString(pattern,  start,  pos,  stripCustom,  true);  break;	  if(c[pos.getIndex()    ]    ==    QUOTE)    {    appendQuotedString(pattern,    start,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	72	None	replace
18	[BUG]  [BUGGY]  AppendQuotedString(pattern,  start,  pos,  stripCustom,  true);  break;  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  AppendQuotedString(pattern,  start,  pos,  stripCustom,  true);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	AppendQuotedString(pattern,  start,  pos,  stripCustom,  true);  break;	  if(c[pos.getIndex()    ]    ==    QUOTE)    {    appendQuotedString(pattern,    start,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
19	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  index,  stripCustom,  true);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  appendQuotedString(pattern,  start,  index,  stripCustom,  true);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	appendQuotedString(pattern,  start,  index,  stripCustom,  true);  break;	  if(c[pos.getIndex()    ]    ==    QUOTE)    {    appendQuotedString(pattern,    start,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	72	None	replace
20	[BUG]  [BUGGY]  char[]  c  =  pattern.getChars(start,  index  +  1);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  pattern.getChars(start,  index  +  1);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char[]  c  =  pattern.getChars(start,  index  +  1);	  char[]    c    =    pattern.getChars(start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	13	None	replace
21	[BUG]  [BUGGY]  char[]  c  =  pattern.getChars(index,  start);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  pattern.getChars(index,  start);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char[]  c  =  pattern.getChars(index,  start);	  char[]    c    =    pattern.getChars(start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	13	None	replace
22	[BUG]  [BUGGY]  char[]  c  =  pattern.getChars(pos,  start,  index);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  pattern.getChars(pos,  start,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char[]  c  =  pattern.getChars(pos,  start,  index);	  char[]    c    =    pattern.getChars(start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	13	None	replace
23	[BUG]  [BUGGY]  char[]  c  =  pattern.getChars(i,  start,  index);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  pattern.getChars(i,  start,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char[]  c  =  pattern.getChars(i,  start,  index);	  char[]    c    =    pattern.getChars(start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	13	None	replace
24	[BUG]  [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  int  fmtCount  =  readArgumentIndex(pattern,  index);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	int  fmtCount  =  readArgumentIndex(pattern,  index);	  if(index    ==    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	96	None	replace
25	[BUG]  [BUGGY]  Format  format  =  new  Format(index,  start,  fmtCount);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(index,  start,  fmtCount);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(index,  start,  fmtCount);	  Format    format    =    new    Format(f,    start,    fmtCount);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	61	None	replace
26	[BUG]  [BUGGY]  Format  format  =  new  Format(fmtCount,  start,  fmtCount);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(fmtCount,  start,  fmtCount);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(fmtCount,  start,  fmtCount);	  Format    format    =    new    Format(f,    start,    fmtCount);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	61	None	replace
27	[BUG]  [BUGGY]  Format  format  =  new  Format(format,  start,  fmtCount);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(format,  start,  fmtCount);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(format,  start,  fmtCount);	  Format    format    =    new    Format(f,    start,    fmtCount);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	61	None	replace
28	[BUG]  [BUGGY]  if(index  <  0)  {  if(index  >  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  <  0)  {  if(index  >  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  <  0)  {  if(index  >  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }	  if(index    >    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMM    	non-compiled	[CE]  orphaned  default	100	None	replace
29	[BUG]  [BUGGY]  if(index  >  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMM  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMM  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMM	  if(index    >    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMM    	non-compiled	[CE]  ')'  expected	100	None	replace
30	[BUG]  [BUGGY]  char  c  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(c);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char  c  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(c);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char  c  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(c);	  char    c    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	30	None	replace
31	[BUG]  [BUGGY]  char  c  =  readArgumentIndex(pattern,  start,  index);  stripCustom.append(END_FE).append(c);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char  c  =  readArgumentIndex(pattern,  start,  index);  stripCustom.append(END_FE).append(c);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char  c  =  readArgumentIndex(pattern,  start,  index);  stripCustom.append(END_FE).append(c);	  char    c    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	30	None	replace
32	[BUG]  [BUGGY]  char  c  =  readArgumentIndex(start,  next(pos));  stripCustom.append(END_FE).append(c);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char  c  =  readArgumentIndex(start,  next(pos));  stripCustom.append(END_FE).append(c);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char  c  =  readArgumentIndex(start,  next(pos));  stripCustom.append(END_FE).append(c);	  char    c    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	30	None	replace
33	[BUG]  [BUGGY]  char  c  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(c);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char  c  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(c);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char  c  =  readArgumentIndex(pattern,  start);  stripCustom.append(END_FE).append(c);	  char    c    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	30	None	replace
34	[BUG]  [BUGGY]  Format  format  =  new  Format(fmtCount,  pos,  c);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(fmtCount,  pos,  c);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(fmtCount,  pos,  c);	  Format    format    =    new    Format(c,    pos,    fmtCount);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	55	None	replace
35	[BUG]  [BUGGY]  Format  format  =  new  Format(format,  pos,  fmtCount);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(format,  pos,  fmtCount);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(format,  pos,  fmtCount);	  Format    format    =    new    Format(c,    pos,    fmtCount);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	55	None	replace
36	[BUG]  [BUGGY]  Format  format  =  new  Format(f,  pos,  c);  [CE]  cannot  find  symbol  f  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(f,  pos,  c);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(f,  pos,  c);	  Format    format    =    new    Format(c,    pos,    fmtCount);    	non-compiled	[CE]  cannot  find  symbol  f	55	None	replace
37	[BUG]  [BUGGY]  char  c  =  readArgumentIndex(pattern,  start,  pos);  stripCustom.append(END_FE).append(c);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char  c  =  readArgumentIndex(pattern,  start,  pos);  stripCustom.append(END_FE).append(c);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char  c  =  readArgumentIndex(pattern,  start,  pos);  stripCustom.append(END_FE).append(c);	  int    c    =    readArgumentIndex(pattern,    start,    pos);    stripCustom.append(END_FE).append(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	31	None	replace
38	[BUG]  [BUGGY]  int  c  =  readArgumentIndex(pattern,  index,  pos);  stripCustom.append(END_FE).append(c);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  int  c  =  readArgumentIndex(pattern,  index,  pos);  stripCustom.append(END_FE).append(c);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	int  c  =  readArgumentIndex(pattern,  index,  pos);  stripCustom.append(END_FE).append(c);	  int    c    =    readArgumentIndex(pattern,    start,    pos);    stripCustom.append(END_FE).append(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	31	None	replace
39	[BUG]  [BUGGY]  if(c[pos.getIndex()  ]  ==  QUOTE,  END_FE)  {  appendQuotedString(pattern,  start,  pos,  false);  break;  }  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(c[pos.getIndex()  ]  ==  QUOTE,  END_FE)  {  appendQuotedString(pattern,  start,  pos,  false);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(c[pos.getIndex()  ]  ==  QUOTE,  END_FE)  {  appendQuotedString(pattern,  start,  pos,  false);  break;  }	  if(c[pos.getIndex()    ]    ==    QUOTE,    END_FE)    {    appendQuotedString(pattern,    start,    pos,    true);    break;    }    	non-compiled	[CE]  ')'  expected	91	None	replace
40	[BUG]  [BUGGY]  AppendQuotedString(pattern,  start,  index,  true);  break;  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  AppendQuotedString(pattern,  start,  index,  true);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	AppendQuotedString(pattern,  start,  index,  true);  break;	  AppendQuotedString(pattern,    start,    stripCustom,    true);    break;    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
41	[BUG]  [BUGGY]  AppendQuotedString(pattern,  start,  stripCustom,  false);  break;  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  AppendQuotedString(pattern,  start,  stripCustom,  false);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	AppendQuotedString(pattern,  start,  stripCustom,  false);  break;	  AppendQuotedString(pattern,    start,    stripCustom,    true);    break;    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
42	[BUG]  [BUGGY]  AppendQuotedString(pattern,  start,  fmtCount,  true);  break;  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  AppendQuotedString(pattern,  start,  fmtCount,  true);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	AppendQuotedString(pattern,  start,  fmtCount,  true);  break;	  AppendQuotedString(pattern,    start,    stripCustom,    true);    break;    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
43	[BUG]  [BUGGY]  if(index  >  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY	  if(index    >    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMMY    	non-compiled	[CE]  ')'  expected	101	None	replace
44	[BUG]  [BUGGY]  AppendQuotedString(pattern,  pos,  stripCustom,  false);  break;  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  AppendQuotedString(pattern,  pos,  stripCustom,  false);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	AppendQuotedString(pattern,  pos,  stripCustom,  false);  break;	  appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
45	[BUG]  [BUGGY]  appendQuotedString(pattern,  index,  start,  pos,  true);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  appendQuotedString(pattern,  index,  start,  pos,  true);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	appendQuotedString(pattern,  index,  start,  pos,  true);  break;	  appendQuotedString(pattern,    start,    pos,    true);    break;    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	5	None	replace
46	[BUG]  [BUGGY]  if(index  >=  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    0;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	79	None	replace
47	[BUG]  [BUGGY]  if(index  <  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  <  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  <  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    0;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	79	None	replace
48	[BUG]  [BUGGY]  Format  format  =  getFormat(index,  start,  fmtCount);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(index,  start,  fmtCount);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(index,  start,  fmtCount);	  Format    format    =    getFormat(index,    start);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	43	None	replace
49	[BUG]  [BUGGY]  Format  format  =  getFormat(index,  start,  pos);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(index,  start,  pos);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(index,  start,  pos);	  Format    format    =    getFormat(index,    start);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	43	None	replace
50	[BUG]  [BUGGY]  Format  format  =  getFormat(index,  pos,  start);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(index,  pos,  start);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(index,  pos,  start);	  Format    format    =    getFormat(index,    start);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	43	None	replace
51	[BUG]  [BUGGY]  char  c  =  readArgumentIndex(pattern,  end(pos));  stripCustom.append(END_FE).append(c);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char  c  =  readArgumentIndex(pattern,  end(pos));  stripCustom.append(END_FE).append(c);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char  c  =  readArgumentIndex(pattern,  end(pos));  stripCustom.append(END_FE).append(c);	  int    c    =    readArgumentIndex(pattern,    end(pos));    stripCustom.append(END_FE).append(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	92	None	replace
52	[BUG]  [BUGGY]  int  c  =  readArgumentIndex(pattern,  end(pos));  stripCustom.append(END_FE).append(index);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  int  c  =  readArgumentIndex(pattern,  end(pos));  stripCustom.append(END_FE).append(index);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	int  c  =  readArgumentIndex(pattern,  end(pos));  stripCustom.append(END_FE).append(index);	  int    c    =    readArgumentIndex(pattern,    end(pos));    stripCustom.append(END_FE).append(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	92	None	replace
53	[BUG]  [BUGGY]  appendQuotedString(pattern,  index,  stripCustom,  true);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  appendQuotedString(pattern,  index,  stripCustom,  true);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	appendQuotedString(pattern,  index,  stripCustom,  true);  break;	  appendQuotedString(pattern,    start,    stripCustom,    true);    break;    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	23	None	replace
54	[BUG]  [BUGGY]  char  c  =  pattern.charAt(index);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char  c  =  pattern.charAt(index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char  c  =  pattern.charAt(index);	  char    c    =    pattern.charAt(start);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	84	None	replace
55	[BUG]  [BUGGY]  char  c  =  pattern.charAt(index,  start);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char  c  =  pattern.charAt(index,  start);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char  c  =  pattern.charAt(index,  start);	  char    c    =    pattern.charAt(start);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	84	None	replace
56	[BUG]  [BUGGY]  char  c  =  pattern.charAt(i);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char  c  =  pattern.charAt(i);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char  c  =  pattern.charAt(i);	  char    c    =    pattern.charAt(start);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	84	None	replace
57	[BUG]  [BUGGY]  char  c  =  pattern.charAt(pos);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char  c  =  pattern.charAt(pos);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char  c  =  pattern.charAt(pos);	  char    c    =    pattern.charAt(start);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	84	None	replace
58	[BUG]  [BUGGY]  char[]  c  =  stripCustom.toCharArray(start);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  stripCustom.toCharArray(start);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char[]  c  =  stripCustom.toCharArray(start);	  char[]    c    =    stripCustom.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	11	None	replace
59	[BUG]  [BUGGY]  char[]  c  =  stripCustom.toString();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  stripCustom.toString();  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char[]  c  =  stripCustom.toString();	  char[]    c    =    stripCustom.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	11	None	replace
60	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  index,  true);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  appendQuotedString(pattern,  pos,  index,  true);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	appendQuotedString(pattern,  pos,  index,  true);  break;	  appendQuotedString(pattern,    start,    index,    true);    break;    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	8	None	replace
61	[BUG]  [BUGGY]  Format  format  =  iterateFormat(DUMMY_PATTERN,  start);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  iterateFormat(DUMMY_PATTERN,  start);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  iterateFormat(DUMMY_PATTERN,  start);	  Format    format    =    iterateFormat(DUMMY_PATTERN);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
62	[BUG]  [BUGGY]  Format  format  =  iterateFormat(DUMMY_PATTERN,  fmtCount);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  iterateFormat(DUMMY_PATTERN,  fmtCount);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  iterateFormat(DUMMY_PATTERN,  fmtCount);	  Format    format    =    iterateFormat(DUMMY_PATTERN);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
63	[BUG]  [BUGGY]  Format  format  =  iterateFormat(DUMMY_PATTERN,  index);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  iterateFormat(DUMMY_PATTERN,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  iterateFormat(DUMMY_PATTERN,  index);	  Format    format    =    iterateFormat(DUMMY_PATTERN);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
64	[BUG]  [BUGGY]  Format  format  =  iterateFormat(c);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  iterateFormat(c);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  iterateFormat(c);	  Format    format    =    iterateFormat(DUMMY_PATTERN);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
65	[BUG]  [BUGGY]  Format  format  =  new  Format(fmtCount,  start,  index  -  1);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(fmtCount,  start,  index  -  1);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(fmtCount,  start,  index  -  1);	  Format    format    =    new    Format(c,    start,    index    -    1);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	19	None	replace
66	[BUG]  [BUGGY]  Format  format  =  new  Format(index,  start,  index  -  1);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(index,  start,  index  -  1);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(index,  start,  index  -  1);	  Format    format    =    new    Format(c,    start,    index    -    1);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	19	None	replace
67	[BUG]  [BUGGY]  Format  format  =  iterateFormats.next();  [CE]  cannot  find  symbol  iterateFormats  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  iterateFormats.next();  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  iterateFormats.next();	  Format    format    =    iterator.next();    	non-compiled	[CE]  cannot  find  symbol  iterateFormats	34	None	replace
68	[BUG]  [BUGGY]  if(index!=  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index!=  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index!=  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(index!=    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	74	None	replace
69	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  fmtCount,  true);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  appendQuotedString(pattern,  pos,  fmtCount,  true);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	appendQuotedString(pattern,  pos,  fmtCount,  true);  break;	  appendQuotedString(pattern,    start,    fmtCount,    true);    break;    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	69	None	replace
70	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  start,  fmtCount,  true);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  appendQuotedString(pattern,  pos,  start,  fmtCount,  true);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	appendQuotedString(pattern,  pos,  start,  fmtCount,  true);  break;	  appendQuotedString(pattern,    start,    fmtCount,    true);    break;    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	69	None	replace
71	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  index,  fmtCount,  true);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  appendQuotedString(pattern,  start,  index,  fmtCount,  true);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	appendQuotedString(pattern,  start,  index,  fmtCount,  true);  break;	  appendQuotedString(pattern,    start,    fmtCount,    true);    break;    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	69	None	replace
72	[BUG]  [BUGGY]  if(index  >=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(ESCAPED_QUOTE  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(ESCAPED_QUOTE  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(ESCAPED_QUOTE	  if(index    >=    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    false);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(ESCAPED_QUOTE).append(ESCAPED_QUOTE    	non-compiled	[CE]  ')'  expected	77	None	replace
73	[BUG]  [BUGGY]  if(index  >=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(ESCAPED_QUOTE  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(ESCAPED_QUOTE  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(ESCAPED_QUOTE	  if(index    >=    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    false);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(ESCAPED_QUOTE).append(ESCAPED_QUOTE    	non-compiled	[CE]  ')'  expected	77	None	replace
74	[BUG]  [BUGGY]  Format  format  =  new  Format(c,  start,  index  +  1,  fmtCount);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(c,  start,  index  +  1,  fmtCount);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(c,  start,  index  +  1,  fmtCount);	  Format    format    =    new    Format(c,    start,    index    +    2);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	21	None	replace
75	[BUG]  [BUGGY]  Format  format  =  new  Format(c,  start  +  1,  index  +  2);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(c,  start  +  1,  index  +  2);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(c,  start  +  1,  index  +  2);	  Format    format    =    new    Format(c,    start,    index    +    2);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	21	None	replace
76	[BUG]  [BUGGY]  Format  format  =  f.next();  [CE]  cannot  find  symbol  f  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  f.next();  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  f.next();	  Format    format    =    c.next();    	non-compiled	[CE]  cannot  find  symbol  f	35	None	replace
77	[BUG]  [BUGGY]  Format  format  =  this.c.next();  [CE]  cannot  find  symbol  c  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  this.c.next();  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  this.c.next();	  Format    format    =    c.next();    	non-compiled	[CE]  cannot  find  symbol  c	35	None	replace
78	[BUG]  [BUGGY]  Format  format  =  c.getFormat();  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  c.getFormat();  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  c.getFormat();	  Format    format    =    c.next();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
79	[BUG]  [BUGGY]  if(index  >=  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(index    >=    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	56	None	replace
80	[BUG]  [BUGGY]  if(index  <  0)  {  for(int  i  =  start;  i  <  fmtCount  +  2;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  <  0)  {  for(int  i  =  start;  i  <  fmtCount  +  2;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  <  0)  {  for(int  i  =  start;  i  <  fmtCount  +  2;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    fmtCount    +    1;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	29	None	replace
81	[BUG]  [BUGGY]  if(index  <  0)  {  for(int  i  =  start;  i  <  fmtCount  +  1;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  <  0)  {  for(int  i  =  start;  i  <  fmtCount  +  1;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  <  0)  {  for(int  i  =  start;  i  <  fmtCount  +  1;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    fmtCount    +    1;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	29	None	replace
82	[BUG]  [BUGGY]  if(index  <  0)  {  for(int  i  =  start;  i  <  fmtCount  +  3;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  orphaned  default  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  <  0)  {  for(int  i  =  start;  i  <  fmtCount  +  3;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  <  0)  {  for(int  i  =  start;  i  <  fmtCount  +  3;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    fmtCount    +    1;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	29	None	replace
83	[BUG]  [BUGGY]  Format  format  =  new  Format(start,  fmtCount,  index);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(start,  fmtCount,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(start,  fmtCount,  index);	  Format    format    =    new    Format(fmtCount,    start,    index);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	20	None	replace
84	[BUG]  [BUGGY]  Format  format  =  new  Format(fmtCount,  start,  index  +  1);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(fmtCount,  start,  index  +  1);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(fmtCount,  start,  index  +  1);	  Format    format    =    new    Format(fmtCount,    start,    index);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	20	None	replace
85	[BUG]  [BUGGY]  Format  format  =  new  Format(fmtCount,  index,  start);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(fmtCount,  index,  start);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(fmtCount,  index,  start);	  Format    format    =    new    Format(fmtCount,    start,    index);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	20	None	replace
86	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  index,  stripCustom,  false);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  appendQuotedString(pattern,  start,  index,  stripCustom,  false);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	appendQuotedString(pattern,  start,  index,  stripCustom,  false);  break;	  appendQuotedString(pattern,    start,    stripCustom,    false);    break;    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	9	None	replace
87	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  pos,  stripCustom,  false);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  appendQuotedString(pattern,  start,  pos,  stripCustom,  false);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	appendQuotedString(pattern,  start,  pos,  stripCustom,  false);  break;	  appendQuotedString(pattern,    start,    stripCustom,    false);    break;    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	9	None	replace
88	[BUG]  [BUGGY]  appendQuotedString(pattern,  index,  stripCustom,  false);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  appendQuotedString(pattern,  index,  stripCustom,  false);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	appendQuotedString(pattern,  index,  stripCustom,  false);  break;	  appendQuotedString(pattern,    start,    stripCustom,    false);    break;    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	9	None	replace
89	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  pos,  true,  index);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  appendQuotedString(pattern,  start,  pos,  true,  index);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	appendQuotedString(pattern,  start,  pos,  true,  index);  break;	  if(index    >=    0)    {    appendQuotedString(pattern,    start,    pos,    true);    break;    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	110	None	replace
90	[BUG]  [BUGGY]  if(index!=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index!=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index!=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN	  if(index!=    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(DUMMY_PATTERN    	non-compiled	[CE]  ')'  expected	46	None	replace
91	[BUG]  [BUGGY]  if(index  >=  0)  {  for(int  i  =  start;  i  <  fmtCount  +  1;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  0)  {  for(int  i  =  start;  i  <  fmtCount  +  1;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  0)  {  for(int  i  =  start;  i  <  fmtCount  +  1;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    fmtCount    +    1;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	58	None	replace
92	[BUG]  [BUGGY]  if(index  <  0)  {  for(int  i  =  start;  i  <  fmtCount  +  2;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  <  0)  {  for(int  i  =  start;  i  <  fmtCount  +  2;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  <  0)  {  for(int  i  =  start;  i  <  fmtCount  +  2;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    fmtCount    +    1;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	58	None	replace
93	[BUG]  [BUGGY]  if(index  <  0)  {  for(int  i  =  start;  i  <  fmtCount  +  3;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  <  0)  {  for(int  i  =  start;  i  <  fmtCount  +  3;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  <  0)  {  for(int  i  =  start;  i  <  fmtCount  +  3;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    fmtCount    +    1;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	58	None	replace
94	[BUG]  [BUGGY]  Format  format  =  DEFAULT_QUOTE;  [CE]  cannot  find  symbol  DEFAULT_QUOTE  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  DEFAULT_QUOTE;  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  DEFAULT_QUOTE;	  Format    format    =    ESCAPED_QUOTE;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_QUOTE	80	None	replace
95	[BUG]  [BUGGY]  Format  format  =  QUOTE;  [CE]  incompatible  types  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  QUOTE;  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  QUOTE;	  Format    format    =    ESCAPED_QUOTE;    	non-compiled	[CE]  incompatible  types	80	None	replace
96	[BUG]  [BUGGY]  Format  format  =  new  Format(DUMMY_PATTERN,  start,  index);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(DUMMY_PATTERN,  start,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(DUMMY_PATTERN,  start,  index);	  Format    format    =    ESCAPED_QUOTE;    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	80	None	replace
97	[BUG]  [BUGGY]  if(index  ==  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  ==  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  ==  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN	  if(index    >=    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    false);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(DUMMY_PATTERN    	non-compiled	[CE]  ')'  expected	47	None	replace
98	[BUG]  [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY	  if(index    >=    0)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMMY    	non-compiled	[CE]  ')'  expected	102	None	replace
99	[BUG]  [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMMY  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMMY  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMMY	  if(index    >=    0)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMMY    	non-compiled	[CE]  ')'  expected	102	None	replace
100	[BUG]  [BUGGY]  if(index  >=  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY	  if(index    >=    0)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMMY    	non-compiled	[CE]  ')'  expected	102	None	replace
101	[BUG]  [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMM  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMM  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMM	  if(index    >=    0)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMMY    	non-compiled	[CE]  ')'  expected	102	None	replace
102	[BUG]  [BUGGY]  char  c  =  stripCustom.charAt(start,  index);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char  c  =  stripCustom.charAt(start,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char  c  =  stripCustom.charAt(start,  index);	  char    c    =    stripCustom.charAt(index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	87	None	replace
103	[BUG]  [BUGGY]  char  c  =  stripCustom.charAt(pos);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char  c  =  stripCustom.charAt(pos);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char  c  =  stripCustom.charAt(pos);	  char    c    =    stripCustom.charAt(index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	87	None	replace
104	[BUG]  [BUGGY]  Format  format  =  registry.getFormat();  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  registry.getFormat();  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  registry.getFormat();	  Format    format    =    DUMMY_PATTERN.getFormat();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
105	[BUG]  [BUGGY]  Format  format  =  DUMMY_PATTERN.getFormat(index);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  DUMMY_PATTERN.getFormat(index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  DUMMY_PATTERN.getFormat(index);	  Format    format    =    DUMMY_PATTERN.getFormat();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
106	[BUG]  [BUGGY]  Format  format  =  getFormat(ESCAPED_QUOTE);  Format  format  =  getFormat(ESCAPED_QUOTE);  [CE]  variable  format  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(ESCAPED_QUOTE);  Format  format  =  getFormat(ESCAPED_QUOTE);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format    format    =    getFormat(ESCAPED_QUOTE);    Format  format  =  getFormat(ESCAPED_QUOTE);	  	non-compiled	[CE]  variable  format  is  already  defined  in  method  applyPattern(String)	65	None	add
107	[BUG]  [BUGGY]  Format  format  =  getFormat(ESCAPED_QUOTE);  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  start,  stripCustom,  true);  break;  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(ESCAPED_QUOTE);  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  start,  stripCustom,  true);  break;  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format    format    =    getFormat(ESCAPED_QUOTE);    junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  start,  stripCustom,  true);  break;	  	non-compiled	[CE]  not  a  statement	65	None	add
108	[BUG]  [BUGGY]  Format  format  =  getFormat(ESCAPED_QUOTE);  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  start,  stripCustom,  true);  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(ESCAPED_QUOTE);  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  start,  stripCustom,  true);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format    format    =    getFormat(ESCAPED_QUOTE);    junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  start,  stripCustom,  true);	  	non-compiled	[CE]  not  a  statement	65	None	add
109	[BUG]  [BUGGY]  Format  format  =  getFormat(ESCAPED_QUOTE);  junit.framework.Error:  registry.appendQuotedString(pattern,  start,  stripCustom,  true);  break;  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(ESCAPED_QUOTE);  junit.framework.Error:  registry.appendQuotedString(pattern,  start,  stripCustom,  true);  break;  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format    format    =    getFormat(ESCAPED_QUOTE);    junit.framework.Error:  registry.appendQuotedString(pattern,  start,  stripCustom,  true);  break;	  	non-compiled	[CE]  not  a  statement	65	None	add
110	[BUG]  [BUGGY]  Format  format  =  getFormat(ESCAPED_QUOTE);  junit.framework.AssertionFailedError:  registry.assertQuotedString(pattern,  start,  stripCustom,  true);  break;  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(ESCAPED_QUOTE);  junit.framework.AssertionFailedError:  registry.assertQuotedString(pattern,  start,  stripCustom,  true);  break;  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format    format    =    getFormat(ESCAPED_QUOTE);    junit.framework.AssertionFailedError:  registry.assertQuotedString(pattern,  start,  stripCustom,  true);  break;	  	non-compiled	[CE]  not  a  statement	65	None	add
111	[BUG]  [BUGGY]  char  c  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(c);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char  c  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(c);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char  c  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(c);	  int    c    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(QUOTE).append(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	106	None	replace
112	[BUG]  [BUGGY]  int  c  =  readArgumentIndex(pattern,  start,  pos);  stripCustom.append(QUOTE).append(c);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  int  c  =  readArgumentIndex(pattern,  start,  pos);  stripCustom.append(QUOTE).append(c);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	int  c  =  readArgumentIndex(pattern,  start,  pos);  stripCustom.append(QUOTE).append(c);	  int    c    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(QUOTE).append(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	106	None	replace
113	[BUG]  [BUGGY]  int  c  =  readArgumentIndex(pattern,  start);  stripCustom.append(QUOTE).append(c);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  int  c  =  readArgumentIndex(pattern,  start);  stripCustom.append(QUOTE).append(c);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	int  c  =  readArgumentIndex(pattern,  start);  stripCustom.append(QUOTE).append(c);	  int    c    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(QUOTE).append(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	106	None	replace
114	[BUG]  [BUGGY]  int  c  =  readArgumentIndex(pattern,  start,  index);  stripCustom.append(QUOTE).append(c);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  int  c  =  readArgumentIndex(pattern,  start,  index);  stripCustom.append(QUOTE).append(c);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	int  c  =  readArgumentIndex(pattern,  start,  index);  stripCustom.append(QUOTE).append(c);	  int    c    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(QUOTE).append(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	106	None	replace
115	[BUG]  [BUGGY]  if(index  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }	  if(index    ==    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	98	None	replace
116	[BUG]  [BUGGY]  Format  format  =  new  Format(char,  start,  index);  [CE]  '.class'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(char,  start,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(char,  start,  index);	  Format    format    =    new    Format(char,    start,    fmtCount);    	non-compiled	[CE]  '.class'  expected	60	None	replace
117	[BUG]  [BUGGY]  Format  format  =  new  Format(char,  index,  fmtCount);  [CE]  '.class'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(char,  index,  fmtCount);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(char,  index,  fmtCount);	  Format    format    =    new    Format(char,    start,    fmtCount);    	non-compiled	[CE]  '.class'  expected	60	None	replace
118	[BUG]  [BUGGY]  Format  format  =  new  Format(char,  fmtCount,  start);  [CE]  '.class'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(char,  fmtCount,  start);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(char,  fmtCount,  start);	  Format    format    =    new    Format(char,    start,    fmtCount);    	non-compiled	[CE]  '.class'  expected	60	None	replace
119	[BUG]  [BUGGY]  Format  format  =  new  Format(char,  pos,  fmtCount);  [CE]  '.class'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(char,  pos,  fmtCount);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(char,  pos,  fmtCount);	  Format    format    =    new    Format(char,    start,    fmtCount);    	non-compiled	[CE]  '.class'  expected	60	None	replace
120	[BUG]  [BUGGY]  int  c  =  readArgumentIndex(pattern,  start,  index  +  1);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  int  c  =  readArgumentIndex(pattern,  start,  index  +  1);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	int  c  =  readArgumentIndex(pattern,  start,  index  +  1);	  int    c    =    readArgumentIndex(pattern,    start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	107	None	replace
121	[BUG]  [BUGGY]  char  c  =  readArgumentIndex(pattern,  start,  index);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char  c  =  readArgumentIndex(pattern,  start,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char  c  =  readArgumentIndex(pattern,  start,  index);	  int    c    =    readArgumentIndex(pattern,    start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	107	None	replace
122	[BUG]  [BUGGY]  int  c  =  readArgumentIndex(pattern,  index,  start);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  int  c  =  readArgumentIndex(pattern,  index,  start);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	int  c  =  readArgumentIndex(pattern,  index,  start);	  int    c    =    readArgumentIndex(pattern,    start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	107	None	replace
123	[BUG]  [BUGGY]  if(c[pos.getIndex()]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  fmtCount,  stripCustom,  false);  break;  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(c[pos.getIndex()]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  fmtCount,  stripCustom,  false);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(c[pos.getIndex()]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  fmtCount,  stripCustom,  false);  break;  }	  if(c[pos.getIndex()    ]    ==    QUOTE)    {    appendQuotedString(pattern,    start,    fmtCount,    stripCustom,    true);    break;    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	83	None	replace
124	[BUG]  [BUGGY]  if(c[pos.getIndex()]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  index,  stripCustom,  true);  break;  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(c[pos.getIndex()]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  index,  stripCustom,  true);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(c[pos.getIndex()]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  index,  stripCustom,  true);  break;  }	  if(c[pos.getIndex()    ]    ==    QUOTE)    {    appendQuotedString(pattern,    start,    fmtCount,    stripCustom,    true);    break;    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	83	None	replace
125	[BUG]  [BUGGY]  Format  format  =  DUMMY_PATTERN  +  index;  [CE]  incompatible  types  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  DUMMY_PATTERN  +  index;  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  DUMMY_PATTERN  +  index;	  Format    format    =    DUMMY_PATTERN    +    1;    	non-compiled	[CE]  incompatible  types	3	None	replace
126	[BUG]  [BUGGY]  Format  format  =  start  +  1;  [CE]  incompatible  types  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  start  +  1;  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  start  +  1;	  Format    format    =    DUMMY_PATTERN    +    1;    	non-compiled	[CE]  incompatible  types	3	None	replace
127	[BUG]  [BUGGY]  Format  format  =  registry.getFormat(DUMMY_PATTERN)+  1;  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  registry.getFormat(DUMMY_PATTERN)+  1;  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  registry.getFormat(DUMMY_PATTERN)+  1;	  Format    format    =    DUMMY_PATTERN    +    1;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
128	[BUG]  [BUGGY]  Format  format  =  iterateFormat(c,  start,  pos.next());  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  iterateFormat(c,  start,  pos.next());  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  iterateFormat(c,  start,  pos.next());	  Format    format    =    iterateFormat(c,    pos.next());    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
129	[BUG]  [BUGGY]  Format  format  =  iterateFormat(c,  pos,  stripCustom.next());  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  iterateFormat(c,  pos,  stripCustom.next());  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  iterateFormat(c,  pos,  stripCustom.next());	  Format    format    =    iterateFormat(c,    pos.next());    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
130	[BUG]  [BUGGY]  Format  format  =  iterateFormat(c,  start.next());  [CE]  int  cannot  be  dereferenced  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  iterateFormat(c,  start.next());  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  iterateFormat(c,  start.next());	  Format    format    =    iterateFormat(c,    pos.next());    	non-compiled	[CE]  int  cannot  be  dereferenced	37	None	replace
131	[BUG]  [BUGGY]  char  c  =  readArgumentIndex(pattern,  next(pos));  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char  c  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char  c  =  readArgumentIndex(pattern,  next(pos));	  int    c    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	85	None	replace
132	[BUG]  [BUGGY]  int  c  =  readArgumentIndex(start,  next(pos));  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  int  c  =  readArgumentIndex(start,  next(pos));  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	int  c  =  readArgumentIndex(start,  next(pos));	  int    c    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	85	None	replace
133	[BUG]  [BUGGY]  int  c  =  readArgumentIndex(pattern,  start,  next(pos));  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  int  c  =  readArgumentIndex(pattern,  start,  next(pos));  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	int  c  =  readArgumentIndex(pattern,  start,  next(pos));	  int    c    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	85	None	replace
134	[BUG]  [BUGGY]  int  c  =  readArgumentIndex(pattern,  index);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  int  c  =  readArgumentIndex(pattern,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	int  c  =  readArgumentIndex(pattern,  index);	  int    c    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	85	None	replace
135	[BUG]  [BUGGY]  int  c  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(c);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  int  c  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(c);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	int  c  =  readArgumentIndex(pattern,  index);  stripCustom.append(END_FE).append(c);	  int    c    =    readArgumentIndex(pattern,    start);    stripCustom.append(END_FE).append(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	32	None	replace
136	[BUG]  [BUGGY]  int  c  =  readArgumentIndex(pattern,  start  +  1);  stripCustom.append(END_FE).append(c);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  int  c  =  readArgumentIndex(pattern,  start  +  1);  stripCustom.append(END_FE).append(c);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	int  c  =  readArgumentIndex(pattern,  start  +  1);  stripCustom.append(END_FE).append(c);	  int    c    =    readArgumentIndex(pattern,    start);    stripCustom.append(END_FE).append(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	32	None	replace
137	[BUG]  [BUGGY]  if(start  ==  -1)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  cannot  find  symbol  format  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(start  ==  -1)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(start  ==  -1)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(index    ==    -1)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  cannot  find  symbol  format	108	None	replace
138	[BUG]  [BUGGY]  Format  format  =  iterateFormat(c,  index);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  iterateFormat(c,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  iterateFormat(c,  index);	  Format    format    =    iterateFormat(c,    start);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
139	[BUG]  [BUGGY]  Format  format  =  iterateFormat(c,  start,  index);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  iterateFormat(c,  start,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  iterateFormat(c,  start,  index);	  Format    format    =    iterateFormat(c,    start);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
140	[BUG]  [BUGGY]  Format  format  =  iterateFormat(c,  pos);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  iterateFormat(c,  pos);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  iterateFormat(c,  pos);	  Format    format    =    iterateFormat(c,    start);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
141	[BUG]  [BUGGY]  Format  format  =  iterateFormat(pattern,  start);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  iterateFormat(pattern,  start);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  iterateFormat(pattern,  start);	  Format    format    =    iterateFormat(c,    start);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
142	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(DUMMY_PATTERN);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	add	Format  format  =  getFormat(DUMMY_PATTERN);	  Format    format    =    getFormat(SECAPED_QUOTE);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	67	1	replace
143	[BUG]  [BUGGY]  Format  format  =  getFormat(DUMMY_PATTERN);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(DUMMY_PATTERN);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(DUMMY_PATTERN);	  Format    format    =    getFormat(SECAPED_QUOTE);    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	67	1	replace
144	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  start,  false);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  appendQuotedString(pattern,  pos,  start,  false);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	appendQuotedString(pattern,  pos,  start,  false);  break;	  if(c[pos.getIndex()    ]    ==    QUOTE)    {    appendQuotedString(pattern,    start,    pos,    false);    break;    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	71	None	replace
145	[BUG]  [BUGGY]  appendQuotedString(pattern,  index,  start,  pos,  false);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  appendQuotedString(pattern,  index,  start,  pos,  false);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	appendQuotedString(pattern,  index,  start,  pos,  false);  break;	  appendQuotedString(pattern,    start,    pos,    false);    break;    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	25	None	replace
146	[BUG]  [BUGGY]  Format  format  =  getFormat(start);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(start);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(start);	  Format    format    =    getFormat(end);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	51	None	replace
147	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  fmtCount,  stripCustom,  true);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  appendQuotedString(pattern,  pos,  fmtCount,  stripCustom,  true);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	appendQuotedString(pattern,  pos,  fmtCount,  stripCustom,  true);  break;	  appendQuotedString(pattern,    start,    fmtCount,    stripCustom,    true);    break;    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	68	None	replace
148	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  start,  fmtCount,  stripCustom,  true);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  appendQuotedString(pattern,  pos,  start,  fmtCount,  stripCustom,  true);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	appendQuotedString(pattern,  pos,  start,  fmtCount,  stripCustom,  true);  break;	  appendQuotedString(pattern,    start,    fmtCount,    stripCustom,    true);    break;    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	68	None	replace
149	[BUG]  [BUGGY]  if(start  >=  0)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  cannot  find  symbol  format  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(start  >=  0)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(start  >=  0)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(index    >=    0)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  cannot  find  symbol  format	109	None	replace
150	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  start,  fmtCount,  false);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  appendQuotedString(pattern,  pos,  start,  fmtCount,  false);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	appendQuotedString(pattern,  pos,  start,  fmtCount,  false);  break;	  appendQuotedString(pattern,    start,    fmtCount,    false);    break;    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	70	None	replace
151	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  index,  fmtCount,  false);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  appendQuotedString(pattern,  start,  index,  fmtCount,  false);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	appendQuotedString(pattern,  start,  index,  fmtCount,  false);  break;	  appendQuotedString(pattern,    start,    fmtCount,    false);    break;    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	70	None	replace
152	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  fmtCount,  false);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  appendQuotedString(pattern,  pos,  fmtCount,  false);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	appendQuotedString(pattern,  pos,  fmtCount,  false);  break;	  appendQuotedString(pattern,    start,    fmtCount,    false);    break;    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	70	None	replace
153	[BUG]  [BUGGY]  if(index  ==  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  ==  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  ==  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    index;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	57	None	replace
154	[BUG]  [BUGGY]  if(index!=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(ESCAPED_QUOTE  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index!=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(ESCAPED_QUOTE  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index!=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(ESCAPED_QUOTE	  if(index    >=    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(ESCAPED_QUOTE).append(ESCAPED_QUOTE    	non-compiled	[CE]  ')'  expected	76	None	replace
155	[BUG]  [BUGGY]  Format  format  =  new  Format(start,  fmtCount,  c.length);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(start,  fmtCount,  c.length);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(start,  fmtCount,  c.length);	  Format    format    =    new    Format(fmtCount,    start,    c.length);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	90	None	replace
156	[BUG]  [BUGGY]  Format  format  =  new  Format(fmtCount,  start,  index,  c.length);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(fmtCount,  start,  index,  c.length);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(fmtCount,  start,  index,  c.length);	  Format    format    =    new    Format(fmtCount,    start,    c.length);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	90	None	replace
157	[BUG]  [BUGGY]  Format  format  =  new  Format(fmtCount,  index,  c.length);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(fmtCount,  index,  c.length);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(fmtCount,  index,  c.length);	  Format    format    =    new    Format(fmtCount,    start,    c.length);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	90	None	replace
158	[BUG]  [BUGGY]  if(index  >=  -1)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  -1)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  -1)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY	  if(index    >=    -1)    {    appendQuotedString(pattern,    start,    pos,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMMY    	non-compiled	[CE]  ')'  expected	103	None	replace
159	[BUG]  [BUGGY]  if(index!=  -1)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index!=  -1)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index!=  -1)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY	  if(index    >=    -1)    {    appendQuotedString(pattern,    start,    pos,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMMY    	non-compiled	[CE]  ')'  expected	103	None	replace
160	[BUG]  [BUGGY]  if(index  >=  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    0;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	63	None	replace
161	[BUG]  [BUGGY]  if(index  <  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  <  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  <  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    0;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	63	None	replace
162	[BUG]  [BUGGY]  Format  format  =  getFormat(DUPLICATE_QUOTE);  [CE]  cannot  find  symbol  DUPLICATE_QUOTE  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(DUPLICATE_QUOTE);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(DUPLICATE_QUOTE);	  Format    format    =    getFormat(ENUM_QUOTE);    	non-compiled	[CE]  cannot  find  symbol  DUPLICATE_QUOTE	52	None	replace
163	[BUG]  [BUGGY]  Format  format  =  getFormat(c,  start,  pos);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(c,  start,  pos);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(c,  start,  pos);	  Format    format    =    getFormat(start,    pos);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	44	None	replace
164	[BUG]  [BUGGY]  Format  format  =  getFormat(pattern,  start,  pos);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(pattern,  start,  pos);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(pattern,  start,  pos);	  Format    format    =    getFormat(start,    pos);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	44	None	replace
165	[BUG]  [BUGGY]  char[]  c  =  stripCustom.getChars(start,  index  +  1);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  stripCustom.getChars(start,  index  +  1);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char[]  c  =  stripCustom.getChars(start,  index  +  1);	  char[]    c    =    stripCustom.getChars(start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	12	None	replace
166	[BUG]  [BUGGY]  char[]  c  =  stripCustom.getChars(pos,  start,  index);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  stripCustom.getChars(pos,  start,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char[]  c  =  stripCustom.getChars(pos,  start,  index);	  char[]    c    =    stripCustom.getChars(start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	12	None	replace
167	[BUG]  [BUGGY]  char[]  c  =  stripCustom.getChars(index,  start);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  stripCustom.getChars(index,  start);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char[]  c  =  stripCustom.getChars(index,  start);	  char[]    c    =    stripCustom.getChars(start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	12	None	replace
168	[BUG]  [BUGGY]  char[]  c  =  stripCustom.getChars(start,  index  +  2);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  stripCustom.getChars(start,  index  +  2);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char[]  c  =  stripCustom.getChars(start,  index  +  2);	  char[]    c    =    stripCustom.getChars(start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	12	None	replace
169	[BUG]  [BUGGY]  Format  format  =  getFormat(END_FE,  QUOTE);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(END_FE,  QUOTE);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(END_FE,  QUOTE);	  Format    format    =    getFormat(QUOTE);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	94	None	replace
170	[BUG]  [BUGGY]  Format  format  =  getFormat(start,  QUOTE);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(start,  QUOTE);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(start,  QUOTE);	  Format    format    =    getFormat(QUOTE);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	94	None	replace
171	[BUG]  [BUGGY]  Format  format  =  getFormat(end,  QUOTE);  [CE]  cannot  find  symbol  end  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(end,  QUOTE);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(end,  QUOTE);	  Format    format    =    getFormat(QUOTE);    	non-compiled	[CE]  cannot  find  symbol  end	94	None	replace
172	[BUG]  [BUGGY]  if(index  >=  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    index;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	28	None	replace
173	[BUG]  [BUGGY]  if(index  <  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  <  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  <  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    index;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	28	None	replace
174	[BUG]  [BUGGY]  Format  format  =  new  Format(fmtCount,  index);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(fmtCount,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(fmtCount,  index);	  Format    format    =    new    Format(c,    index,    fmtCount);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	54	None	replace
175	[BUG]  [BUGGY]  Format  format  =  new  Format(start,  index,  fmtCount);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(start,  index,  fmtCount);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(start,  index,  fmtCount);	  Format    format    =    new    Format(c,    index,    fmtCount);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	54	None	replace
176	[BUG]  [BUGGY]  Format  format  =  new  Format(f,  index,  c);  [CE]  cannot  find  symbol  f  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(f,  index,  c);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(f,  index,  c);	  Format    format    =    new    Format(c,    index,    fmtCount);    	non-compiled	[CE]  cannot  find  symbol  f	54	None	replace
177	[BUG]  [BUGGY]  if(index  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }	  if(index    ==    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	104	None	replace
178	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  start,  index,  false);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  appendQuotedString(pattern,  pos,  start,  index,  false);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	appendQuotedString(pattern,  pos,  start,  index,  false);  break;	  appendQuotedString(pattern,    start,    index,    false);    break;    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	24	None	replace
179	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  index,  false);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  appendQuotedString(pattern,  pos,  index,  false);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	appendQuotedString(pattern,  pos,  index,  false);  break;	  appendQuotedString(pattern,    start,    index,    false);    break;    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	24	None	replace
180	[BUG]  [BUGGY]  if(index  >=  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    index;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	27	None	replace
181	[BUG]  [BUGGY]  if(index  <  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  <  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  <  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    index;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	27	None	replace
182	[BUG]  [BUGGY]  Format  format  =  getFormat(DEFAULT_FIELD_NAME);  [CE]  cannot  find  symbol  DEFAULT_FIELD_NAME  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(DEFAULT_FIELD_NAME);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(DEFAULT_FIELD_NAME);	  Format    format    =    getFormat(DEFAULT_QUOTE);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_FIELD_NAME	50	None	replace
183	[BUG]  [BUGGY]  if(start  >=  -1)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  cannot  find  symbol  format  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(start  >=  -1)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(start  >=  -1)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(index    >=    -1)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  cannot  find  symbol  format	95	None	replace
184	[BUG]  [BUGGY]  Format  format  =  new  Format(c,  start  +  1,  index  +  1);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(c,  start  +  1,  index  +  1);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(c,  start  +  1,  index  +  1);	  Format    format    =    new    Format(c,    start,    index    +    1);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	18	None	replace
185	[BUG]  [BUGGY]  char[]  c  =  toPattern.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  toPattern.toCharArray();  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char[]  c  =  toPattern.toCharArray();	  char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	10	None	replace
186	[BUG]  [BUGGY]  char[]  c  =  start.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  start.toCharArray();  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char[]  c  =  start.toCharArray();	  char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	10	None	replace
187	[BUG]  [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN	  if(index    >=    0)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(DUMMY_PATTERN    	non-compiled	[CE]  ')'  expected	75	None	replace
188	[BUG]  [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN	  if(index    >=    0)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(DUMMY_PATTERN    	non-compiled	[CE]  ')'  expected	75	None	replace
189	[BUG]  [BUGGY]  if(index  >=  0)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  0)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  0)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN	  if(index    >=    0)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(DUMMY_PATTERN    	non-compiled	[CE]  ')'  expected	75	None	replace
190	[BUG]  [BUGGY]  Format  format  =  getFormat(START_FE);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(START_FE);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(START_FE);	  Format    format    =    getFormat(DUMMY_FMT);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	93	None	replace
191	[BUG]  [BUGGY]  Format  format  =  getFormat(FIELD_NAME);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(FIELD_NAME);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(FIELD_NAME);	  Format    format    =    getFormat(DUMMY_FMT);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	93	None	replace
192	[BUG]  [BUGGY]  Format  format  =  getFormat(start,  END_FE);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(start,  END_FE);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(start,  END_FE);	  Format    format    =    getFormat(END_FE);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	49	None	replace
193	[BUG]  [BUGGY]  Format  format  =  getFormat(END_FE,  index);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(END_FE,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(END_FE,  index);	  Format    format    =    getFormat(END_FE);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	49	None	replace
194	[BUG]  [BUGGY]  Format  format  =  getFormat(index,  END_FE);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(index,  END_FE);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(index,  END_FE);	  Format    format    =    getFormat(END_FE);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	49	None	replace
195	[BUG]  [BUGGY]  Format  format  =  getFormat(fmtCount,  start,  index);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(fmtCount,  start,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(fmtCount,  start,  index);	  Format    format    =    getFormat(start,    index);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	41	None	replace
196	[BUG]  [BUGGY]  Format  format  =  getFormat(ptr,  start,  index);  [CE]  cannot  find  symbol  ptr  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(ptr,  start,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(ptr,  start,  index);	  Format    format    =    getFormat(start,    index);    	non-compiled	[CE]  cannot  find  symbol  ptr	41	None	replace
197	[BUG]  [BUGGY]  char  c  =  stripCustom.charAt(i);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char  c  =  stripCustom.charAt(i);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char  c  =  stripCustom.charAt(i);	  char    c    =    stripCustom.charAt(start);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	86	None	replace
198	[BUG]  [BUGGY]  Format  format  =  this.registry.next();  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  this.registry.next();  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  this.registry.next();	  Format    format    =    registry.next();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
199	[BUG]  [BUGGY]  Format  format  =  registry.nextFormat();  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  registry.nextFormat();  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  registry.nextFormat();	  Format    format    =    registry.next();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
200	[BUG]  [BUGGY]  int  c  =  readArgumentIndex(pattern,  start,  index  +  1);  stripCustom.append(END_FE).append(c);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  int  c  =  readArgumentIndex(pattern,  start,  index  +  1);  stripCustom.append(END_FE).append(c);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	int  c  =  readArgumentIndex(pattern,  start,  index  +  1);  stripCustom.append(END_FE).append(c);	  int    c    =    readArgumentIndex(pattern,    start,    index);    stripCustom.append(END_FE).append(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	33	None	replace
201	[BUG]  [BUGGY]  int  c  =  readArgumentIndex(pattern,  index,  start);  stripCustom.append(END_FE).append(c);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  int  c  =  readArgumentIndex(pattern,  index,  start);  stripCustom.append(END_FE).append(c);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	int  c  =  readArgumentIndex(pattern,  index,  start);  stripCustom.append(END_FE).append(c);	  int    c    =    readArgumentIndex(pattern,    start,    index);    stripCustom.append(END_FE).append(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	33	None	replace
202	[BUG]  [BUGGY]  Format  format  =  getFormat(index,  end);  [CE]  cannot  find  symbol  end  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(index,  end);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(index,  end);	  Format    format    =    getFormat(end,    index);    	non-compiled	[CE]  cannot  find  symbol  end	42	None	replace
203	[BUG]  [BUGGY]  AppendQuotedString(stripCustom,  pos,  true);  break;  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  AppendQuotedString(stripCustom,  pos,  true);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	AppendQuotedString(stripCustom,  pos,  true);  break;	  AppendQuotedString(pattern,    pos,    stripCustom,    true);    break;    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
204	[BUG]  [BUGGY]  Format  format  =  new  Format(start,  fmtCount,  c);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(start,  fmtCount,  c);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(start,  fmtCount,  c);	  Format    format    =    new    Format(fmtCount,    start,    c);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	53	None	replace
205	[BUG]  [BUGGY]  Format  format  =  new  Format(fmtCount,  index,  c);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(fmtCount,  index,  c);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(fmtCount,  index,  c);	  Format    format    =    new    Format(fmtCount,    start,    c);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	53	None	replace
206	[BUG]  [BUGGY]  Format  format  =  new  Format(index,  start,  c);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(index,  start,  c);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(index,  start,  c);	  Format    format    =    new    Format(fmtCount,    start,    c);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	53	None	replace
207	[BUG]  [BUGGY]  Format  format  =  new  Format(start,  DUMMY_PATTERN);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(start,  DUMMY_PATTERN);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(start,  DUMMY_PATTERN);	  Format    format    =    new    Format(DUMMY_PATTERN,    start);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	81	None	replace
208	[BUG]  [BUGGY]  Format  format  =  new  Format(DUMMY_PATTERN,  index);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(DUMMY_PATTERN,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(DUMMY_PATTERN,  index);	  Format    format    =    new    Format(DUMMY_PATTERN,    start);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	81	None	replace
209	[BUG]  [BUGGY]  Format  format  =  new  Format(DUMMY_PATTERN,  fmtCount);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(DUMMY_PATTERN,  fmtCount);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(DUMMY_PATTERN,  fmtCount);	  Format    format    =    new    Format(DUMMY_PATTERN,    start);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	81	None	replace
210	[BUG]  [BUGGY]  Format  format  =  new  Format(duMMY_PATTERN,  index);  [CE]  cannot  find  symbol  duMMY_PATTERN  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(duMMY_PATTERN,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(duMMY_PATTERN,  index);	  Format    format    =    new    Format(DUMMY_PATTERN,    start);    	non-compiled	[CE]  cannot  find  symbol  duMMY_PATTERN	81	None	replace
211	[BUG]  [BUGGY]  if(c[pos.getIndex()  ]  ==  QUOTE,  END_FE)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(c[pos.getIndex()  ]  ==  QUOTE,  END_FE)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(c[pos.getIndex()  ]  ==  QUOTE,  END_FE)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }	  if(c[pos.getIndex()    ]    ==    QUOTE,    END_FE)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  ')'  expected	99	None	replace
212	[BUG]  [BUGGY]  Format  format  =  iterateFormat(c,  end,  pos.next());  [CE]  cannot  find  symbol  end  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  iterateFormat(c,  end,  pos.next());  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  iterateFormat(c,  end,  pos.next());	  Format    format    =    iterateFormat(c,    pos.next());    	non-compiled	[CE]  cannot  find  symbol  end	37	None	replace
213	[BUG]  [BUGGY]  Format  format  =  new  Format(DUMMY_PATTERN,  ESCAPED_QUOTE);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(DUMMY_PATTERN,  ESCAPED_QUOTE);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(DUMMY_PATTERN,  ESCAPED_QUOTE);	  Format    format    =    ESCAPED_QUOTE;    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	80	None	replace
214	[BUG]  [BUGGY]  Format  format  =  new  Format(DUMMY_PATTERN);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(DUMMY_PATTERN);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(DUMMY_PATTERN);	  Format    format    =    ESCAPED_QUOTE;    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	80	None	replace
215	[BUG]  [BUGGY]  AppendQuotedString(pattern,  pos,  start,  true);  break;  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  AppendQuotedString(pattern,  pos,  start,  true);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	AppendQuotedString(pattern,  pos,  start,  true);  break;	  AppendQuotedString(pattern,    pos,    stripCustom,    true);    break;    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
216	[BUG]  [BUGGY]  AppendQuotedString(pattern,  pos,  end,  true);  break;  [CE]  cannot  find  symbol  end  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  AppendQuotedString(pattern,  pos,  end,  true);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	AppendQuotedString(pattern,  pos,  end,  true);  break;	  AppendQuotedString(pattern,    pos,    stripCustom,    true);    break;    	non-compiled	[CE]  cannot  find  symbol  end	26	None	replace
217	[BUG]  [BUGGY]  Format  format  =  getFormat(duMMY_PATTERN,  index);  [CE]  cannot  find  symbol  duMMY_PATTERN  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(duMMY_PATTERN,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(duMMY_PATTERN,  index);	  Format    format    =    getFormat(end,    index);    	non-compiled	[CE]  cannot  find  symbol  duMMY_PATTERN	42	None	replace
218	[BUG]  [BUGGY]  Format  format  =  getFormat(end,  fmtCount);  [CE]  cannot  find  symbol  end  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(end,  fmtCount);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(end,  fmtCount);	  Format    format    =    getFormat(end,    index);    	non-compiled	[CE]  cannot  find  symbol  end	42	None	replace
219	[BUG]  [BUGGY]  Format  format  =  new  Format(c.length,  start,  fmtCount);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(c.length,  start,  fmtCount);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(c.length,  start,  fmtCount);	  Format    format    =    new    Format(fmtCount,    start,    c.length);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	90	None	replace
220	[BUG]  [BUGGY]  Format  format  =  new  Format(DUMMY_PATTERN,  start,  fmtCount);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(DUMMY_PATTERN,  start,  fmtCount);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(DUMMY_PATTERN,  start,  fmtCount);	  Format    format    =    new    Format(f,    start,    fmtCount);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	61	None	replace
221	[BUG]  [BUGGY]  Format  format  =  new  Format(duMMY_PATTERN,  start,  fmtCount);  [CE]  cannot  find  symbol  duMMY_PATTERN  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(duMMY_PATTERN,  start,  fmtCount);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(duMMY_PATTERN,  start,  fmtCount);	  Format    format    =    new    Format(f,    start,    fmtCount);    	non-compiled	[CE]  cannot  find  symbol  duMMY_PATTERN	61	None	replace
222	[BUG]  [BUGGY]  Format  format  =  new  Format(DUPLICATE_QUOTE,  start,  fmtCount);  [CE]  cannot  find  symbol  DUPLICATE_QUOTE  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(DUPLICATE_QUOTE,  start,  fmtCount);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(DUPLICATE_QUOTE,  start,  fmtCount);	  Format    format    =    new    Format(f,    start,    fmtCount);    	non-compiled	[CE]  cannot  find  symbol  DUPLICATE_QUOTE	61	None	replace
223	[BUG]  [BUGGY]  Format  format  =  new  Format(desc,  start,  fmtCount);  [CE]  cannot  find  symbol  desc  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(desc,  start,  fmtCount);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(desc,  start,  fmtCount);	  Format    format    =    new    Format(f,    start,    fmtCount);    	non-compiled	[CE]  cannot  find  symbol  desc	61	None	replace
224	[BUG]  [BUGGY]  Format  format  =  getFormat(duMMY_PATTERN,  start,  index);  [CE]  cannot  find  symbol  duMMY_PATTERN  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(duMMY_PATTERN,  start,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(duMMY_PATTERN,  start,  index);	  Format    format    =    getFormat(start,    index);    	non-compiled	[CE]  cannot  find  symbol  duMMY_PATTERN	41	None	replace
225	[BUG]  [BUGGY]  Format  format  =  getFormat(end,  pos,  index);  [CE]  cannot  find  symbol  end  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(end,  pos,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(end,  pos,  index);	  Format    format    =    getFormat(start,    index);    	non-compiled	[CE]  cannot  find  symbol  end	41	None	replace
226	[BUG]  [BUGGY]  Format  format  =  getFormat(start,  c,  index);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(start,  c,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(start,  c,  index);	  Format    format    =    getFormat(c,    index);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	105	None	replace
227	[BUG]  [BUGGY]  Format  format  =  getFormat(end,  c,  index);  [CE]  cannot  find  symbol  end  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(end,  c,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(end,  c,  index);	  Format    format    =    getFormat(c,    index);    	non-compiled	[CE]  cannot  find  symbol  end	105	None	replace
228	[BUG]  [BUGGY]  Format  format  =  it.toString();  [CE]  cannot  find  symbol  it  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  it.toString();  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  it.toString();	  Format    format    =    DUMMY_PATTERN.toString();    	non-compiled	[CE]  cannot  find  symbol  it	2	None	replace
229	[BUG]  [BUGGY]  Format  format  =  DUMMY_PATTERN.toString(start);  [CE]  no  suitable  method  found  for  toString(int)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  DUMMY_PATTERN.toString(start);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  DUMMY_PATTERN.toString(start);	  Format    format    =    DUMMY_PATTERN.toString();    	non-compiled	[CE]  no  suitable  method  found  for  toString(int)	2	None	replace
230	[BUG]  [BUGGY]  Format  format  =  iterator.toString();  [CE]  cannot  find  symbol  iterator  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  iterator.toString();  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  iterator.toString();	  Format    format    =    DUMMY_PATTERN.toString();    	non-compiled	[CE]  cannot  find  symbol  iterator	2	None	replace
231	[BUG]  [BUGGY]  Format  format  =  getFormat(DUMMY_PATTERN,  ESCAPED_QUOTE);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(DUMMY_PATTERN,  ESCAPED_QUOTE);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(DUMMY_PATTERN,  ESCAPED_QUOTE);	  Format    format    =    getFormat(ESCAPED_QUOTE);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	66	None	replace
232	[BUG]  [BUGGY]  Format  format  =  findFormat(DUMMY_PATTERN);  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  findFormat(DUMMY_PATTERN);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  findFormat(DUMMY_PATTERN);	  Format    format    =    getFormat(ESCAPED_QUOTE);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
233	[BUG]  [BUGGY]  if(index!=  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index!=  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index!=  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    index;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	27	None	replace
234	[BUG]  [BUGGY]  if(c[pos.getIndex()  ]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  fmtCount,  false);  break;  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(c[pos.getIndex()  ]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  fmtCount,  false);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(c[pos.getIndex()  ]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  fmtCount,  false);  break;  }	  if(c[pos.getIndex()    ]    ==    QUOTE)    {    appendQuotedString(pattern,    start,    stripCustom,    false);    break;    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	38	None	replace
235	[BUG]  [BUGGY]  if(index  >=  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMM  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMM  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMM	  if(index    >=    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMM    	non-compiled	[CE]  ')'  expected	48	None	replace
236	[BUG]  [BUGGY]  if(index  >=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMM  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMM  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMM	  if(index    >=    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMM    	non-compiled	[CE]  ')'  expected	48	None	replace
237	[BUG]  [BUGGY]  char  c  =  parseArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(c);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char  c  =  parseArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(c);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char  c  =  parseArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(c);	  char    c    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	30	None	replace
238	[BUG]  [BUGGY]  if(c[pos.getIndex()  ]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  index,  false);  break;  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(c[pos.getIndex()  ]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  index,  false);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(c[pos.getIndex()  ]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  index,  false);  break;  }	  if(c[pos.getIndex()    ]    ==    QUOTE)    {    appendQuotedString(pattern,    start,    pos,    false);    break;    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	71	None	replace
239	[BUG]  [BUGGY]  char[]  c  =  iterator.getChars(start,  index);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  iterator.getChars(start,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char[]  c  =  iterator.getChars(start,  index);	  char[]    c    =    stripCustom.getChars(start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	12	None	replace
240	[BUG]  [BUGGY]  char[]  c  =  it.getChars(start,  index);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  it.getChars(start,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char[]  c  =  it.getChars(start,  index);	  char[]    c    =    stripCustom.getChars(start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	12	None	replace
241	[BUG]  [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN	  if(index    >=    0)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(DUMMY_PATTERN    	non-compiled	[CE]  ')'  expected	75	None	replace
242	[BUG]  [BUGGY]  if(index  >=  0)  {  appendQuotedString(pattern,  start,  fmtCount,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  0)  {  appendQuotedString(pattern,  start,  fmtCount,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  0)  {  appendQuotedString(pattern,  start,  fmtCount,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN	  if(index    >=    0)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(DUMMY_PATTERN    	non-compiled	[CE]  ')'  expected	75	None	replace
243	[BUG]  [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  fmtCount,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  fmtCount,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  <  0)  {  appendQuotedString(pattern,  start,  fmtCount,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN	  if(index    >=    0)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(DUMMY_PATTERN    	non-compiled	[CE]  ')'  expected	75	None	replace
244	[BUG]  [BUGGY]  Format  format  =  new  Format(DUMMY_PATTERN,  start  +  1);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(DUMMY_PATTERN,  start  +  1);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(DUMMY_PATTERN,  start  +  1);	  Format    format    =    new    Format(DUMMY_PATTERN,    start);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	81	None	replace
245	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  fmtCount,  stripCustom,  false);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  appendQuotedString(pattern,  start,  fmtCount,  stripCustom,  false);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	appendQuotedString(pattern,  start,  fmtCount,  stripCustom,  false);  break;	  appendQuotedString(pattern,    start,    fmtCount,    stripCustom,    true);    break;    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	68	None	replace
246	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  end,  true);  break;  [CE]  cannot  find  symbol  end  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  appendQuotedString(pattern,  pos,  end,  true);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	appendQuotedString(pattern,  pos,  end,  true);  break;	  appendQuotedString(pattern,    pos,    start,    true);    break;    	non-compiled	[CE]  cannot  find  symbol  end	7	None	replace
247	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  index,  DUMMY_PATTERN,  false);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  appendQuotedString(pattern,  start,  index,  DUMMY_PATTERN,  false);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	appendQuotedString(pattern,  start,  index,  DUMMY_PATTERN,  false);  break;	  appendQuotedString(pattern,    start,    index,    false);    break;    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	24	None	replace
248	[BUG]  [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMM  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMM  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMM	  if(index    >    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMM    	non-compiled	[CE]  ')'  expected	100	None	replace
249	[BUG]  [BUGGY]  if(index  ==  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMM  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  ==  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMM  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  ==  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMM	  if(index    >    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMM    	non-compiled	[CE]  ')'  expected	100	None	replace
250	[BUG]  [BUGGY]  if(index!=  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index!=  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index!=  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    0;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	63	None	replace
251	[BUG]  [BUGGY]  Format  format  =  getFormat(duMMY_PATTERN,  start,  pos);  [CE]  cannot  find  symbol  duMMY_PATTERN  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(duMMY_PATTERN,  start,  pos);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(duMMY_PATTERN,  start,  pos);	  Format    format    =    getFormat(start,    pos);    	non-compiled	[CE]  cannot  find  symbol  duMMY_PATTERN	44	None	replace
252	[BUG]  [BUGGY]  Format  format  =  getFormat(end,  pos);  [CE]  cannot  find  symbol  end  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(end,  pos);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(end,  pos);	  Format    format    =    getFormat(start,    pos);    	non-compiled	[CE]  cannot  find  symbol  end	44	None	replace
253	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  fmtCount,  index,  false);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  appendQuotedString(pattern,  start,  fmtCount,  index,  false);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	appendQuotedString(pattern,  start,  fmtCount,  index,  false);  break;	  appendQuotedString(pattern,    start,    fmtCount,    false);    break;    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	70	None	replace
254	[BUG]  [BUGGY]  Format  format  =  it.getFormat();  [CE]  cannot  find  symbol  it  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  it.getFormat();  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  it.getFormat();	  Format    format    =    DUMMY_PATTERN.getFormat();    	non-compiled	[CE]  cannot  find  symbol  it	4	None	replace
255	[BUG]  [BUGGY]  Format  format  =  DUMMY_PATTERN.toFormat();  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  DUMMY_PATTERN.toFormat();  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  DUMMY_PATTERN.toFormat();	  Format    format    =    DUMMY_PATTERN.getFormat();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
256	[BUG]  [BUGGY]  Format  format  =  new  Format(c,  start,  fmtCount  -  1);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(c,  start,  fmtCount  -  1);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(c,  start,  fmtCount  -  1);	  Format    format    =    new    Format(c,    start,    index    -    1);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	19	None	replace
257	[BUG]  [BUGGY]  Format  format  =  new  Format(c,  start  +  1,  index  -  1);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(c,  start  +  1,  index  -  1);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(c,  start  +  1,  index  -  1);	  Format    format    =    new    Format(c,    start,    index    -    1);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	19	None	replace
258	[BUG]  [BUGGY]  Format  format  =  getFormat(END);  [CE]  cannot  find  symbol  END  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(END);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(END);	  Format    format    =    getFormat(DUMMY_FMT);    	non-compiled	[CE]  cannot  find  symbol  END	93	None	replace
259	[BUG]  [BUGGY]  Format  format  =  DUMMY_PATTERN  +  ESCAPED_QUOTE;  [CE]  incompatible  types  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  DUMMY_PATTERN  +  ESCAPED_QUOTE;  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  DUMMY_PATTERN  +  ESCAPED_QUOTE;	  Format    format    =    DUMMY_PATTERN    +    1;    	non-compiled	[CE]  incompatible  types	3	None	replace
260	[BUG]  [BUGGY]  Format  format  =  DUMMY_PATTERN  +  fmtCount;  [CE]  incompatible  types  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  DUMMY_PATTERN  +  fmtCount;  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  DUMMY_PATTERN  +  fmtCount;	  Format    format    =    DUMMY_PATTERN    +    1;    	non-compiled	[CE]  incompatible  types	3	None	replace
261	[BUG]  [BUGGY]  Format  format  =  getFormat(ESCAPED_QUOTE);  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(ESCAPED_QUOTE);  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format    format    =    getFormat(ESCAPED_QUOTE);    junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  pos,  stripCustom,  true);  break;	  	non-compiled	[CE]  not  a  statement	65	None	add
262	[BUG]  [BUGGY]  Format  format  =  getFormat(ESCAPED_QUOTE);  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  start,  pos,  true);  break;  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(ESCAPED_QUOTE);  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  start,  pos,  true);  break;  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format    format    =    getFormat(ESCAPED_QUOTE);    junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  start,  pos,  true);  break;	  	non-compiled	[CE]  not  a  statement	65	None	add
263	[BUG]  [BUGGY]  if(index  >=  0)  {  for(int  i  =  start;  i  <  fmtCount  +  1;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  0)  {  for(int  i  =  start;  i  <  fmtCount  +  1;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  0)  {  for(int  i  =  start;  i  <  fmtCount  +  1;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    fmtCount    +    1;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	29	None	replace
264	[BUG]  [BUGGY]  if(index!=  0)  {  for(int  i  =  start;  i  <  fmtCount  +  1;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index!=  0)  {  for(int  i  =  start;  i  <  fmtCount  +  1;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index!=  0)  {  for(int  i  =  start;  i  <  fmtCount  +  1;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    fmtCount    +    1;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	29	None	replace
265	[BUG]  [BUGGY]  AppendQuotedString(stripCustom,  start,  stripCustom,  true);  break;  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  AppendQuotedString(stripCustom,  start,  stripCustom,  true);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	AppendQuotedString(stripCustom,  start,  stripCustom,  true);  break;	  AppendQuotedString(pattern,    start,    stripCustom,    true);    break;    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
266	[BUG]  [BUGGY]  if(index!=  0)  {  for(int  i  =  start;  i  <  fmtCount  +  1;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index!=  0)  {  for(int  i  =  start;  i  <  fmtCount  +  1;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index!=  0)  {  for(int  i  =  start;  i  <  fmtCount  +  1;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    fmtCount    +    1;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	58	None	replace
267	[BUG]  [BUGGY]  Format  format  =  getFormat(DUMMY_PUBLIC);  [CE]  cannot  find  symbol  DUMMY_PUBLIC  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(DUMMY_PUBLIC);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(DUMMY_PUBLIC);	  Format    format    =    getFormat(SECAPED_QUOTE);    	non-compiled	[CE]  cannot  find  symbol  DUMMY_PUBLIC	67	None	replace
268	[BUG]  [BUGGY]  if(index  >=  -1)  {  appendQuotedString(pattern,  start,  pos,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  -1)  {  appendQuotedString(pattern,  start,  pos,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  -1)  {  appendQuotedString(pattern,  start,  pos,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY	  if(index    >=    -1)    {    appendQuotedString(pattern,    start,    pos,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMMY    	non-compiled	[CE]  ')'  expected	103	None	replace
269	[BUG]  [BUGGY]  if(index  >=  0)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  0)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  0)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY	  if(index    >=    -1)    {    appendQuotedString(pattern,    start,    pos,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMMY    	non-compiled	[CE]  ')'  expected	103	None	replace
270	[BUG]  [BUGGY]  if(index  >=  -1)  {  appendQuotedString(pattern,  start,  pos,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(ESCAPED_QUOTE).append(DUMMY  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  -1)  {  appendQuotedString(pattern,  start,  pos,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(ESCAPED_QUOTE).append(DUMMY  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  -1)  {  appendQuotedString(pattern,  start,  pos,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(ESCAPED_QUOTE).append(DUMMY	  if(index    >=    -1)    {    appendQuotedString(pattern,    start,    pos,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMMY    	non-compiled	[CE]  ')'  expected	103	None	replace
271	[BUG]  [BUGGY]  Format  format  =  iterateFormats(registry.next());  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  iterateFormats(registry.next());  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  iterateFormats(registry.next());	  Format    format    =    registry.next();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
272	[BUG]  [BUGGY]  Format  format  =  iterateFormat(registry.next());  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  iterateFormat(registry.next());  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  iterateFormat(registry.next());	  Format    format    =    registry.next();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
273	[BUG]  [BUGGY]  if(index  >=  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	  if(index!=    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	74	None	replace
274	[BUG]  [BUGGY]  Format  format  =  it.getFormat(DUMMY_PATTERN);  [CE]  cannot  find  symbol  it  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  it.getFormat(DUMMY_PATTERN);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  it.getFormat(DUMMY_PATTERN);	  Format    format    =    registry.getFormat(DUMMY_PATTERN);    	non-compiled	[CE]  cannot  find  symbol  it	1	None	replace
275	[BUG]  [BUGGY]  Format  format  =  iterateFormats.getFormat(DUMMY_PATTERN);  [CE]  cannot  find  symbol  iterateFormats  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  iterateFormats.getFormat(DUMMY_PATTERN);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  iterateFormats.getFormat(DUMMY_PATTERN);	  Format    format    =    registry.getFormat(DUMMY_PATTERN);    	non-compiled	[CE]  cannot  find  symbol  iterateFormats	1	None	replace
276	[BUG]  [BUGGY]  if(index  >=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(ESCAPED_QUOTE).append(ESCAP  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(ESCAPED_QUOTE).append(ESCAP  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(ESCAPED_QUOTE).append(ESCAP	  if(index    >=    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    false);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(ESCAPED_QUOTE).append(ESCAPED_QUOTE    	non-compiled	[CE]  ')'  expected	77	None	replace
277	[BUG]  [BUGGY]  Format  format  =  new  Format(c,  start,  index  +  2  -  start);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(c,  start,  index  +  2  -  start);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(c,  start,  index  +  2  -  start);	  Format    format    =    new    Format(c,    start,    index    +    2);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	21	None	replace
278	[BUG]  [BUGGY]  Format  format  =  getFormat(DUMMY_PATTERN,  END_FE);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(DUMMY_PATTERN,  END_FE);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(DUMMY_PATTERN,  END_FE);	  Format    format    =    getFormat(END_FE);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	49	None	replace
279	[BUG]  [BUGGY]  Format  format  =  getFormat(END_FE,  start);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(END_FE,  start);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(END_FE,  start);	  Format    format    =    getFormat(END_FE);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	49	None	replace
280	[BUG]  [BUGGY]  if(c[pos.getIndex()  -  1]  ==  QUOTE,  END_FE)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(c[pos.getIndex()  -  1]  ==  QUOTE,  END_FE)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(c[pos.getIndex()  -  1]  ==  QUOTE,  END_FE)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }	  if(c[pos.getIndex()    ]    ==    QUOTE,    END_FE)    {    appendQuotedString(pattern,    start,    pos,    true);    break;    }    	non-compiled	[CE]  ')'  expected	91	None	replace
281	[BUG]  [BUGGY]  if(index  >=  0)  {  appendQuotedString(pattern,  start,  pos,  stripCustom,  true);  break;  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  0)  {  appendQuotedString(pattern,  start,  pos,  stripCustom,  true);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  0)  {  appendQuotedString(pattern,  start,  pos,  stripCustom,  true);  break;  }	  if(index    >=    0)    {    appendQuotedString(pattern,    start,    pos,    true);    break;    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	110	None	replace
282	[BUG]  [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY	  if(index    >=    0)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMMY    	non-compiled	[CE]  ')'  expected	102	None	replace
283	[BUG]  [BUGGY]  if(index  >=  0)  {  appendQuotedString(pattern,  start,  fmtCount,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  0)  {  appendQuotedString(pattern,  start,  fmtCount,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  0)  {  appendQuotedString(pattern,  start,  fmtCount,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY	  if(index    >=    0)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMMY    	non-compiled	[CE]  ')'  expected	102	None	replace
284	[BUG]  [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  fmtCount,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  fmtCount,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  <  0)  {  appendQuotedString(pattern,  start,  fmtCount,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY	  if(index    >=    0)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMMY    	non-compiled	[CE]  ')'  expected	102	None	replace
285	[BUG]  [BUGGY]  char  c  =  patternCustom.charAt(index);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char  c  =  patternCustom.charAt(index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char  c  =  patternCustom.charAt(index);	  char    c    =    stripCustom.charAt(index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	87	None	replace
286	[BUG]  [BUGGY]  char  c  =  stripCustom.charAt(index  +  1);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char  c  =  stripCustom.charAt(index  +  1);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char  c  =  stripCustom.charAt(index  +  1);	  char    c    =    stripCustom.charAt(index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	87	None	replace
287	[BUG]  [BUGGY]  char[]  c  =  it.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  it.toCharArray();  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char[]  c  =  it.toCharArray();	  char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	10	None	replace
288	[BUG]  [BUGGY]  char[]  c  =  getFormat(pattern.toCharArray());  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  getFormat(pattern.toCharArray());  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char[]  c  =  getFormat(pattern.toCharArray());	  char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	10	None	replace
289	[BUG]  [BUGGY]  Format  format  =  new  Format(DUMMY_PATTERN,  pos,  fmtCount);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(DUMMY_PATTERN,  pos,  fmtCount);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(DUMMY_PATTERN,  pos,  fmtCount);	  Format    format    =    new    Format(c,    pos,    fmtCount);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	55	None	replace
290	[BUG]  [BUGGY]  if(index  >=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY	  if(index    >    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMMY    	non-compiled	[CE]  ')'  expected	101	None	replace
291	[BUG]  [BUGGY]  if(index  ==  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  ==  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  ==  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY	  if(index    >    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMMY    	non-compiled	[CE]  ')'  expected	101	None	replace
292	[BUG]  [BUGGY]  char  c  =  pattern.charAt(start  +  1);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char  c  =  pattern.charAt(start  +  1);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char  c  =  pattern.charAt(start  +  1);	  char    c    =    pattern.charAt(start);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	84	None	replace
293	[BUG]  [BUGGY]  char  c  =  pattern.charAt(start,  index);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char  c  =  pattern.charAt(start,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char  c  =  pattern.charAt(start,  index);	  char    c    =    pattern.charAt(start);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	84	None	replace
294	[BUG]  [BUGGY]  char  c  =  pattern.charAt(start  +  index);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char  c  =  pattern.charAt(start  +  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char  c  =  pattern.charAt(start  +  index);	  char    c    =    pattern.charAt(start);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	84	None	replace
295	[BUG]  [BUGGY]  if(c[pos.getIndex()  -  1]  ==  QUOTE,  END_FE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(c[pos.getIndex()  -  1]  ==  QUOTE,  END_FE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(c[pos.getIndex()  -  1]  ==  QUOTE,  END_FE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }	  if(c[pos.getIndex()    ]    ==    QUOTE,    END_FE)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  ')'  expected	99	None	replace
296	[BUG]  [BUGGY]  if(index  >=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(ESCAPED_QUOTE).append(ESCAP  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(ESCAPED_QUOTE).append(ESCAP  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(ESCAPED_QUOTE).append(ESCAP	  if(index    >=    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(ESCAPED_QUOTE).append(ESCAPED_QUOTE    	non-compiled	[CE]  ')'  expected	76	None	replace
297	[BUG]  [BUGGY]  Format  format  =  iterateFormat(c,  start,  fmtCount);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  iterateFormat(c,  start,  fmtCount);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  iterateFormat(c,  start,  fmtCount);	  Format    format    =    iterateFormat(c,    start);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
298	[BUG]  [BUGGY]  Format  format  =  getFormat(index,  pos);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(index,  pos);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(index,  pos);	  Format    format    =    getFormat(index,    start);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	43	None	replace
299	[BUG]  [BUGGY]  int  c  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(index);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  int  c  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	int  c  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(QUOTE).append(index);	  int    c    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(QUOTE).append(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	106	None	replace
300	[BUG]  [BUGGY]  Format  format  =  new  Format(char,  start  +  1,  fmtCount);  [CE]  '.class'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(char,  start  +  1,  fmtCount);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(char,  start  +  1,  fmtCount);	  Format    format    =    new    Format(char,    start,    fmtCount);    	non-compiled	[CE]  '.class'  expected	60	None	replace
301	[BUG]  [BUGGY]  if(index!=  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index!=  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index!=  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    index;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	28	None	replace
302	[BUG]  [BUGGY]  Format  format  =  iterateFormat(DEFAULT_PATTERN);  [CE]  cannot  find  symbol  DEFAULT_PATTERN  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  iterateFormat(DEFAULT_PATTERN);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  iterateFormat(DEFAULT_PATTERN);	  Format    format    =    iterateFormat(DUMMY_PATTERN);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_PATTERN	82	None	replace
303	[BUG]  [BUGGY]  Format  format  =  iterateFormat(MARKED_QUOTE);  [CE]  cannot  find  symbol  MARKED_QUOTE  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  iterateFormat(MARKED_QUOTE);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  iterateFormat(MARKED_QUOTE);	  Format    format    =    iterateFormat(DUMMY_PATTERN);    	non-compiled	[CE]  cannot  find  symbol  MARKED_QUOTE	82	None	replace
304	[BUG]  [BUGGY]  Format  format  =  getFormat(DUMMY_PATTERN,  QUOTE);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(DUMMY_PATTERN,  QUOTE);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(DUMMY_PATTERN,  QUOTE);	  Format    format    =    getFormat(QUOTE);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	94	None	replace
305	[BUG]  [BUGGY]  Format  format  =  getFormat(duMMY_PATTERN,  QUOTE);  [CE]  cannot  find  symbol  duMMY_PATTERN  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(duMMY_PATTERN,  QUOTE);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(duMMY_PATTERN,  QUOTE);	  Format    format    =    getFormat(QUOTE);    	non-compiled	[CE]  cannot  find  symbol  duMMY_PATTERN	94	None	replace
306	[BUG]  [BUGGY]  Format  format  =  getFormat(DUMMY_QUOTE);  [CE]  cannot  find  symbol  DUMMY_QUOTE  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(DUMMY_QUOTE);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(DUMMY_QUOTE);	  Format    format    =    getFormat(ENUM_QUOTE);    	non-compiled	[CE]  cannot  find  symbol  DUMMY_QUOTE	52	None	replace
307	[BUG]  [BUGGY]  Format  format  =  getFormat(DUMMY_FATTERN);  [CE]  cannot  find  symbol  DUMMY_FATTERN  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(DUMMY_FATTERN);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(DUMMY_FATTERN);	  Format    format    =    getFormat(ENUM_QUOTE);    	non-compiled	[CE]  cannot  find  symbol  DUMMY_FATTERN	52	None	replace
308	[BUG]  [BUGGY]  if(c[pos.getIndex()  ]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  pos,  stripCustom,  false);  break;  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(c[pos.getIndex()  ]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  pos,  stripCustom,  false);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(c[pos.getIndex()  ]  ==  QUOTE)  {  appendQuotedString(pattern,  start,  pos,  stripCustom,  false);  break;  }	  if(c[pos.getIndex()    ]    ==    QUOTE)    {    appendQuotedString(pattern,    start,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	72	None	replace
309	[BUG]  [BUGGY]  if(index!=  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index!=  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index!=  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    0;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	79	None	replace
310	[BUG]  [BUGGY]  Format  format  =  iterateFormat(c.next());  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  iterateFormat(c.next());  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  iterateFormat(c.next());	  Format    format    =    c.next();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
311	[BUG]  [BUGGY]  char  c  =  stripCustom.charAt(start  +  1);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char  c  =  stripCustom.charAt(start  +  1);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char  c  =  stripCustom.charAt(start  +  1);	  char    c    =    stripCustom.charAt(start);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	86	None	replace
312	[BUG]  [BUGGY]  char[]  c  =  iterableFormats.getChars(start,  index);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  iterableFormats.getChars(start,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char[]  c  =  iterableFormats.getChars(start,  index);	  char[]    c    =    stripCustom.getChars(start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	12	None	replace
313	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  pos,  true,  END_FE);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  appendQuotedString(pattern,  start,  pos,  true,  END_FE);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	appendQuotedString(pattern,  start,  pos,  true,  END_FE);  break;	  appendQuotedString(pattern,    start,    pos,    true);    break;    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	5	None	replace
314	[BUG]  [BUGGY]  Format  format  =  c.toString();  [CE]  incompatible  types  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  c.toString();  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  c.toString();	  Format    format    =    DUMMY_PATTERN.toString();    	non-compiled	[CE]  incompatible  types	2	None	replace
315	[BUG]  [BUGGY]  Format  format  =  DUMMY_PATTERN.toString()  +  1;  [CE]  incompatible  types  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  DUMMY_PATTERN.toString()  +  1;  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  DUMMY_PATTERN.toString()  +  1;	  Format    format    =    DUMMY_PATTERN.toString();    	non-compiled	[CE]  incompatible  types	2	None	replace
316	[BUG]  [BUGGY]  Format  format  =  new  Format(fmtCount,  i,  c);  [CE]  cannot  find  symbol  i  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(fmtCount,  i,  c);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(fmtCount,  i,  c);	  Format    format    =    new    Format(fmtCount,    start,    c);    	non-compiled	[CE]  cannot  find  symbol  i	53	None	replace
317	[BUG]  [BUGGY]  if(index  <  0)  {  if(index  >  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  <  0)  {  if(index  >  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  <  0)  {  if(index  >  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(	  if(index    >    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMMY    	non-compiled	[CE]  ')'  expected	101	None	replace
318	[BUG]  [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMMY  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMMY  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >  0)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMMY	  if(index    >    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMMY    	non-compiled	[CE]  ')'  expected	101	None	replace
319	[BUG]  [BUGGY]  Format  format  =  new  Format(fmtCount,  i,  c.length);  [CE]  cannot  find  symbol  i  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(fmtCount,  i,  c.length);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(fmtCount,  i,  c.length);	  Format    format    =    new    Format(fmtCount,    start,    c.length);    	non-compiled	[CE]  cannot  find  symbol  i	90	None	replace
320	[BUG]  [BUGGY]  Format  format  =  new  Format(fmtCount,  c.length,  start);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(fmtCount,  c.length,  start);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(fmtCount,  c.length,  start);	  Format    format    =    new    Format(fmtCount,    start,    c.length);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	90	None	replace
321	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  fmtCount,  seekNonWs(pattern,  pos,  true);  break;  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  appendQuotedString(pattern,  start,  fmtCount,  seekNonWs(pattern,  pos,  true);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	appendQuotedString(pattern,  start,  fmtCount,  seekNonWs(pattern,  pos,  true);  break;	  appendQuotedString(pattern,    start,    fmtCount,    stripCustom,    true);    break;    	non-compiled	[CE]  ')'  expected	68	None	replace
322	[BUG]  [BUGGY]  Format  format  =  new  Format(ESCAPED_QUOTE);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(ESCAPED_QUOTE);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(ESCAPED_QUOTE);	  Format    format    =    ESCAPED_QUOTE;    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	80	None	replace
323	[BUG]  [BUGGY]  Format  format  =  new  Format(ESCAPED_QUOTE,  start);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(ESCAPED_QUOTE,  start);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(ESCAPED_QUOTE,  start);	  Format    format    =    ESCAPED_QUOTE;    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	80	None	replace
324	[BUG]  [BUGGY]  Format  format  =  getFormat(registry,  start,  pos);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(registry,  start,  pos);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(registry,  start,  pos);	  Format    format    =    getFormat(start,    pos);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	44	None	replace
325	[BUG]  [BUGGY]  int  c  =  readArgumentIndex(pattern,  end(pos));  stripCustom.append(QUOTE).append(c);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  int  c  =  readArgumentIndex(pattern,  end(pos));  stripCustom.append(QUOTE).append(c);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	int  c  =  readArgumentIndex(pattern,  end(pos));  stripCustom.append(QUOTE).append(c);	  int    c    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(QUOTE).append(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	106	None	replace
326	[BUG]  [BUGGY]  if(index  >  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(ESCAPED_QUOTE).append(ESCAPED_QUOTE  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(ESCAPED_QUOTE).append(ESCAPED_QUOTE  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(ESCAPED_QUOTE).append(ESCAPED_QUOTE	  if(index    >=    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    false);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(ESCAPED_QUOTE).append(ESCAPED_QUOTE    	non-compiled	[CE]  ')'  expected	77	None	replace
327	[BUG]  [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(ESCAPED_QUOTE).append(ESCAPED_QUOTE  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(ESCAPED_QUOTE).append(ESCAPED_QUOTE  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(ESCAPED_QUOTE).append(ESCAPED_QUOTE	  if(index    >=    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    false);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(ESCAPED_QUOTE).append(ESCAPED_QUOTE    	non-compiled	[CE]  ')'  expected	77	None	replace
328	[BUG]  [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  <  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }	  if(index    >=    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    false);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(ESCAPED_QUOTE).append(ESCAPED_QUOTE    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	77	None	replace
329	[BUG]  [BUGGY]  char[]  c  =  this.pattern.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  this.pattern.toCharArray();  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char[]  c  =  this.pattern.toCharArray();	  char[]    c    =    pattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	10	None	replace
330	[BUG]  [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMMY  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMMY  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  <  0)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMMY	  if(index    >=    0)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMMY    	non-compiled	[CE]  ')'  expected	102	None	replace
331	[BUG]  [BUGGY]  if(index  >=  0)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMMY  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  0)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMMY  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  0)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMMY	  if(index    >=    0)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMMY    	non-compiled	[CE]  ')'  expected	102	None	replace
332	[BUG]  [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMMY  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMMY  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMMY	  if(index    >=    0)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMMY    	non-compiled	[CE]  ')'  expected	102	None	replace
333	[BUG]  [BUGGY]  if(index!=  0)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMMY  [CE]  ')'  expected  [FE]                              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index!=  0)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMMY  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index!=  0)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMMY	  if(index    >=    0)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMMY    	non-compiled	[CE]  ')'  expected	102	None	replace
334	[BUG]  [BUGGY]  if(index  ==  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  ==  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  ==  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    0;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	79	None	replace
335	[BUG]  [BUGGY]  Format  format  =  getFormat(pattern,  start,  index);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(pattern,  start,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(pattern,  start,  index);	  Format    format    =    getFormat(start,    index);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	41	None	replace
336	[BUG]  [BUGGY]  Format  format  =  getFormat(f,  index);  [CE]  cannot  find  symbol  f  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(f,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(f,  index);	  Format    format    =    getFormat(end,    index);    	non-compiled	[CE]  cannot  find  symbol  f	42	None	replace
337	[BUG]  [BUGGY]  Format  format  =  iterableFormats.getFormat(DUMMY_PATTERN);  [CE]  cannot  find  symbol  iterableFormats  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  iterableFormats.getFormat(DUMMY_PATTERN);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  iterableFormats.getFormat(DUMMY_PATTERN);	  Format    format    =    registry.getFormat(DUMMY_PATTERN);    	non-compiled	[CE]  cannot  find  symbol  iterableFormats	1	None	replace
338	[BUG]  [BUGGY]  char  c  =  patternCustom.charAt(start);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char  c  =  patternCustom.charAt(start);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char  c  =  patternCustom.charAt(start);	  char    c    =    stripCustom.charAt(index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	87	None	replace
339	[BUG]  [BUGGY]  if(index  >  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN	  if(index    >=    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    false);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(DUMMY_PATTERN    	non-compiled	[CE]  ')'  expected	47	None	replace
340	[BUG]  [BUGGY]  AppendQuotedString(pattern,  pos,  start,  false);  break;  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  AppendQuotedString(pattern,  pos,  start,  false);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	AppendQuotedString(pattern,  pos,  start,  false);  break;	  appendQuotedString(pattern,    start,    pos,    false);    break;    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
341	[BUG]  [BUGGY]  int  c  =  readArgumentIndex(pattern,  end(pos));  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  int  c  =  readArgumentIndex(pattern,  end(pos));  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	int  c  =  readArgumentIndex(pattern,  end(pos));	  int    c    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	85	None	replace
342	[BUG]  [BUGGY]  int  c  =  readArgumentIndex(pattern,  start,  pos);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  int  c  =  readArgumentIndex(pattern,  start,  pos);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	int  c  =  readArgumentIndex(pattern,  start,  pos);	  int    c    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	85	None	replace
343	[BUG]  [BUGGY]  if(index  >  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  orphaned  default  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	  if(index    >=    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	39	None	replace
344	[BUG]  [BUGGY]  if(index!=  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index!=  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index!=  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	  if(index!=    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	74	None	replace
345	[BUG]  [BUGGY]  Format  format  =  this.formats.next();  [CE]  formats  has  private  access  in  MessageFormat  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  this.formats.next();  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  this.formats.next();	  Format    format    =    iterator.next();    	non-compiled	[CE]  formats  has  private  access  in  MessageFormat	34	None	replace
346	[BUG]  [BUGGY]  Format  format  =  fmtCount  +  1;  [CE]  incompatible  types  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  fmtCount  +  1;  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  fmtCount  +  1;	  Format    format    =    DUMMY_PATTERN    +    1;    	non-compiled	[CE]  incompatible  types	3	None	replace
347	[BUG]  [BUGGY]  Format  format  =  END_FE  +  1;  [CE]  incompatible  types  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  END_FE  +  1;  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  END_FE  +  1;	  Format    format    =    DUMMY_PATTERN    +    1;    	non-compiled	[CE]  incompatible  types	3	None	replace
348	[BUG]  [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMM  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMM  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >  0)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMM	  if(index    >    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMM    	non-compiled	[CE]  ')'  expected	100	None	replace
349	[BUG]  [BUGGY]  if(index  >  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(index    >=    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	56	None	replace
350	[BUG]  [BUGGY]  if(index!=  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index!=  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index!=  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }	  if(index!=    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	62	None	replace
351	[BUG]  [BUGGY]  if(c[pos.getIndex()  -  start]  ==  QUOTE)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  cannot  find  symbol  format  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(c[pos.getIndex()  -  start]  ==  QUOTE)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(c[pos.getIndex()  -  start]  ==  QUOTE)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(c[pos.getIndex()    ]    ==    QUOTE)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  cannot  find  symbol  format	15	None	replace
352	[BUG]  [BUGGY]  if(c[pos.getIndex()  -  1)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ']'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(c[pos.getIndex()  -  1)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(c[pos.getIndex()  -  1)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(c[pos.getIndex()    ]    ==    QUOTE)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  ']'  expected	15	None	replace
353	[BUG]  [BUGGY]  Format  format  =  new  Format(char[c,  start,  fmtCount]);  [CE]  ']'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(char[c,  start,  fmtCount]);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(char[c,  start,  fmtCount]);	  Format    format    =    new    Format(c,    pos,    fmtCount);    	non-compiled	[CE]  ']'  expected	55	None	replace
354	[BUG]  [BUGGY]  Format  format  =  new  Format(f,  pos,  c.length);  [CE]  cannot  find  symbol  f  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(f,  pos,  c.length);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(f,  pos,  c.length);	  Format    format    =    new    Format(c,    pos,    fmtCount);    	non-compiled	[CE]  cannot  find  symbol  f	55	None	replace
355	[BUG]  [BUGGY]  if(c[pos.getIndex()  ]  ==  QUOTE,  END_FE)  {  appendQuotedString(pattern,  start,  index,  true);  break;  }  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(c[pos.getIndex()  ]  ==  QUOTE,  END_FE)  {  appendQuotedString(pattern,  start,  index,  true);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(c[pos.getIndex()  ]  ==  QUOTE,  END_FE)  {  appendQuotedString(pattern,  start,  index,  true);  break;  }	  if(c[pos.getIndex()    ]    ==    QUOTE)    {    appendQuotedString(pattern,    start,    index,    true);    break;    }    	non-compiled	[CE]  ')'  expected	14	None	replace
356	[BUG]  [BUGGY]  if(index  ==  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  ==  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  ==  0)  {  for(int  i  =  start;  i  <  0;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    0;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	63	None	replace
357	[BUG]  [BUGGY]  if(index  >  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [CE]  orphaned  default  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  false);  }	  if(index    >=    0)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    false);    }    	non-compiled	[CE]  orphaned  default	40	None	replace
358	[BUG]  [BUGGY]  Format  format  =  iterateFormat(pattern,  pos.next());  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  iterateFormat(pattern,  pos.next());  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  iterateFormat(pattern,  pos.next());	  Format    format    =    iterateFormat(c,    pos.next());    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
359	[BUG]  [BUGGY]  if(index  >  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN	  if(index    >=    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(DUMMY_PATTERN    	non-compiled	[CE]  ')'  expected	45	None	replace
360	[BUG]  [BUGGY]  if(index  >=  -1)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  -1)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  -1)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN	  if(index    >=    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(DUMMY_PATTERN    	non-compiled	[CE]  ')'  expected	45	None	replace
361	[BUG]  [BUGGY]  Format  format  =  iterator.getFormat();  [CE]  cannot  find  symbol  iterator  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  iterator.getFormat();  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  iterator.getFormat();	  Format    format    =    DUMMY_PATTERN.getFormat();    	non-compiled	[CE]  cannot  find  symbol  iterator	4	None	replace
362	[BUG]  [BUGGY]  int  c  =  readArgumentIndex(pattern,  end,  pos);  stripCustom.append(END_FE).append(c);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  int  c  =  readArgumentIndex(pattern,  end,  pos);  stripCustom.append(END_FE).append(c);  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	int  c  =  readArgumentIndex(pattern,  end,  pos);  stripCustom.append(END_FE).append(c);	  int    c    =    readArgumentIndex(pattern,    start,    pos);    stripCustom.append(END_FE).append(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	31	None	replace
363	[BUG]  [BUGGY]  if(c[pos.getIndex()  ]  ==  QUOTE,  FIELD_QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(c[pos.getIndex()  ]  ==  QUOTE,  FIELD_QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(c[pos.getIndex()  ]  ==  QUOTE,  FIELD_QUOTE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }	  if(c[pos.getIndex()    ]    ==    QUOTE,    END_FE)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  ')'  expected	99	None	replace
364	[BUG]  [BUGGY]  if(c[pos.getIndex()  -  1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [CE]  ']'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(c[pos.getIndex()  -  1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(c[pos.getIndex()  -  1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }	  if(c[pos.getIndex()    ]    ==    QUOTE,    END_FE)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  ']'  expected	99	None	replace
365	[BUG]  [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  <  0)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  <  0)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN	  if(index    >=    0)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(DUMMY_PATTERN    	non-compiled	[CE]  ')'  expected	75	None	replace
366	[BUG]  [BUGGY]  if(index  >=  0)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  0)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  0)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN	  if(index    >=    0)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(DUMMY_PATTERN    	non-compiled	[CE]  ')'  expected	75	None	replace
367	[BUG]  [BUGGY]  Format  format  =  getFormat(ESCAPED_QUOTE);  junit.framework.AssertionFailedError:  registry.assertQuotedString(pattern,  start,  pos,  true);  break;  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(ESCAPED_QUOTE);  junit.framework.AssertionFailedError:  registry.assertQuotedString(pattern,  start,  pos,  true);  break;  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format    format    =    getFormat(ESCAPED_QUOTE);    junit.framework.AssertionFailedError:  registry.assertQuotedString(pattern,  start,  pos,  true);  break;	  	non-compiled	[CE]  not  a  statement	65	None	add
368	[BUG]  [BUGGY]  Format  format  =  getFormat(ESCAPED_QUOTE);  junit.framework.AssertionFailedError:  it.remove();  break;  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(ESCAPED_QUOTE);  junit.framework.AssertionFailedError:  it.remove();  break;  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format    format    =    getFormat(ESCAPED_QUOTE);    junit.framework.AssertionFailedError:  it.remove();  break;	  	non-compiled	[CE]  not  a  statement	65	None	add
369	[BUG]  [BUGGY]  Format  format  =  getFormat(ESCAPED_QUOTE);  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  start,  pos,  false);  break;  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(ESCAPED_QUOTE);  junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  start,  pos,  false);  break;  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format    format    =    getFormat(ESCAPED_QUOTE);    junit.framework.AssertionFailedError:  registry.appendQuotedString(pattern,  start,  pos,  false);  break;	  	non-compiled	[CE]  not  a  statement	65	None	add
370	[BUG]  [BUGGY]  if(c[pos.getIndex()  ]  ==  QUOTE,  END_FE)  {  appendQuotedString(pattern,  start,  pos,  stripCustom,  true);  break;  }  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(c[pos.getIndex()  ]  ==  QUOTE,  END_FE)  {  appendQuotedString(pattern,  start,  pos,  stripCustom,  true);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(c[pos.getIndex()  ]  ==  QUOTE,  END_FE)  {  appendQuotedString(pattern,  start,  pos,  stripCustom,  true);  break;  }	  if(c[pos.getIndex()    ]    ==    QUOTE)    {    appendQuotedString(pattern,    start,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  ')'  expected	72	None	replace
371	[BUG]  [BUGGY]  char[]  c  =  this.pattern.getChars(start,  index);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  this.pattern.getChars(start,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char[]  c  =  this.pattern.getChars(start,  index);	  char[]    c    =    pattern.getChars(start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	13	None	replace
372	[BUG]  [BUGGY]  if(index  ==  0)  {  for(int  i  =  start;  i  <  fmtCount  +  1;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  ==  0)  {  for(int  i  =  start;  i  <  fmtCount  +  1;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  ==  0)  {  for(int  i  =  start;  i  <  fmtCount  +  1;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    fmtCount    +    1;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	29	None	replace
373	[BUG]  [BUGGY]  if(index  >=  -1)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(ESCAPED_QUOTE).append(ESCAPED_QUOTE  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  -1)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(ESCAPED_QUOTE).append(ESCAPED_QUOTE  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  -1)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(ESCAPED_QUOTE).append(ESCAPED_QUOTE	  if(index    >=    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(ESCAPED_QUOTE).append(ESCAPED_QUOTE    	non-compiled	[CE]  ')'  expected	76	None	replace
374	[BUG]  [BUGGY]  if(index  >  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(ESCAPED_QUOTE).append(ESCAPED_QUOTE  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(ESCAPED_QUOTE).append(ESCAPED_QUOTE  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(ESCAPED_QUOTE).append(ESCAPED_QUOTE	  if(index    >=    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(ESCAPED_QUOTE).append(ESCAPED_QUOTE    	non-compiled	[CE]  ')'  expected	76	None	replace
375	[BUG]  [BUGGY]  if(index  ==  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(ESCAPED_QUOTE).append(ESCAPED_QUOTE  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  ==  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(ESCAPED_QUOTE).append(ESCAPED_QUOTE  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  ==  -1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(ESCAPED_QUOTE).append(ESCAPED_QUOTE	  if(index    >=    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(ESCAPED_QUOTE).append(ESCAPED_QUOTE    	non-compiled	[CE]  ')'  expected	76	None	replace
376	[BUG]  [BUGGY]  Format  format  =  iterateFormat(c,  DUMMY_PATTERN);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  iterateFormat(c,  DUMMY_PATTERN);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  iterateFormat(c,  DUMMY_PATTERN);	  Format    format    =    iterateFormat(DUMMY_PATTERN);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
377	[BUG]  [BUGGY]  if(index  ==  0)  {  for(int  i  =  start;  i  <  fmtCount  +  1;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  ==  0)  {  for(int  i  =  start;  i  <  fmtCount  +  1;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  ==  0)  {  for(int  i  =  start;  i  <  fmtCount  +  1;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    fmtCount    +    1;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	58	None	replace
378	[BUG]  [BUGGY]  Format  format  =  getFormat(c,  QUOTE);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(c,  QUOTE);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(c,  QUOTE);	  Format    format    =    getFormat(QUOTE);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	94	None	replace
379	[BUG]  [BUGGY]  Format  format  =  getFormat(DEFAULT_FMT);  [CE]  cannot  find  symbol  DEFAULT_FMT  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(DEFAULT_FMT);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(DEFAULT_FMT);	  Format    format    =    getFormat(DEFAULT_QUOTE);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_FMT	50	None	replace
380	[BUG]  [BUGGY]  if(c[pos.getIndex()  ]  ==  QUOTE,  FIELD_QUOTE)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(c[pos.getIndex()  ]  ==  QUOTE,  FIELD_QUOTE)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(c[pos.getIndex()  ]  ==  QUOTE,  FIELD_QUOTE)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }	  if(c[pos.getIndex()    ]    ==    QUOTE,    END_FE)    {    appendQuotedString(pattern,    start,    pos,    true);    break;    }    	non-compiled	[CE]  ')'  expected	91	None	replace
381	[BUG]  [BUGGY]  Format  format  =  getFormat(DEPRECATED_QUOTE);  [CE]  cannot  find  symbol  DEPRECATED_QUOTE  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(DEPRECATED_QUOTE);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(DEPRECATED_QUOTE);	  Format    format    =    getFormat(ENUM_QUOTE);    	non-compiled	[CE]  cannot  find  symbol  DEPRECATED_QUOTE	52	None	replace
382	[BUG]  [BUGGY]  Format  format  =  new  Format(fmtCount,  i,  index);  [CE]  cannot  find  symbol  i  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(fmtCount,  i,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(fmtCount,  i,  index);	  Format    format    =    new    Format(fmtCount,    start,    index);    	non-compiled	[CE]  cannot  find  symbol  i	20	None	replace
383	[BUG]  [BUGGY]  Format  format  =  getFormat(FINAL_QUOTE);  [CE]  cannot  find  symbol  FINAL_QUOTE  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(FINAL_QUOTE);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(FINAL_QUOTE);	  Format    format    =    getFormat(DUMMY_FMT);    	non-compiled	[CE]  cannot  find  symbol  FINAL_QUOTE	93	None	replace
384	[BUG]  [BUGGY]  char[]  c  =  iterator.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  char[]  c  =  iterator.toCharArray();  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	char[]  c  =  iterator.toCharArray();	  char[]    c    =    stripCustom.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	11	None	replace
385	[BUG]  [BUGGY]  if(index  >=  -1)  {  appendQuotedString(pattern,  start,  pos,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMMY  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  -1)  {  appendQuotedString(pattern,  start,  pos,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMMY  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  -1)  {  appendQuotedString(pattern,  start,  pos,  false);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMMY	  if(index    >=    -1)    {    appendQuotedString(pattern,    start,    pos,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMMY    	non-compiled	[CE]  ')'  expected	103	None	replace
386	[BUG]  [BUGGY]  if(index  >  -1)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMMY  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >  -1)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMMY  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >  -1)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMMY	  if(index    >=    -1)    {    appendQuotedString(pattern,    start,    pos,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMMY    	non-compiled	[CE]  ')'  expected	103	None	replace
387	[BUG]  [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  cannot  find  symbol  format  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >  0)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >  0)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(index    >=    0)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  cannot  find  symbol  format	109	None	replace
388	[BUG]  [BUGGY]  Format  format  =  getFormat(pattern,  c,  index);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(pattern,  c,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(pattern,  c,  index);	  Format    format    =    getFormat(c,    index);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	105	None	replace
389	[BUG]  [BUGGY]  Format  format  =  getFormat(pattern,  pos,  index);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(pattern,  pos,  index);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(pattern,  pos,  index);	  Format    format    =    getFormat(c,    index);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	105	None	replace
390	[BUG]  [BUGGY]  if(index  ==  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  ==  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  ==  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    index;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	27	None	replace
391	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  index,  c,  false);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  appendQuotedString(pattern,  start,  index,  c,  false);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	appendQuotedString(pattern,  start,  index,  c,  false);  break;	  appendQuotedString(pattern,    start,    index,    false);    break;    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	24	None	replace
392	[BUG]  [BUGGY]  if(index  >  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >  0)  {  for(int  i  =  start;  i  <  index;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	  if(index    <    0)    {    for(int    i    =    start;    i    <    index;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	28	None	replace
393	[BUG]  [BUGGY]  if(index  >=  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMM  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMM  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMM	  if(index    >=    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMM    	non-compiled	[CE]  ')'  expected	48	None	replace
394	[BUG]  [BUGGY]  if(index  >=  -1)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMM  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index  >=  -1)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMM  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index  >=  -1)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(DUMMY_PATTERN).append(DUMM	  if(index    >=    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(DUMMY_PATTERN).append(DUMM    	non-compiled	[CE]  ')'  expected	48	None	replace
395	[BUG]  [BUGGY]  Format  format  =  getFormat(c);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(c);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(c);	  Format    format    =    getFormat(end);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	51	None	replace
396	[BUG]  [BUGGY]  Format  format  =  getFormat(end_FE,  fmtCount);  [CE]  cannot  find  symbol  end_FE  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(end_FE,  fmtCount);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(end_FE,  fmtCount);	  Format    format    =    getFormat(END_FE);    	non-compiled	[CE]  cannot  find  symbol  end_FE	49	None	replace
397	[BUG]  [BUGGY]  Format  format  =  getFormat(END_FE,  fmtCount);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(END_FE,  fmtCount);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(END_FE,  fmtCount);	  Format    format    =    getFormat(END_FE);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	49	None	replace
398	[BUG]  [BUGGY]  int  c  =  readArgumentIndex(pattern,  start,  index  -  1);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  int  c  =  readArgumentIndex(pattern,  start,  index  -  1);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	int  c  =  readArgumentIndex(pattern,  start,  index  -  1);	  int    c    =    readArgumentIndex(pattern,    start,    index);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	107	None	replace
399	[BUG]  [BUGGY]  Format  format  =  new  Format(c,  start,  index  *  1);  [CE]  Format  is  abstract;  cannot  be  instantiated  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  new  Format(c,  start,  index  *  1);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  new  Format(c,  start,  index  *  1);	  Format    format    =    new    Format(c,    start,    index    -    1);    	non-compiled	[CE]  Format  is  abstract;  cannot  be  instantiated	19	None	replace
400	[BUG]  [BUGGY]  Format  format  =  getFormat(pattern,  index,  start);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  getFormat(pattern,  index,  start);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  getFormat(pattern,  index,  start);	  Format    format    =    getFormat(index,    start);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	43	None	replace
401	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  start,  true);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  start,  true);  break;  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	appendQuotedString(pattern,  pos,  stripCustom,  start,  true);  break;	  appendQuotedString(pattern,    pos,    start,    true);    break;    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	7	None	replace
402	[BUG]  [BUGGY]  Format  format  =  iterateFormat(registry).next();  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  iterateFormat(registry).next();  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  iterateFormat(registry).next();	  Format    format    =    registry.next();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
403	[BUG]  [BUGGY]  Format  format  =  iterateFormat(registry);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  Format  format  =  iterateFormat(registry);  [BUGGY]      String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	Format  format  =  iterateFormat(registry);	  Format    format    =    registry.next();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
404	[BUG]  [BUGGY]  if(index!=  -1)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index!=  -1)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index!=  -1)  {  appendQuotedString(pattern,  start,  pos,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN	  if(index!=    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(DUMMY_PATTERN    	non-compiled	[CE]  ')'  expected	46	None	replace
405	[BUG]  [BUGGY]  if(index!=  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index!=  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index!=  0)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN	  if(index!=    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(DUMMY_PATTERN    	non-compiled	[CE]  ')'  expected	46	None	replace
406	[BUG]  [BUGGY]  if(index!=  -1)  {  appendQuotedString(pattern,  start,  fmtCount,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  registry      [CONTEXT]      case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);      [BUGGY]  if(index!=  -1)  {  appendQuotedString(pattern,  start,  fmtCount,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN  [BUGGY]      Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	170	170	1	replace	if(index!=  -1)  {  appendQuotedString(pattern,  start,  fmtCount,  true);  break;  }  else  {  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(END_FE).append(DUMMY_PATTERN	  if(index!=    -1)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    else    {    index    =    readArgumentIndex(pattern,    next(pos));    stripCustom.append(END_FE).append(DUMMY_PATTERN    	non-compiled	[CE]  ')'  expected	46	None	replace
