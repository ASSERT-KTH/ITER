bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.length  -  1;  [CE]  cannot  find  symbol  length  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  int  fmtCount  =  foundDescriptions.length  -  1;  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	int  fmtCount  =  foundDescriptions.length  -  1;	  int    fmtCount    =    foundDescriptions.length;    	non-compiled	[CE]  cannot  find  symbol  length	31	None	replace
2	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.length  +  1;  [CE]  cannot  find  symbol  length  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  int  fmtCount  =  foundDescriptions.length  +  1;  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	int  fmtCount  =  foundDescriptions.length  +  1;	  int    fmtCount    =    foundDescriptions.length;    	non-compiled	[CE]  cannot  find  symbol  length	31	None	replace
3	[BUG]  [BUGGY]  pos.setIndex(start);  pos.setIndex(0);  [CE]  cannot  find  symbol  start  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(start);  pos.setIndex(0);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(start);  pos.setIndex(0);	          pos.setIndex(0);    pos.setIndex(0);    	non-compiled	[CE]  cannot  find  symbol  start	22	None	replace
4	[BUG]  [BUGGY]  pos.setIndex(0);  toPattern.setIndex(0);  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(0);  toPattern.setIndex(0);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(0);  toPattern.setIndex(0);	          pos.setIndex(0);    pos.setIndex(0);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
5	[BUG]  [BUGGY]  String  c  =  it.formatDescription.toCharArray();  [CE]  package  it  does  not  exist  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  String  c  =  it.formatDescription.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	String  c  =  it.formatDescription.toCharArray();	  char[]    c    =    it.formatDescription.toCharArray();    	non-compiled	[CE]  package  it  does  not  exist	62	None	replace
6	[BUG]  [BUGGY]  char[]  c  =  registry.toCharArray();  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char[]  c  =  registry.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char[]  c  =  registry.toCharArray();	  char[]    c    =    it.toCharArray();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
7	[BUG]  [BUGGY]  char[]  c  =  iterator.toCharArray();  [CE]  cannot  find  symbol  iterator  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char[]  c  =  iterator.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char[]  c  =  iterator.toCharArray();	  char[]    c    =    it.toCharArray();    	non-compiled	[CE]  cannot  find  symbol  iterator	50	None	replace
8	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.size();  pos.setIndex(foundDescriptions.size());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  int  fmtCount  =  foundDescriptions.size();  pos.setIndex(foundDescriptions.size());  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	int  fmtCount  =  foundDescriptions.size();  pos.setIndex(foundDescriptions.size());	          pos.setIndex(foundDescriptions.size());    int    fmtCount    =    findDescriptions.size();    pos.setIndex(foundDescriptions.size());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	64	None	replace
9	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.size();  pos.setIndex(fmtCount);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  int  fmtCount  =  foundDescriptions.size();  pos.setIndex(fmtCount);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	int  fmtCount  =  foundDescriptions.size();  pos.setIndex(fmtCount);	          pos.setIndex(foundDescriptions.size());    int    fmtCount    =    findDescriptions.size();    pos.setIndex(foundDescriptions.size());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	64	None	replace
10	[BUG]  [BUGGY]  String  c  =  toPattern.toCharArray();  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  String  c  =  toPattern.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	String  c  =  toPattern.toCharArray();	  char[]    c    =    toPattern.toCharArray();    String    c    =    toPattern.toCharArray();    	non-compiled	[CE]  incompatible  types	49	None	replace
11	[BUG]  [BUGGY]  int  c  =  toPattern.toCharArray();  String  c  =  toPattern.toCharArray();  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  int  c  =  toPattern.toCharArray();  String  c  =  toPattern.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	int  c  =  toPattern.toCharArray();  String  c  =  toPattern.toCharArray();	  char[]    c    =    toPattern.toCharArray();    String    c    =    toPattern.toCharArray();    	non-compiled	[CE]  incompatible  types	49	None	replace
12	[BUG]  [BUGGY]  String[]  c  =  toPattern.toCharArray();  Char[]  c  =  toPattern.toCharArray();  [CE]  incompatible  types  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  String[]  c  =  toPattern.toCharArray();  Char[]  c  =  toPattern.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	String[]  c  =  toPattern.toCharArray();  Char[]  c  =  toPattern.toCharArray();	  char[]    c    =    toPattern.toCharArray();    Char[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  incompatible  types	19	None	replace
13	[BUG]  [BUGGY]  Char[]  c  =  toPattern.toCharArray();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  Char[]  c  =  toPattern.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	Char[]  c  =  toPattern.toCharArray();	  char[]    c    =    toPattern.toCharArray();    Char[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
14	[BUG]  [BUGGY]  pos.setIndex(fmtCount);  Integer  fmtCount  =  foundDescriptions.size();  [CE]  cannot  find  symbol  fmtCount  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(fmtCount);  Integer  fmtCount  =  foundDescriptions.size();  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(fmtCount);  Integer  fmtCount  =  foundDescriptions.size();	          pos.setIndex(foundDescriptions.size());    Integer    fmtCount    =    findDescriptions.size();    	non-compiled	[CE]  cannot  find  symbol  fmtCount	42	None	replace
15	[BUG]  [BUGGY]  pos.setIndex(foundDescriptions.size());  Integer  fmtCount  =  foundDescriptions.size();  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(foundDescriptions.size());  Integer  fmtCount  =  foundDescriptions.size();  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(foundDescriptions.size());  Integer  fmtCount  =  foundDescriptions.size();	          pos.setIndex(foundDescriptions.size());    Integer    fmtCount    =    findDescriptions.size();    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	42	None	replace
16	[BUG]  [BUGGY]  Integer  fmtCount  =  foundDescriptions.size();  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  Integer  fmtCount  =  foundDescriptions.size();  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	Integer  fmtCount  =  foundDescriptions.size();	          pos.setIndex(foundDescriptions.size());    Integer    fmtCount    =    findDescriptions.size();    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	42	None	replace
17	[BUG]  [BUGGY]  int  c  =  toPattern.toCharArray();  char[]  c  =  toPattern.toCharArray();  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  int  c  =  toPattern.toCharArray();  char[]  c  =  toPattern.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	int  c  =  toPattern.toCharArray();  char[]  c  =  toPattern.toCharArray();	  char[]    c    =    toPattern.toCharArray();    char[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  incompatible  types	16	None	replace
18	[BUG]  [BUGGY]  pos.setIndex(2);  [CE]  cannot  find  symbol  c  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(2);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(2);	  pos.setIndex(1);    	non-compiled	[CE]  cannot  find  symbol  c	39	None	replace
19	[BUG]  [BUGGY]  char  fmtCount  =  foundFormats.size();  [CE]  possible  loss  of  precision  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char  fmtCount  =  foundFormats.size();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char  fmtCount  =  foundFormats.size();	  int    fmtCount    =    foundFormats.size();    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
20	[BUG]  [BUGGY]  int  fmtCount  =  foundFormats.size()  -  1;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  int  fmtCount  =  foundFormats.size()  -  1;  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	int  fmtCount  =  foundFormats.size()  -  1;	  int    fmtCount    =    foundFormats.size();    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	3	None	replace
21	[BUG]  [BUGGY]  String[]  c  =  foundDescriptions!=  null?  toPattern  :  foundDescriptions.toCharArray();  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  String[]  c  =  foundDescriptions!=  null?  toPattern  :  foundDescriptions.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	String[]  c  =  foundDescriptions!=  null?  toPattern  :  foundDescriptions.toCharArray();	  String[]    c    =    foundDescriptions.toCharArray();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
22	[BUG]  [BUGGY]  String[]  c  =  foundDescriptions,  pos.toCharArray();  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  String[]  c  =  foundDescriptions,  pos.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	String[]  c  =  foundDescriptions,  pos.toCharArray();	  String[]    c    =    foundDescriptions.toCharArray();    	non-compiled	[CE]  ';'  expected	34	None	replace
23	[BUG]  [BUGGY]  char  c  =  pattern.charAt(pos.getIndex()  +  1);  [CE]  array  required,  but  char  found  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char  c  =  pattern.charAt(pos.getIndex()  +  1);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char  c  =  pattern.charAt(pos.getIndex()  +  1);	  char    c    =    pattern.charAt(pos.getIndex());    	non-compiled	[CE]  array  required,  but  char  found	57	None	replace
24	[BUG]  [BUGGY]  char  c  =  pattern.charAt(pos.getIndex()  -  start);  [CE]  cannot  find  symbol  start  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char  c  =  pattern.charAt(pos.getIndex()  -  start);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char  c  =  pattern.charAt(pos.getIndex()  -  start);	  char    c    =    pattern.charAt(pos.getIndex());    	non-compiled	[CE]  cannot  find  symbol  start	57	None	replace
25	[BUG]  [BUGGY]  String  c  =  pattern.charAt(pos.getIndex());  [CE]  incompatible  types  [FE]                        junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  String  c  =  pattern.charAt(pos.getIndex());  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	String  c  =  pattern.charAt(pos.getIndex());	  char    c    =    pattern.charAt(pos.getIndex());    	non-compiled	[CE]  incompatible  types	57	None	replace
26	[BUG]  [BUGGY]  pos.setIndex(foundDescriptions.size()  +  2);  [CE]  cannot  find  symbol  c  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(foundDescriptions.size()  +  2);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(foundDescriptions.size()  +  2);	  pos.setIndex(foundDescriptions.size()    -    2);    	non-compiled	[CE]  cannot  find  symbol  c	28	None	replace
27	[BUG]  [BUGGY]  pos.setIndex(findDescriptions.size());  [CE]  cannot  find  symbol  findDescriptions  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(findDescriptions.size());  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(findDescriptions.size());	  pos.setIndex(foundDescriptions.size()    -    2);    	non-compiled	[CE]  cannot  find  symbol  findDescriptions	28	None	replace
28	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  }  [CE]  cannot  find  symbol  c  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  }	          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());    	non-compiled	[CE]  cannot  find  symbol  c	11	None	replace
29	[BUG]  [BUGGY]  int  fmtCount  =  Pattern.compile(pattern.length());  [CE]  cannot  find  symbol  Pattern  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  int  fmtCount  =  Pattern.compile(pattern.length());  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	int  fmtCount  =  Pattern.compile(pattern.length());	  int    fmtCount    =    pattern.length()    +    1;    	non-compiled	[CE]  cannot  find  symbol  Pattern	54	None	replace
30	[BUG]  [BUGGY]  Integer  fmtCount  =  pattern.length();  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  Integer  fmtCount  =  pattern.length();  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	Integer  fmtCount  =  pattern.length();	  int    fmtCount    =    pattern.length()    +    1;    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	54	None	replace
31	[BUG]  [BUGGY]  int  fmtCount  =  foundFormats.length()  +  1;  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  int  fmtCount  =  foundFormats.length()  +  1;  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	int  fmtCount  =  foundFormats.length()  +  1;	  int    fmtCount    =    foundFormats.length();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
32	[BUG]  [BUGGY]  char  c  =  foundDescriptions.size();  [CE]  possible  loss  of  precision  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char  c  =  foundDescriptions.size();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char  c  =  foundDescriptions.size();	  int    c    =    foundDescriptions.size();    	non-compiled	[CE]  possible  loss  of  precision	52	None	replace
33	[BUG]  [BUGGY]  int  c  =  foundDescriptions.size()  +  1;  [CE]  array  required,  but  int  found  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  int  c  =  foundDescriptions.size()  +  1;  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	int  c  =  foundDescriptions.size()  +  1;	  int    c    =    foundDescriptions.size();    	non-compiled	[CE]  array  required,  but  int  found	52	None	replace
34	[BUG]  [BUGGY]  int  c  =  foundDescriptions.size()  -  1;  [CE]  array  required,  but  int  found  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  int  c  =  foundDescriptions.size()  -  1;  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	int  c  =  foundDescriptions.size()  -  1;	  int    c    =    foundDescriptions.size();    	non-compiled	[CE]  array  required,  but  int  found	52	None	replace
35	[BUG]  [BUGGY]  char[]  c  =  foundDescriptions  ==  null?  toPattern.toCharArray()  :  Collections.EMPTY_STRING;  [CE]  cannot  find  symbol  Collections  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char[]  c  =  foundDescriptions  ==  null?  toPattern.toCharArray()  :  Collections.EMPTY_STRING;  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char[]  c  =  foundDescriptions  ==  null?  toPattern.toCharArray()  :  Collections.EMPTY_STRING;	  char[]    c    =    foundDescriptions!=    null?    toPattern.toCharArray()    :    Collections.EMPTY_STRING;    	non-compiled	[CE]  cannot  find  symbol  Collections	59	None	replace
36	[BUG]  [BUGGY]  char[]  c  =  toPattern!=  null?  foundDescriptions.toCharArray()  :  Collections.EMPTY_STRING;  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char[]  c  =  toPattern!=  null?  foundDescriptions.toCharArray()  :  Collections.EMPTY_STRING;  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char[]  c  =  toPattern!=  null?  foundDescriptions.toCharArray()  :  Collections.EMPTY_STRING;	  char[]    c    =    foundDescriptions!=    null?    toPattern.toCharArray()    :    Collections.EMPTY_STRING;    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
37	[BUG]  [BUGGY]  char[]  c  =  foundDescriptions.length,  stripCustom.toCharArray();  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char[]  c  =  foundDescriptions.length,  stripCustom.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char[]  c  =  foundDescriptions.length,  stripCustom.toCharArray();	  char[]    c    =    foundDescriptions,    stripCustom.toCharArray();    	non-compiled	[CE]  ';'  expected	36	None	replace
38	[BUG]  [BUGGY]  char[]  c  =  foundFormats,  stripCustom.toCharArray();  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char[]  c  =  foundFormats,  stripCustom.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char[]  c  =  foundFormats,  stripCustom.toCharArray();	  char[]    c    =    foundDescriptions,    stripCustom.toCharArray();    	non-compiled	[CE]  ';'  expected	36	None	replace
39	[BUG]  [BUGGY]  pos.setIndex(start);  pos.setIndex(1);  [CE]  cannot  find  symbol  start  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(start);  pos.setIndex(1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(start);  pos.setIndex(1);	          pos.setIndex(0);    pos.setIndex(1);    	non-compiled	[CE]  cannot  find  symbol  start	24	None	replace
40	[BUG]  [BUGGY]  pos.setIndex(0);  toPattern.setIndex(1);  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(0);  toPattern.setIndex(1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(0);  toPattern.setIndex(1);	          pos.setIndex(0);    pos.setIndex(1);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
41	[BUG]  [BUGGY]  char[]  c  =  f.toCharArray();  [CE]  cannot  find  symbol  f  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char[]  c  =  f.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char[]  c  =  f.toCharArray();	  char[]    c    =    format.toCharArray();    	non-compiled	[CE]  cannot  find  symbol  f	55	None	replace
42	[BUG]  [BUGGY]  pos.setIndex(foundFormats.size());  [CE]  cannot  find  symbol  c  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(foundFormats.size());  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(foundFormats.size());	  pos.setIndex(findFormats.size());    	non-compiled	[CE]  cannot  find  symbol  c	67	None	replace
43	[BUG]  [BUGGY]  pos.setIndex(entities.size());  [CE]  cannot  find  symbol  entities  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(entities.size());  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(entities.size());	  pos.setIndex(findFormats.size());    	non-compiled	[CE]  cannot  find  symbol  entities	67	None	replace
44	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(0);    pos.setIndex(1);  pos.setIndex(0);  pos.setIndex(1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	add	                pos.setIndex(0);        pos.setIndex(1);    pos.setIndex(0);  pos.setIndex(1);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	23	5	add
45	[BUG]  [BUGGY]          pos.setIndex(0);    pos.setIndex(1);  pos.setIndex(0);  pos.setIndex(1);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(0);    pos.setIndex(1);  pos.setIndex(0);  pos.setIndex(1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	                pos.setIndex(0);        pos.setIndex(1);    pos.setIndex(0);  pos.setIndex(1);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	23	5	add
46	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(0);    pos.setIndex(1);  pos.setIndex(1);  pos.setIndex(1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	add	                pos.setIndex(0);        pos.setIndex(1);    pos.setIndex(1);  pos.setIndex(1);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	23	5	add
47	[BUG]  [BUGGY]          pos.setIndex(0);    pos.setIndex(1);  pos.setIndex(1);  pos.setIndex(1);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(0);    pos.setIndex(1);  pos.setIndex(1);  pos.setIndex(1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	                pos.setIndex(0);        pos.setIndex(1);    pos.setIndex(1);  pos.setIndex(1);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	23	5	add
48	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(0);    pos.setIndex(1);  pos.setIndex(0);  pos.setIndex(2);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	add	                pos.setIndex(0);        pos.setIndex(1);    pos.setIndex(0);  pos.setIndex(2);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	23	5	add
49	[BUG]  [BUGGY]          pos.setIndex(0);    pos.setIndex(1);  pos.setIndex(0);  pos.setIndex(2);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(0);    pos.setIndex(1);  pos.setIndex(0);  pos.setIndex(2);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	                pos.setIndex(0);        pos.setIndex(1);    pos.setIndex(0);  pos.setIndex(2);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	23	5	add
50	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(0);    pos.setIndex(1);  pos.setIndex(0);  pos.setIndex(0);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	add	                pos.setIndex(0);        pos.setIndex(1);    pos.setIndex(0);  pos.setIndex(0);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	23	1	add
51	[BUG]  [BUGGY]          pos.setIndex(0);    pos.setIndex(1);  pos.setIndex(0);  pos.setIndex(0);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(0);    pos.setIndex(1);  pos.setIndex(0);  pos.setIndex(0);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	                pos.setIndex(0);        pos.setIndex(1);    pos.setIndex(0);  pos.setIndex(0);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	23	1	add
52	[BUG]  [BUGGY]  pos.setIndex(foundDescriptions.size()  /  1);  [CE]  cannot  find  symbol  c  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(foundDescriptions.size()  /  1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(foundDescriptions.size()  /  1);	  pos.setIndex(foundDescriptions.size()    *    1);    	non-compiled	[CE]  cannot  find  symbol  c	29	None	replace
53	[BUG]  [BUGGY]  pos.setIndex(foundDescriptions.size()  *  2);  [CE]  cannot  find  symbol  c  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(foundDescriptions.size()  *  2);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(foundDescriptions.size()  *  2);	  pos.setIndex(foundDescriptions.size()    *    1);    	non-compiled	[CE]  cannot  find  symbol  c	29	None	replace
54	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size());  }  [CE]  cannot  find  symbol  c  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size());  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size());  }	          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()    -    1);    }    	non-compiled	[CE]  cannot  find  symbol  c	46	None	replace
55	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  -  1);  }  [CE]  cannot  find  symbol  c  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  -  1);  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  -  1);  }	          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()    -    1);    }    	non-compiled	[CE]  cannot  find  symbol  c	46	None	replace
56	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size());  }  else  {  foundFormats  =  new  ArrayList  <  String>();  }  [CE]  incompatible  types  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size());  }  else  {  foundFormats  =  new  ArrayList  <  String>();  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size());  }  else  {  foundFormats  =  new  ArrayList  <  String>();  }	          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()    -    1);    }    	non-compiled	[CE]  incompatible  types	46	None	replace
57	[BUG]  [BUGGY]  pos.setIndex(foundDescriptions.size());  System.arraycopy(pattern,  0,  foundDescriptions,  0,  foundDescriptions.size());  [CE]  cannot  find  symbol  c  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(foundDescriptions.size());  System.arraycopy(pattern,  0,  foundDescriptions,  0,  foundDescriptions.size());  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(foundDescriptions.size());  System.arraycopy(pattern,  0,  foundDescriptions,  0,  foundDescriptions.size());	          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());    }    else    {    pos.setIndex(foundDescriptions.size());    System.arraycopy(pattern,    0,    foundDescriptions,    0,    foundDescriptions.size());    	non-compiled	[CE]  cannot  find  symbol  c	13	None	replace
58	[BUG]  [BUGGY]  pos.setIndex(foundDescriptions.size()  -  1);  System.arraycopy(pattern,  0,  foundDescriptions,  0,  foundDescriptions.size());  [CE]  cannot  find  symbol  c  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(foundDescriptions.size()  -  1);  System.arraycopy(pattern,  0,  foundDescriptions,  0,  foundDescriptions.size());  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(foundDescriptions.size()  -  1);  System.arraycopy(pattern,  0,  foundDescriptions,  0,  foundDescriptions.size());	          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());    }    else    {    pos.setIndex(foundDescriptions.size());    System.arraycopy(pattern,    0,    foundDescriptions,    0,    foundDescriptions.size());    	non-compiled	[CE]  cannot  find  symbol  c	13	None	replace
59	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  case  END_FE:  toPattern  =  registry.createFormat(DUMMY_PATTERN,  foundDe  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  case  END_FE:  toPattern  =  registry.createFormat(DUMMY_PATTERN,  foundDe  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  case  END_FE:  toPattern  =  registry.createFormat(DUMMY_PATTERN,  foundDe	          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());    case    END_FE:    toPattern    =    registry.createFormat(DUMMY_PATTERN,    foundDescriptions[0],    true);    break;    	non-compiled	[CE]  orphaned  case	15	None	replace
60	[BUG]  [BUGGY]  pos.setIndex(foundDescriptions.size()  -  1);  case  END_FE:  toPattern  =  registry.createFormat(DUMMY_PATTERN,  foundDescriptions[0],  true);  break;  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(foundDescriptions.size()  -  1);  case  END_FE:  toPattern  =  registry.createFormat(DUMMY_PATTERN,  foundDescriptions[0],  true);  break;  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(foundDescriptions.size()  -  1);  case  END_FE:  toPattern  =  registry.createFormat(DUMMY_PATTERN,  foundDescriptions[0],  true);  break;	          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());    case    END_FE:    toPattern    =    registry.createFormat(DUMMY_PATTERN,    foundDescriptions[0],    true);    break;    	non-compiled	[CE]  orphaned  case	15	None	replace
61	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  case  END_FE:  toPattern  =  registry.createFormat(DUMMY_PATTERN,  foundDescriptions[0],  true);  break;  }  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  case  END_FE:  toPattern  =  registry.createFormat(DUMMY_PATTERN,  foundDescriptions[0],  true);  break;  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  case  END_FE:  toPattern  =  registry.createFormat(DUMMY_PATTERN,  foundDescriptions[0],  true);  break;  }	          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());    case    END_FE:    toPattern    =    registry.createFormat(DUMMY_PATTERN,    foundDescriptions[0],    true);    break;    	non-compiled	[CE]  orphaned  case	15	None	replace
62	[BUG]  [BUGGY]  char[]  c  =  foundDescriptions!=  null?  toPattern  :  pattern.toCharArray();  [CE]  incompatible  types  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char[]  c  =  foundDescriptions!=  null?  toPattern  :  pattern.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char[]  c  =  foundDescriptions!=  null?  toPattern  :  pattern.toCharArray();	  char[]    c    =    foundDescriptions!=    null?    toPattern    :    foundDescriptions.toCharArray();    	non-compiled	[CE]  incompatible  types	58	None	replace
63	[BUG]  [BUGGY]  char[]  c  =  foundDescriptions!=  null?  toPattern  :  pos.toCharArray();  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char[]  c  =  foundDescriptions!=  null?  toPattern  :  pos.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char[]  c  =  foundDescriptions!=  null?  toPattern  :  pos.toCharArray();	  char[]    c    =    foundDescriptions!=    null?    toPattern    :    foundDescriptions.toCharArray();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
64	[BUG]  [BUGGY]  char[]  c  =  foundDescriptions  ==  null?  toPattern  :  pattern.toCharArray();  [CE]  incompatible  types  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char[]  c  =  foundDescriptions  ==  null?  toPattern  :  pattern.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char[]  c  =  foundDescriptions  ==  null?  toPattern  :  pattern.toCharArray();	  char[]    c    =    foundDescriptions!=    null?    toPattern    :    foundDescriptions.toCharArray();    	non-compiled	[CE]  incompatible  types	58	None	replace
65	[BUG]  [BUGGY]  pos.setIndex(foundDescriptions.size());  case  END_FE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CE]  orphaned  case  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(foundDescriptions.size());  case  END_FE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(foundDescriptions.size());  case  END_FE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;	          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()    -    1);    case    END_FE:    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    	non-compiled	[CE]  orphaned  case	6	None	replace
66	[BUG]  [BUGGY]  pos.setIndex(foundDescriptions.size());  break;  [CE]  break  outside  switch  or  loop  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(foundDescriptions.size());  break;  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(foundDescriptions.size());  break;	          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()    -    1);    case    END_FE:    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    	non-compiled	[CE]  break  outside  switch  or  loop	6	None	replace
67	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size()  -  1);  }  else  {  pos.setIndex(foundDescriptions.size());  }  [CE]  cannot  find  symbol  c  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size()  -  1);  }  else  {  pos.setIndex(foundDescriptions.size());  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size()  -  1);  }  else  {  pos.setIndex(foundDescriptions.size());  }	          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()    -    1);    }    else    {    pos.setIndex(foundDescriptions.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  c	8	None	replace
68	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size()  -  1);  }  else  {  foundDescriptions.add(pos);  }  [CE]  no  suitable  method  found  for  add(ParsePosition)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size()  -  1);  }  else  {  foundDescriptions.add(pos);  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size()  -  1);  }  else  {  foundDescriptions.add(pos);  }	          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()    -    1);    }    else    {    pos.setIndex(foundDescriptions.size()    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  add(ParsePosition)	8	None	replace
69	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size()  -  1);  }  else  {  pos.setIndex(foundDescriptions.size()  -  1);  }  [CE]  cannot  find  symbol  c  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size()  -  1);  }  else  {  pos.setIndex(foundDescriptions.size()  -  1);  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size()  -  1);  }  else  {  pos.setIndex(foundDescriptions.size()  -  1);  }	          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()    -    1);    }    else    {    pos.setIndex(foundDescriptions.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  c	8	None	replace
70	[BUG]  [BUGGY]  pos.setIndex(start,  foundDescriptions);  [CE]  cannot  find  symbol  start  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(start,  foundDescriptions);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(start,  foundDescriptions);	  pos.setIndex(foundDescriptions);    	non-compiled	[CE]  cannot  find  symbol  start	47	None	replace
71	[BUG]  [BUGGY]  pos.setIndex(foundDescriptions,  stripCustom);  [CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(foundDescriptions,  stripCustom);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(foundDescriptions,  stripCustom);	  pos.setIndex(foundDescriptions);    	non-compiled	[CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;	47	None	replace
72	[BUG]  [BUGGY]  pos.setIndex(foundDescriptions,  start);  [CE]  cannot  find  symbol  start  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(foundDescriptions,  start);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(foundDescriptions,  start);	  pos.setIndex(foundDescriptions);    	non-compiled	[CE]  cannot  find  symbol  start	47	None	replace
73	[BUG]  [BUGGY]  pos.setIndex(foundDescriptions,  index);  [CE]  cannot  find  symbol  index  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(foundDescriptions,  index);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(foundDescriptions,  index);	  pos.setIndex(foundDescriptions);    	non-compiled	[CE]  cannot  find  symbol  index	47	None	replace
74	[BUG]  [BUGGY]  pos.setIndex(foundDescriptions.size());  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CE]  orphaned  case  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(foundDescriptions.size());  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(foundDescriptions.size());  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;	          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()    -    1);    case    QUOTE:    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    	non-compiled	[CE]  orphaned  case	7	None	replace
75	[BUG]  [BUGGY]  String[]  c  =  foundFormats.toStringArray();  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  String[]  c  =  foundFormats.toStringArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	String[]  c  =  foundFormats.toStringArray();	  String[]    c    =    foundFormats.toCharArray();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
76	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	add	                pos.setIndex(foundDescriptions.size());        pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	10	1	add
77	[BUG]  [BUGGY]          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	                pos.setIndex(foundDescriptions.size());        pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	10	1	add
78	[BUG]  [BUGGY]          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());  pos.setIndices(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());  pos.setIndices(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	                pos.setIndex(foundDescriptions.size());        pos.setIndex(foundDescriptions.size());    pos.setIndices(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
79	[BUG]  [BUGGY]          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());  pos.setName(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());  pos.setName(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	                pos.setIndex(foundDescriptions.size());        pos.setIndex(foundDescriptions.size());    pos.setName(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
80	[BUG]  [BUGGY]  pos.setIndex(fmtCount);  int  fmtCount  =  foundDescriptions.size();  [CE]  cannot  find  symbol  fmtCount  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(fmtCount);  int  fmtCount  =  foundDescriptions.size();  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(fmtCount);  int  fmtCount  =  foundDescriptions.size();	          pos.setIndex(foundDescriptions.size()    -    1);    int    fmtCount    =    findDescriptions.size()    -    1;    	non-compiled	[CE]  cannot  find  symbol  fmtCount	45	None	replace
81	[BUG]  [BUGGY]  pos.setIndex(fmtCount.size());  int  fmtCount  =  foundDescriptions.size();  [CE]  cannot  find  symbol  fmtCount  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(fmtCount.size());  int  fmtCount  =  foundDescriptions.size();  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(fmtCount.size());  int  fmtCount  =  foundDescriptions.size();	          pos.setIndex(foundDescriptions.size()    -    1);    int    fmtCount    =    findDescriptions.size()    -    1;    	non-compiled	[CE]  cannot  find  symbol  fmtCount	45	None	replace
82	[BUG]  [BUGGY]  String[]  c  =  toPattern.toCharArray()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  String[]  c  =  toPattern.toCharArray()  +  1;  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	String[]  c  =  toPattern.toCharArray()  +  1;	  char[]    c    =    toPattern.toCharArray()    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	51	None	replace
83	[BUG]  [BUGGY]  char[]  c  =  toPattern.toStringArray()  +  1;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char[]  c  =  toPattern.toStringArray()  +  1;  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char[]  c  =  toPattern.toStringArray()  +  1;	  char[]    c    =    toPattern.toCharArray()    +    1;    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
84	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.size()  -  1;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  int  fmtCount  =  foundDescriptions.size()  -  1;  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	int  fmtCount  =  foundDescriptions.size()  -  1;	  int    fmtCount    =    foundDescriptions.size();    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	2	None	replace
85	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.size()  +  1;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  int  fmtCount  =  foundDescriptions.size()  +  1;  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	int  fmtCount  =  foundDescriptions.size()  +  1;	  int    fmtCount    =    foundDescriptions.size();    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	2	None	replace
86	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.size()  -  2;  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  int  fmtCount  =  foundDescriptions.size()  -  2;  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	int  fmtCount  =  foundDescriptions.size()  -  2;	  int    fmtCount    =    foundDescriptions.size();    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	2	None	replace
87	[BUG]  [BUGGY]  String[]  c  =  toPattern.toCharArray();  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  String[]  c  =  toPattern.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	String[]  c  =  toPattern.toCharArray();	  char[]    c    =    toPattern.toCharArray();    String[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  incompatible  types	17	None	replace
88	[BUG]  [BUGGY]  int  c  =  toPattern.toCharArray();  String[]  c  =  toPattern.toCharArray();  [CE]  incompatible  types  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  int  c  =  toPattern.toCharArray();  String[]  c  =  toPattern.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	int  c  =  toPattern.toCharArray();  String[]  c  =  toPattern.toCharArray();	  char[]    c    =    toPattern.toCharArray();    String[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  incompatible  types	17	None	replace
89	[BUG]  [BUGGY]  pos.setIndex(foundDescriptions.size());  int  fmtCount  =  pattern.size();  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(foundDescriptions.size());  int  fmtCount  =  pattern.size();  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(foundDescriptions.size());  int  fmtCount  =  pattern.size();	          pos.setIndex(foundDescriptions.size());    int    fmtCount    =    findDescriptions.size();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
90	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(0);    pos.setIndex(0);  pos.setIndex(0);  pos.setIndex(0);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	add	                pos.setIndex(0);        pos.setIndex(0);    pos.setIndex(0);  pos.setIndex(0);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	21	1	add
91	[BUG]  [BUGGY]          pos.setIndex(0);    pos.setIndex(0);  pos.setIndex(0);  pos.setIndex(0);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(0);    pos.setIndex(0);  pos.setIndex(0);  pos.setIndex(0);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	                pos.setIndex(0);        pos.setIndex(0);    pos.setIndex(0);  pos.setIndex(0);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	21	1	add
92	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(0);    pos.setIndex(0);  pos.setIndex(1);  pos.setIndex(0);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	add	                pos.setIndex(0);        pos.setIndex(0);    pos.setIndex(1);  pos.setIndex(0);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	21	1	add
93	[BUG]  [BUGGY]          pos.setIndex(0);    pos.setIndex(0);  pos.setIndex(1);  pos.setIndex(0);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(0);    pos.setIndex(0);  pos.setIndex(1);  pos.setIndex(0);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	                pos.setIndex(0);        pos.setIndex(0);    pos.setIndex(1);  pos.setIndex(0);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	21	1	add
94	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(0);    pos.setIndex(0);  pos.setIndex(0);  pos.setIndex(1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	add	                pos.setIndex(0);        pos.setIndex(0);    pos.setIndex(0);  pos.setIndex(1);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	21	5	add
95	[BUG]  [BUGGY]          pos.setIndex(0);    pos.setIndex(0);  pos.setIndex(0);  pos.setIndex(1);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(0);    pos.setIndex(0);  pos.setIndex(0);  pos.setIndex(1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	                pos.setIndex(0);        pos.setIndex(0);    pos.setIndex(0);  pos.setIndex(1);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	21	5	add
96	[BUG]  [BUGGY]          pos.setIndex(0);    pos.setIndex(0);  pos.setIndex(;  pos.setIndex(0);  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(0);    pos.setIndex(0);  pos.setIndex(;  pos.setIndex(0);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	                pos.setIndex(0);        pos.setIndex(0);    pos.setIndex(;  pos.setIndex(0);	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
97	[BUG]  [BUGGY]  String[]  c  =  toPattern.toString();  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  String[]  c  =  toPattern.toString();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	String[]  c  =  toPattern.toString();	  char[]    c    =    toPattern.toString();    	non-compiled	[CE]  incompatible  types	20	None	replace
98	[BUG]  [BUGGY]  String  c  =  toPattern.toString();  [CE]  array  required,  but  String  found  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  String  c  =  toPattern.toString();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	String  c  =  toPattern.toString();	  char[]    c    =    toPattern.toString();    	non-compiled	[CE]  array  required,  but  String  found	20	None	replace
99	[BUG]  [BUGGY]  String[]  c  =  toPattern.toCharArray();  CharArray[]  c  =  toPattern.toCharArray();  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  String[]  c  =  toPattern.toCharArray();  CharArray[]  c  =  toPattern.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	String[]  c  =  toPattern.toCharArray();  CharArray[]  c  =  toPattern.toCharArray();	  char[]    c    =    toPattern.toCharArray();    CharArray[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  incompatible  types	60	None	replace
100	[BUG]  [BUGGY]  CharArray[]  c  =  toPattern.toCharArray();  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  CharArray[]  c  =  toPattern.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	CharArray[]  c  =  toPattern.toCharArray();	  char[]    c    =    toPattern.toCharArray();    CharArray[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
101	[BUG]  [BUGGY]  pos.setIndex(foundDescriptions.size());  this.appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CE]  break  outside  switch  or  loop  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(foundDescriptions.size());  this.appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(foundDescriptions.size());  this.appendQuotedString(pattern,  pos,  stripCustom,  true);  break;	          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()    -    1);    this.appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    	non-compiled	[CE]  break  outside  switch  or  loop	9	None	replace
102	[BUG]  [BUGGY]  pos.setIndex(foundDescriptions.size());  this.appendQuotedString(pattern,  pos,  stripCustom,  true);  [CE]  cannot  find  symbol  c  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(foundDescriptions.size());  this.appendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(foundDescriptions.size());  this.appendQuotedString(pattern,  pos,  stripCustom,  true);	          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()    -    1);    this.appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    	non-compiled	[CE]  cannot  find  symbol  c	9	None	replace
103	[BUG]  [BUGGY]  pos.setIndex(foundDescriptions.size());  this.appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  [CE]  break  outside  switch  or  loop  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(foundDescriptions.size());  this.appendQuotedString(pattern,  pos,  stripCustom,  false);  break;  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(foundDescriptions.size());  this.appendQuotedString(pattern,  pos,  stripCustom,  false);  break;	          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()    -    1);    this.appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    	non-compiled	[CE]  break  outside  switch  or  loop	9	None	replace
104	[BUG]  [BUGGY]  pos.setIndex(foundDescriptions.size()  -  1);  int  fmtCount  =  foundDescriptions.size();  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(foundDescriptions.size()  -  1);  int  fmtCount  =  foundDescriptions.size();  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(foundDescriptions.size()  -  1);  int  fmtCount  =  foundDescriptions.size();	          pos.setIndex(foundDescriptions.size());    int    fmtCount    =    foundDescriptions.size();    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	40	None	replace
105	[BUG]  [BUGGY]  int  c  =  toPattern.toCharArray();  Character[]  c  =  toPattern.toCharArray();  [CE]  incompatible  types  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  int  c  =  toPattern.toCharArray();  Character[]  c  =  toPattern.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	int  c  =  toPattern.toCharArray();  Character[]  c  =  toPattern.toCharArray();	  char[]    c    =    toPattern.toCharArray();    Character[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  incompatible  types	18	None	replace
106	[BUG]  [BUGGY]  int  c  =  toPattern.toString();  Character[]  c  =  toPattern.toCharArray();  [CE]  incompatible  types  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  int  c  =  toPattern.toString();  Character[]  c  =  toPattern.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	int  c  =  toPattern.toString();  Character[]  c  =  toPattern.toCharArray();	  char[]    c    =    toPattern.toCharArray();    Character[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  incompatible  types	18	None	replace
107	[BUG]  [BUGGY]  Integer  fmtCount  =  foundDescriptions.size();  pos.setIndex(fmtCount);  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  Integer  fmtCount  =  foundDescriptions.size();  pos.setIndex(fmtCount);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	Integer  fmtCount  =  foundDescriptions.size();  pos.setIndex(fmtCount);	          pos.setIndex(foundDescriptions.size());    Integer    fmtCount    =    findDescriptions.size();    pos.setIndex(foundDescriptions.size());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	65	None	replace
108	[BUG]  [BUGGY]  Integer  fmtCount  =  foundDescriptions.size();  pos.setIndex(foundDescriptions.size());  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  Integer  fmtCount  =  foundDescriptions.size();  pos.setIndex(foundDescriptions.size());  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	Integer  fmtCount  =  foundDescriptions.size();  pos.setIndex(foundDescriptions.size());	          pos.setIndex(foundDescriptions.size());    Integer    fmtCount    =    findDescriptions.size();    pos.setIndex(foundDescriptions.size());    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	65	None	replace
109	[BUG]  [BUGGY]  if(!foundDescriptions.isEmpty())  {  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size());  }  [CE]  cannot  find  symbol  c  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(!foundDescriptions.isEmpty())  {  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size());  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(!foundDescriptions.isEmpty())  {  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size());  }	          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  c	5	None	replace
110	[BUG]  [BUGGY]  char  c  =  foundDescriptions.toCharArray();  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char  c  =  foundDescriptions.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char  c  =  foundDescriptions.toCharArray();	  String    c    =    foundDescriptions.toCharArray();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
111	[BUG]  [BUGGY]  String  c  =  foundDescriptions.toString();  [CE]  array  required,  but  String  found  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  String  c  =  foundDescriptions.toString();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	String  c  =  foundDescriptions.toString();	  String    c    =    foundDescriptions.toCharArray();    	non-compiled	[CE]  array  required,  but  String  found	35	None	replace
112	[BUG]  [BUGGY]  String  c  =  foundDescriptions!=  null?  toPattern.toCharArray()  :  pos.toCharArray();  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  String  c  =  foundDescriptions!=  null?  toPattern.toCharArray()  :  pos.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	String  c  =  foundDescriptions!=  null?  toPattern.toCharArray()  :  pos.toCharArray();	  String    c    =    foundDescriptions.toCharArray();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
113	[BUG]  [BUGGY]  char  c  =  foundFormats.toCharArray();  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char  c  =  foundFormats.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char  c  =  foundFormats.toCharArray();	  String    c    =    foundFormats.toCharArray();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
114	[BUG]  [BUGGY]  String  c  =  foundFormats.toString();  [CE]  array  required,  but  String  found  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  String  c  =  foundFormats.toString();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	String  c  =  foundFormats.toString();	  String    c    =    foundFormats.toCharArray();    	non-compiled	[CE]  array  required,  but  String  found	38	None	replace
115	[BUG]  [BUGGY]  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size())-  1);  [CE]  not  a  statement  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size())-  1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size())-  1);	          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size())    -    1);    	non-compiled	[CE]  not  a  statement	61	None	replace
116	[BUG]  [BUGGY]  pos.setIndex(foundDescriptions.size())-  1;  [CE]  not  a  statement  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(foundDescriptions.size())-  1;  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(foundDescriptions.size())-  1;	          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size())    -    1);    	non-compiled	[CE]  not  a  statement	61	None	replace
117	[BUG]  [BUGGY]  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size())-  1;  [CE]  not  a  statement  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size())-  1;  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size())-  1;	          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size())    -    1);    	non-compiled	[CE]  not  a  statement	61	None	replace
118	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.length()  -  1;  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  int  fmtCount  =  foundDescriptions.length()  -  1;  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	int  fmtCount  =  foundDescriptions.length()  -  1;	  int    fmtCount    =    pattern.length()    -    1;    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
119	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  -  1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	add	                pos.setIndex(foundDescriptions.size()        -        1);        pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  -  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	5	add
120	[BUG]  [BUGGY]          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  -  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  -  1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	                pos.setIndex(foundDescriptions.size()        -        1);        pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  -  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	5	add
121	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  +  1);  pos.setIndex(foundDescriptions.size()  -  1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	add	                pos.setIndex(foundDescriptions.size()        -        1);        pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()  +  1);  pos.setIndex(foundDescriptions.size()  -  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	5	add
122	[BUG]  [BUGGY]          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  +  1);  pos.setIndex(foundDescriptions.size()  -  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  +  1);  pos.setIndex(foundDescriptions.size()  -  1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	                pos.setIndex(foundDescriptions.size()        -        1);        pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()  +  1);  pos.setIndex(foundDescriptions.size()  -  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	5	add
123	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size()  -  1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	add	                pos.setIndex(foundDescriptions.size()        -        1);        pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size()  -  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	5	add
124	[BUG]  [BUGGY]          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size()  -  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size()  -  1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	                pos.setIndex(foundDescriptions.size()        -        1);        pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size()  -  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	5	add
125	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  *  1);  pos.setIndex(foundDescriptions.size()  *  1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	add	                pos.setIndex(foundDescriptions.size()        -        1);        pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()  *  1);  pos.setIndex(foundDescriptions.size()  *  1);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	4	1	add
126	[BUG]  [BUGGY]          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  *  1);  pos.setIndex(foundDescriptions.size()  *  1);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  *  1);  pos.setIndex(foundDescriptions.size()  *  1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	                pos.setIndex(foundDescriptions.size()        -        1);        pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()  *  1);  pos.setIndex(foundDescriptions.size()  *  1);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	4	1	add
127	[BUG]  [BUGGY]  String  fmtCount  =  pattern.length();  [CE]  incompatible  types  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  String  fmtCount  =  pattern.length();  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	String  fmtCount  =  pattern.length();	  char    fmtCount    =    pattern.length();    	non-compiled	[CE]  incompatible  types	33	None	replace
128	[BUG]  [BUGGY]  pos.setIndex(foundDescriptions.length  +  1);  [CE]  cannot  find  symbol  length  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(foundDescriptions.length  +  1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(foundDescriptions.length  +  1);	  pos.setIndex(foundDescriptions.length);    	non-compiled	[CE]  cannot  find  symbol  length	48	None	replace
129	[BUG]  [BUGGY]  pos.setIndex(foundDescriptions.length  -  1);  [CE]  cannot  find  symbol  length  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(foundDescriptions.length  -  1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(foundDescriptions.length  -  1);	  pos.setIndex(foundDescriptions.length);    	non-compiled	[CE]  cannot  find  symbol  length	48	None	replace
130	[BUG]  [BUGGY]  pos.setIndex(0,  foundDescriptions.length);  [CE]  cannot  find  symbol  length  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(0,  foundDescriptions.length);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(0,  foundDescriptions.length);	          pos.setIndex(0);    pos.setIndex(1;    	non-compiled	[CE]  cannot  find  symbol  length	26	None	replace
131	[BUG]  [BUGGY]  pos.setIndex(0);  foundDescriptions.add(1;  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(0);  foundDescriptions.add(1;  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(0);  foundDescriptions.add(1;	          pos.setIndex(0);    pos.setIndex(1;    	non-compiled	[CE]  ')'  expected	26	None	replace
132	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.length()  +  1;  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  int  fmtCount  =  foundDescriptions.length()  +  1;  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	int  fmtCount  =  foundDescriptions.length()  +  1;	  int    fmtCount    =    foundDescriptions.length();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
133	[BUG]  [BUGGY]  int  fmtCount  =  foundDescriptions.length()  *  2;  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  int  fmtCount  =  foundDescriptions.length()  *  2;  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	int  fmtCount  =  foundDescriptions.length()  *  2;	  int    fmtCount    =    foundDescriptions.length();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
134	[BUG]  [BUGGY]  String  c  =  pattern.charAt(pos.getIndex()  -  1);  [CE]  incompatible  types  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  String  c  =  pattern.charAt(pos.getIndex()  -  1);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	String  c  =  pattern.charAt(pos.getIndex()  -  1);	  char    c    =    pattern.charAt(pos.getIndex()    -    1);    	non-compiled	[CE]  incompatible  types	56	None	replace
135	[BUG]  [BUGGY]  char[]  c  =  foundDescriptions!=  null?  toPattern  :  dummy.toCharArray();  [CE]  cannot  find  symbol  dummy  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char[]  c  =  foundDescriptions!=  null?  toPattern  :  dummy.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char[]  c  =  foundDescriptions!=  null?  toPattern  :  dummy.toCharArray();	  char[]    c    =    foundDescriptions!=    null?    toPattern    :    foundDescriptions.toCharArray();    	non-compiled	[CE]  cannot  find  symbol  dummy	58	None	replace
136	[BUG]  [BUGGY]  char[]  c  =  foundDescriptions!=  null?  toPattern  :  registry.toCharArray();  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char[]  c  =  foundDescriptions!=  null?  toPattern  :  registry.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char[]  c  =  foundDescriptions!=  null?  toPattern  :  registry.toCharArray();	  char[]    c    =    foundDescriptions!=    null?    toPattern    :    foundDescriptions.toCharArray();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
137	[BUG]  [BUGGY]  pos.setIndex(findFormats.size()  -  1);  [CE]  cannot  find  symbol  findFormats  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(findFormats.size()  -  1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(findFormats.size()  -  1);	  pos.setIndex(findFormats.size());    	non-compiled	[CE]  cannot  find  symbol  findFormats	67	None	replace
138	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  this.appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  break  outside  switch  or  loop  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  this.appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  this.appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()    -    1);    this.appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    	non-compiled	[CE]  break  outside  switch  or  loop	9	None	replace
139	[BUG]  [BUGGY]  char[]  c  =  toPattern.toString()  +  1;  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char[]  c  =  toPattern.toString()  +  1;  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char[]  c  =  toPattern.toString()  +  1;	  char[]    c    =    toPattern.toCharArray()    +    1;    	non-compiled	[CE]  incompatible  types	51	None	replace
140	[BUG]  [BUGGY]  String  c  =  toPattern.toCharArray()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  String  c  =  toPattern.toCharArray()  +  1;  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	String  c  =  toPattern.toCharArray()  +  1;	  char[]    c    =    toPattern.toCharArray()    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	51	None	replace
141	[BUG]  [BUGGY]  pos.setIndex(foundDescriptions.size()  -  1);  Integer  fmtCount  =  foundDescriptions.size();  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(foundDescriptions.size()  -  1);  Integer  fmtCount  =  foundDescriptions.size();  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(foundDescriptions.size()  -  1);  Integer  fmtCount  =  foundDescriptions.size();	          pos.setIndex(foundDescriptions.size());    Integer    fmtCount    =    findDescriptions.size();    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	42	None	replace
142	[BUG]  [BUGGY]  if(foundDescriptions  ==  null)  {  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size());  }  [CE]  cannot  find  symbol  c  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(foundDescriptions  ==  null)  {  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size());  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(foundDescriptions  ==  null)  {  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size());  }	          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()    -    1);    }    	non-compiled	[CE]  cannot  find  symbol  c	46	None	replace
143	[BUG]  [BUGGY]  if(toPattern!=  null)  {  char[]  c  =  toPattern.toCharArray();  Character[]  c  =  toPattern.toCharArray();  }  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(toPattern!=  null)  {  char[]  c  =  toPattern.toCharArray();  Character[]  c  =  toPattern.toCharArray();  }  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(toPattern!=  null)  {  char[]  c  =  toPattern.toCharArray();  Character[]  c  =  toPattern.toCharArray();  }	  char[]    c    =    toPattern.toCharArray();    Character[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	18	None	replace
144	[BUG]  [BUGGY]  if(toPattern!=  null)  {  char[]  c  =  toPattern.toCharArray();  Character[]  c  =  toPattern.toCharArray();  }  else  {  for(int  i  =  start;  i  <  pos.getIndex();  i++)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(toPattern!=  null)  {  char[]  c  =  toPattern.toCharArray();  Character[]  c  =  toPattern.toCharArray();  }  else  {  for(int  i  =  start;  i  <  pos.getIndex();  i++)  {  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(toPattern!=  null)  {  char[]  c  =  toPattern.toCharArray();  Character[]  c  =  toPattern.toCharArray();  }  else  {  for(int  i  =  start;  i  <  pos.getIndex();  i++)  {	  char[]    c    =    toPattern.toCharArray();    Character[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  ';'  expected	18	None	replace
145	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char[]  c  =  DUMMY_PATTERN.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	add	char[]  c  =  DUMMY_PATTERN.toCharArray();	  char[]    c    =    format.toCharArray();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	55	5	replace
146	[BUG]  [BUGGY]  char[]  c  =  DUMMY_PATTERN.toCharArray();  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char[]  c  =  DUMMY_PATTERN.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char[]  c  =  DUMMY_PATTERN.toCharArray();	  char[]    c    =    format.toCharArray();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	55	5	replace
147	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  int  fmtCount  =  foundDescriptions.size();  pos.setIndex(foundDescriptions.size());  }  [CE]  cannot  find  symbol  c  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  int  fmtCount  =  foundDescriptions.size();  pos.setIndex(foundDescriptions.size());  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  int  fmtCount  =  foundDescriptions.size();  pos.setIndex(foundDescriptions.size());  }	          pos.setIndex(foundDescriptions.size());    int    fmtCount    =    foundDescriptions.size();    pos.setIndex(foundDescriptions.size());    	non-compiled	[CE]  cannot  find  symbol  c	66	None	replace
148	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  int  fmtCount  =  foundDescriptions.size();  pos.setIndex(foundDescriptions.size());  }  else  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  int  fmtCount  =  foundDescriptions.size();  pos.setIndex(foundDescriptions.size());  }  else  {  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  int  fmtCount  =  foundDescriptions.size();  pos.setIndex(foundDescriptions.size());  }  else  {	          pos.setIndex(foundDescriptions.size());    int    fmtCount    =    foundDescriptions.size();    pos.setIndex(foundDescriptions.size());    	non-compiled	[CE]  ';'  expected	66	None	replace
149	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  }  else  {  int  fmtCount  =  foundDescriptions.size();  pos.setIndex(foundDescriptions.size());  }  [CE]  cannot  find  symbol  c  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  }  else  {  int  fmtCount  =  foundDescriptions.size();  pos.setIndex(foundDescriptions.size());  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  }  else  {  int  fmtCount  =  foundDescriptions.size();  pos.setIndex(foundDescriptions.size());  }	          pos.setIndex(foundDescriptions.size());    int    fmtCount    =    foundDescriptions.size();    pos.setIndex(foundDescriptions.size());    	non-compiled	[CE]  cannot  find  symbol  c	66	None	replace
150	[BUG]  [BUGGY]  pos.setIndex(foundDescriptions.size())-  1);  [CE]  not  a  statement  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(foundDescriptions.size())-  1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(foundDescriptions.size())-  1);	          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size())    -    1);    	non-compiled	[CE]  not  a  statement	61	None	replace
151	[BUG]  [BUGGY]  int  fmtCount  =  foundFormats.length;  [CE]  cannot  find  symbol  length  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  int  fmtCount  =  foundFormats.length;  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	int  fmtCount  =  foundFormats.length;	  int    fmtCount    =    foundFormats.length();    	non-compiled	[CE]  cannot  find  symbol  length	32	None	replace
152	[BUG]  [BUGGY]  Integer  fmtCount  =  foundFormats.size();  [CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  Integer  fmtCount  =  foundFormats.size();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	Integer  fmtCount  =  foundFormats.size();	  int    fmtCount    =    foundFormats.size();    	non-compiled	[CE]  variable  fmtCount  is  already  defined  in  method  applyPattern(String)	3	None	replace
153	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	add	                pos.setIndex(foundDescriptions.size());        pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	10	1	add
154	[BUG]  [BUGGY]          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	                pos.setIndex(foundDescriptions.size());        pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	10	1	add
155	[BUG]  [BUGGY]          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  pos.setItem(foundDescriptions.size());  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  pos.setItem(foundDescriptions.size());  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	                pos.setIndex(foundDescriptions.size());        pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());  pos.setItem(foundDescriptions.size());	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
156	[BUG]  [BUGGY]  pos.setIndex(-1);  [CE]  cannot  find  symbol  c  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(-1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(-1);	          pos.setIndex(0);    pos.setIndex(;    	non-compiled	[CE]  cannot  find  symbol  c	25	None	replace
157	[BUG]  [BUGGY]  char[]  c  =  it.formatDescription.toCharArray(foundDescriptions);  [CE]  package  it  does  not  exist  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char[]  c  =  it.formatDescription.toCharArray(foundDescriptions);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char[]  c  =  it.formatDescription.toCharArray(foundDescriptions);	  char[]    c    =    it.formatDescription.toCharArray();    	non-compiled	[CE]  package  it  does  not  exist	62	None	replace
158	[BUG]  [BUGGY]  pos.setIndex(1;  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(1;  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(1;	          pos.setIndex(0);    pos.setIndex(1;    	non-compiled	[CE]  ')'  expected	26	None	replace
159	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  case  END_FE:  toPattern  =  registry.createFormat(END_FE,  foundDescriptions[0],  true);  break;  }  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  case  END_FE:  toPattern  =  registry.createFormat(END_FE,  foundDescriptions[0],  true);  break;  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  case  END_FE:  toPattern  =  registry.createFormat(END_FE,  foundDescriptions[0],  true);  break;  }	          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());    case    END_FE:    toPattern    =    registry.createFormat(DUMMY_PATTERN,    foundDescriptions[0],    true);    break;    	non-compiled	[CE]  orphaned  case	15	None	replace
160	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  case  END_FE:  toPattern  =  registry.createFormat(END_FE,  foundDescriptions[0],  true);  break  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  case  END_FE:  toPattern  =  registry.createFormat(END_FE,  foundDescriptions[0],  true);  break  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  case  END_FE:  toPattern  =  registry.createFormat(END_FE,  foundDescriptions[0],  true);  break	          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());    case    END_FE:    toPattern    =    registry.createFormat(DUMMY_PATTERN,    foundDescriptions[0],    true);    break;    	non-compiled	[CE]  orphaned  case	15	None	replace
161	[BUG]  [BUGGY]  if(foundDescriptions  ==  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  case  END_FE:  toPattern  =  registry.createFormat(END_FE,  foundDescriptions[0],  true);  break;  }  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(foundDescriptions  ==  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  case  END_FE:  toPattern  =  registry.createFormat(END_FE,  foundDescriptions[0],  true);  break;  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(foundDescriptions  ==  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  case  END_FE:  toPattern  =  registry.createFormat(END_FE,  foundDescriptions[0],  true);  break;  }	          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());    case    END_FE:    toPattern    =    registry.createFormat(DUMMY_PATTERN,    foundDescriptions[0],    true);    break;    	non-compiled	[CE]  orphaned  case	15	None	replace
162	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  case  END_FE:  toPattern  =  registry.createFormat(END_FE,  foundDescriptions[0],  true  [CE]  orphaned  case  [FE]                      junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  case  END_FE:  toPattern  =  registry.createFormat(END_FE,  foundDescriptions[0],  true  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  case  END_FE:  toPattern  =  registry.createFormat(END_FE,  foundDescriptions[0],  true	          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());    case    END_FE:    toPattern    =    registry.createFormat(DUMMY_PATTERN,    foundDescriptions[0],    true);    break;    	non-compiled	[CE]  orphaned  case	15	None	replace
163	[BUG]  [BUGGY]  String[]  c  =  foundDescriptions!=  null?  toPattern.toCharArray()  :  Collections.EMPTY_STRING;  [CE]  cannot  find  symbol  Collections  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  String[]  c  =  foundDescriptions!=  null?  toPattern.toCharArray()  :  Collections.EMPTY_STRING;  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	String[]  c  =  foundDescriptions!=  null?  toPattern.toCharArray()  :  Collections.EMPTY_STRING;	  String[]    c    =    foundDescriptions.toCharArray();    	non-compiled	[CE]  cannot  find  symbol  Collections	34	None	replace
164	[BUG]  [BUGGY]  String[]  c  =  foundDescriptions!=  null?  toPattern.toCharArray()  :  descriptions;  [CE]  cannot  find  symbol  descriptions  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  String[]  c  =  foundDescriptions!=  null?  toPattern.toCharArray()  :  descriptions;  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	String[]  c  =  foundDescriptions!=  null?  toPattern.toCharArray()  :  descriptions;	  String[]    c    =    foundDescriptions.toCharArray();    	non-compiled	[CE]  cannot  find  symbol  descriptions	34	None	replace
165	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size());  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  case  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size());  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size());  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()    -    1);    case    QUOTE:    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    	non-compiled	[CE]  orphaned  case	7	None	replace
166	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  case  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()    -    1);    case    QUOTE:    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    	non-compiled	[CE]  orphaned  case	7	None	replace
167	[BUG]  [BUGGY]  char[]  c  =  foundDescriptions,  stripCustom.toCharArray(pos);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char[]  c  =  foundDescriptions,  stripCustom.toCharArray(pos);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char[]  c  =  foundDescriptions,  stripCustom.toCharArray(pos);	  char[]    c    =    foundDescriptions,    stripCustom.toCharArray();    	non-compiled	[CE]  ';'  expected	36	None	replace
168	[BUG]  [BUGGY]  String  c  =  foundDescriptions!=  null?  toPattern  :  descriptions.toCharArray();  [CE]  cannot  find  symbol  descriptions  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  String  c  =  foundDescriptions!=  null?  toPattern  :  descriptions.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	String  c  =  foundDescriptions!=  null?  toPattern  :  descriptions.toCharArray();	  String    c    =    foundDescriptions.toCharArray();    	non-compiled	[CE]  cannot  find  symbol  descriptions	35	None	replace
169	[BUG]  [BUGGY]  String  c  =  foundDescriptions!=  null?  toPattern  :  names.toCharArray();  [CE]  cannot  find  symbol  names  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  String  c  =  foundDescriptions!=  null?  toPattern  :  names.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	String  c  =  foundDescriptions!=  null?  toPattern  :  names.toCharArray();	  String    c    =    foundDescriptions.toCharArray();    	non-compiled	[CE]  cannot  find  symbol  names	35	None	replace
170	[BUG]  [BUGGY]  String  c  =  foundDescriptions!=  null?  toPattern.toCharArray()  :  descriptions;  [CE]  cannot  find  symbol  descriptions  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  String  c  =  foundDescriptions!=  null?  toPattern.toCharArray()  :  descriptions;  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	String  c  =  foundDescriptions!=  null?  toPattern.toCharArray()  :  descriptions;	  String    c    =    foundDescriptions.toCharArray();    	non-compiled	[CE]  cannot  find  symbol  descriptions	35	None	replace
171	[BUG]  [BUGGY]  if(!foundFormats.isEmpty())  {  pos.setIndex(foundDescriptions.size()  -  1);  }  else  {  pos.setIndex(foundDescriptions.size()  -  1);  }  [CE]  cannot  find  symbol  c  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(!foundFormats.isEmpty())  {  pos.setIndex(foundDescriptions.size()  -  1);  }  else  {  pos.setIndex(foundDescriptions.size()  -  1);  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(!foundFormats.isEmpty())  {  pos.setIndex(foundDescriptions.size()  -  1);  }  else  {  pos.setIndex(foundDescriptions.size()  -  1);  }	          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()    -    1);    }    else    {    pos.setIndex(foundDescriptions.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  c	8	None	replace
172	[BUG]  [BUGGY]  String  c  =  toPattern.toCharArray();  CharArray[]  c  =  toPattern.toCharArray();  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  String  c  =  toPattern.toCharArray();  CharArray[]  c  =  toPattern.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	String  c  =  toPattern.toCharArray();  CharArray[]  c  =  toPattern.toCharArray();	  char[]    c    =    toPattern.toCharArray();    CharArray[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  incompatible  types	60	None	replace
173	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray();  CharArray[]  c  =  toPattern.toCharArray();  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char[]  c  =  pattern.toCharArray();  CharArray[]  c  =  toPattern.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char[]  c  =  pattern.toCharArray();  CharArray[]  c  =  toPattern.toCharArray();	  char[]    c    =    toPattern.toCharArray();    CharArray[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
174	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  }  else  {  toPattern  =  new  ParsePosition(0);  }  [CE]  incompatible  types  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  }  else  {  toPattern  =  new  ParsePosition(0);  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  }  else  {  toPattern  =  new  ParsePosition(0);  }	          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());    	non-compiled	[CE]  incompatible  types	11	None	replace
175	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  +  1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	add	                pos.setIndex(foundDescriptions.size()        -        1);        pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  +  1);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	4	5	add
176	[BUG]  [BUGGY]          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  +  1);  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  +  1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	                pos.setIndex(foundDescriptions.size()        -        1);        pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  +  1);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	4	5	add
177	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  -  1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	add	                pos.setIndex(foundDescriptions.size()        -        1);        pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()  -  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	5	add
178	[BUG]  [BUGGY]          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  -  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  -  1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	                pos.setIndex(foundDescriptions.size()        -        1);        pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()  -  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	5	add
179	[BUG]  [BUGGY]  pos.setIndex(foundDescriptions.size());  int  fmtCount  =  foundDescriptions.get(0);  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(foundDescriptions.size());  int  fmtCount  =  foundDescriptions.get(0);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(foundDescriptions.size());  int  fmtCount  =  foundDescriptions.get(0);	          pos.setIndex(foundDescriptions.size()    -    1);    int    fmtCount    =    foundDescriptions.size()    -    1;    	non-compiled	[CE]  incompatible  types	44	None	replace
180	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size());  case  END_FE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  case  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size());  case  END_FE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size());  case  END_FE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()    -    1);    case    END_FE:    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    	non-compiled	[CE]  orphaned  case	6	None	replace
181	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  case  END_FE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  case  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  case  END_FE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  case  END_FE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()    -    1);    case    END_FE:    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    	non-compiled	[CE]  orphaned  case	6	None	replace
182	[BUG]  [BUGGY]  String  c  =  toPattern.toCharArray();  Char[]  c  =  toPattern.toCharArray();  [CE]  incompatible  types  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  String  c  =  toPattern.toCharArray();  Char[]  c  =  toPattern.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	String  c  =  toPattern.toCharArray();  Char[]  c  =  toPattern.toCharArray();	  char[]    c    =    toPattern.toCharArray();    Char[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  incompatible  types	19	None	replace
183	[BUG]  [BUGGY]  char[]  c  =  formatDescription.toCharArray();  Char[]  c  =  toPattern.toCharArray();  [CE]  cannot  find  symbol  formatDescription  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char[]  c  =  formatDescription.toCharArray();  Char[]  c  =  toPattern.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char[]  c  =  formatDescription.toCharArray();  Char[]  c  =  toPattern.toCharArray();	  char[]    c    =    toPattern.toCharArray();    Char[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  cannot  find  symbol  formatDescription	19	None	replace
184	[BUG]  [BUGGY]  char[]  c  =  toPattern!=  null?  toPattern.toCharArray()  :  Collections.EMPTY_STRING;  [CE]  cannot  find  symbol  Collections  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char[]  c  =  toPattern!=  null?  toPattern.toCharArray()  :  Collections.EMPTY_STRING;  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char[]  c  =  toPattern!=  null?  toPattern.toCharArray()  :  Collections.EMPTY_STRING;	  char[]    c    =    foundDescriptions!=    null?    toPattern.toCharArray()    :    Collections.EMPTY_STRING;    	non-compiled	[CE]  cannot  find  symbol  Collections	59	None	replace
185	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  }  else  {  System.arraycopy(pattern,  0,  foundDescriptions,  0,  foundDescriptions.size());  }  [CE]  cannot  find  symbol  c  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(stripCustom!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  }  else  {  System.arraycopy(pattern,  0,  foundDescriptions,  0,  foundDescriptions.size());  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(stripCustom!=  null)  {  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  }  else  {  System.arraycopy(pattern,  0,  foundDescriptions,  0,  foundDescriptions.size());  }	          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());    }    else    {    pos.setIndex(foundDescriptions.size());    System.arraycopy(pattern,    0,    foundDescriptions,    0,    foundDescriptions.size());    	non-compiled	[CE]  cannot  find  symbol  c	13	None	replace
186	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  pos.setIndex(foundDescriptions.size());  }  else  {  pos.setIndex(foundDescriptions.size());  System.arraycopy(pattern,  0,  foundDescriptions,  0,  foundDescriptions.size());  }  [CE]  cannot  find  symbol  c  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(stripCustom!=  null)  {  pos.setIndex(foundDescriptions.size());  }  else  {  pos.setIndex(foundDescriptions.size());  System.arraycopy(pattern,  0,  foundDescriptions,  0,  foundDescriptions.size());  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(stripCustom!=  null)  {  pos.setIndex(foundDescriptions.size());  }  else  {  pos.setIndex(foundDescriptions.size());  System.arraycopy(pattern,  0,  foundDescriptions,  0,  foundDescriptions.size());  }	          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());    }    else    {    pos.setIndex(foundDescriptions.size());    System.arraycopy(pattern,    0,    foundDescriptions,    0,    foundDescriptions.size());    	non-compiled	[CE]  cannot  find  symbol  c	13	None	replace
187	[BUG]  [BUGGY]  pos.setIndex(new  ArrayList  <  Format>());  [CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(new  ArrayList  <  Format>());  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(new  ArrayList  <  Format>());	  pos.setIndex(findFormats.size());    	non-compiled	[CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;	67	None	replace
188	[BUG]  [BUGGY]  if(pos.getIndex()  <  foundDescriptions.size())  {  pos.setIndex(foundDescriptions.size());  }  [CE]  cannot  find  symbol  c  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(pos.getIndex()  <  foundDescriptions.size())  {  pos.setIndex(foundDescriptions.size());  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(pos.getIndex()  <  foundDescriptions.size())  {  pos.setIndex(foundDescriptions.size());  }	          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());    }    	non-compiled	[CE]  cannot  find  symbol  c	43	None	replace
189	[BUG]  [BUGGY]          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.get());  pos.setIndex(foundDescriptions.size());  [CE]  no  suitable  method  found  for  get()  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.get());  pos.setIndex(foundDescriptions.size());  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	                pos.setIndex(foundDescriptions.size());        pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.get());  pos.setIndex(foundDescriptions.size());	  	non-compiled	[CE]  no  suitable  method  found  for  get()	10	None	add
190	[BUG]  [BUGGY]          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  }  [CE]  illegal  start  of  type  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	                pos.setIndex(foundDescriptions.size());        pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());  pos.setIndex(foundDescriptions.size());  }	  	non-compiled	[CE]  illegal  start  of  type	10	None	add
191	[BUG]  [BUGGY]  pos.setIndex(foundDescriptions.size);  [CE]  size  has  private  access  in  ArrayList  [FE]        junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(foundDescriptions.size);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(foundDescriptions.size);	  pos.setIndex(foundDescriptions.length);    	non-compiled	[CE]  size  has  private  access  in  ArrayList	48	None	replace
192	[BUG]  [BUGGY]  pos.setIndex(index,  foundDescriptions);  [CE]  cannot  find  symbol  index  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(index,  foundDescriptions);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(index,  foundDescriptions);	  pos.setIndex(foundDescriptions);    	non-compiled	[CE]  cannot  find  symbol  index	47	None	replace
193	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  }  else  {  pos.setIndex(foundDescriptions.size());  }  [CE]  cannot  find  symbol  c  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  }  else  {  pos.setIndex(foundDescriptions.size());  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  }  else  {  pos.setIndex(foundDescriptions.size());  }	          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());    	non-compiled	[CE]  cannot  find  symbol  c	11	None	replace
194	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size());  }  else  {  FormatUtils.appendQuotedString(pattern,  pos);  }  [CE]  cannot  find  symbol  FormatUtils  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size());  }  else  {  FormatUtils.appendQuotedString(pattern,  pos);  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size());  }  else  {  FormatUtils.appendQuotedString(pattern,  pos);  }	          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  FormatUtils	5	None	replace
195	[BUG]  [BUGGY]  char[]  c  =  foundDescriptions!=  null?  toPattern  :  new  char[foundDescriptions.size()  ];  [CE]  incompatible  types  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char[]  c  =  foundDescriptions!=  null?  toPattern  :  new  char[foundDescriptions.size()  ];  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char[]  c  =  foundDescriptions!=  null?  toPattern  :  new  char[foundDescriptions.size()  ];	  char[]    c    =    foundDescriptions!=    null?    toPattern    :    foundDescriptions.toCharArray();    	non-compiled	[CE]  incompatible  types	58	None	replace
196	[BUG]  [BUGGY]  char[]  c  =  toPattern.toCharArray()  *  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char[]  c  =  toPattern.toCharArray()  *  1;  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char[]  c  =  toPattern.toCharArray()  *  1;	  char[]    c    =    toPattern.toCharArray()    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	51	None	replace
197	[BUG]  [BUGGY]  String  c  =  foundDescriptions!=  null?  toPattern  :  foundDescriptions.toCharArray();  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  String  c  =  foundDescriptions!=  null?  toPattern  :  foundDescriptions.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	String  c  =  foundDescriptions!=  null?  toPattern  :  foundDescriptions.toCharArray();	  String    c    =    foundDescriptions.toCharArray();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
198	[BUG]  [BUGGY]  char[]  c  =  this.format.toCharArray();  [CE]  cannot  find  symbol  format  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char[]  c  =  this.format.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char[]  c  =  this.format.toCharArray();	  char[]    c    =    format.toCharArray();    	non-compiled	[CE]  cannot  find  symbol  format	55	None	replace
199	[BUG]  [BUGGY]  char[]  c  =  toPattern!=  null?  pattern.toCharArray()  :  Collections.EMPTY_STRING;  [CE]  cannot  find  symbol  Collections  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char[]  c  =  toPattern!=  null?  pattern.toCharArray()  :  Collections.EMPTY_STRING;  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char[]  c  =  toPattern!=  null?  pattern.toCharArray()  :  Collections.EMPTY_STRING;	  char[]    c    =    foundDescriptions!=    null?    toPattern.toCharArray()    :    Collections.EMPTY_STRING;    	non-compiled	[CE]  cannot  find  symbol  Collections	59	None	replace
200	[BUG]  [BUGGY]  pos.setIndex(foundDescriptions.size());  System.arraycopy(pattern,  0,  foundDescriptions,  start,  pos.getIndex());  [CE]  cannot  find  symbol  start  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(foundDescriptions.size());  System.arraycopy(pattern,  0,  foundDescriptions,  start,  pos.getIndex());  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(foundDescriptions.size());  System.arraycopy(pattern,  0,  foundDescriptions,  start,  pos.getIndex());	          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());    }    else    {    pos.setIndex(foundDescriptions.size());    System.arraycopy(pattern,    0,    foundDescriptions,    start,    pos.getIndex());    	non-compiled	[CE]  cannot  find  symbol  start	14	None	replace
201	[BUG]  [BUGGY]  pos.setIndex(foundDescriptions.size()  -  1);  System.arraycopy(pattern,  0,  foundDescriptions,  start,  pos.getIndex());  [CE]  cannot  find  symbol  start  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(foundDescriptions.size()  -  1);  System.arraycopy(pattern,  0,  foundDescriptions,  start,  pos.getIndex());  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(foundDescriptions.size()  -  1);  System.arraycopy(pattern,  0,  foundDescriptions,  start,  pos.getIndex());	          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());    }    else    {    pos.setIndex(foundDescriptions.size());    System.arraycopy(pattern,    0,    foundDescriptions,    start,    pos.getIndex());    	non-compiled	[CE]  cannot  find  symbol  start	14	None	replace
202	[BUG]  [BUGGY]  pos.setIndex(foundDescriptions.size()  +  1);  System.arraycopy(pattern,  0,  foundDescriptions,  start,  pos.getIndex());  [CE]  cannot  find  symbol  start  [FE]                  junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(foundDescriptions.size()  +  1);  System.arraycopy(pattern,  0,  foundDescriptions,  start,  pos.getIndex());  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(foundDescriptions.size()  +  1);  System.arraycopy(pattern,  0,  foundDescriptions,  start,  pos.getIndex());	          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());    }    else    {    pos.setIndex(foundDescriptions.size());    System.arraycopy(pattern,    0,    foundDescriptions,    start,    pos.getIndex());    	non-compiled	[CE]  cannot  find  symbol  start	14	None	replace
203	[BUG]  [BUGGY]  char[]  c  =  foundDescriptions,  pattern.toCharArray();  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char[]  c  =  foundDescriptions,  pattern.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char[]  c  =  foundDescriptions,  pattern.toCharArray();	  char[]    c    =    foundDescriptions,    stripCustom.toCharArray();    	non-compiled	[CE]  ';'  expected	36	None	replace
204	[BUG]  [BUGGY]  char[]  c  =  iterable.toCharArray();  [CE]  cannot  find  symbol  iterable  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char[]  c  =  iterable.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char[]  c  =  iterable.toCharArray();	  char[]    c    =    it.toCharArray();    	non-compiled	[CE]  cannot  find  symbol  iterable	50	None	replace
205	[BUG]  [BUGGY]  char[]  c  =  iteration.toCharArray();  [CE]  cannot  find  symbol  iteration  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char[]  c  =  iteration.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char[]  c  =  iteration.toCharArray();	  char[]    c    =    it.toCharArray();    	non-compiled	[CE]  cannot  find  symbol  iteration	50	None	replace
206	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  int  fmtCount  =  foundDescriptions.size();  pos.setIndex(foundDescriptions.size());  }  else  {  FormatUtils.appendQuotedString(pattern,  [CE]  '.class'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  int  fmtCount  =  foundDescriptions.size();  pos.setIndex(foundDescriptions.size());  }  else  {  FormatUtils.appendQuotedString(pattern,  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(foundDescriptions!=  null)  {  pos.setIndex(foundDescriptions.size());  int  fmtCount  =  foundDescriptions.size();  pos.setIndex(foundDescriptions.size());  }  else  {  FormatUtils.appendQuotedString(pattern,	          pos.setIndex(foundDescriptions.size());    int    fmtCount    =    foundDescriptions.size();    pos.setIndex(foundDescriptions.size());    	non-compiled	[CE]  '.class'  expected	66	None	replace
207	[BUG]  [BUGGY]  pos.setIndex(int);  [CE]  '.class'  expected  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(int);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(int);	  pos.setIndex(fmtCount);    	non-compiled	[CE]  '.class'  expected	1	None	replace
208	[BUG]  [BUGGY]  char[]  c  =  stripCustom.toCharArray();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char[]  c  =  stripCustom.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char[]  c  =  stripCustom.toCharArray();	  char[]    c    =    toPattern.toCharArray();    char[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
209	[BUG]  [BUGGY]  if(pos.getIndex()  >  0)  {  pos.setIndex(0);  pos.setIndex(1);  }  [CE]  cannot  find  symbol  c  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(pos.getIndex()  >  0)  {  pos.setIndex(0);  pos.setIndex(1);  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(pos.getIndex()  >  0)  {  pos.setIndex(0);  pos.setIndex(1);  }	          pos.setIndex(0);    pos.setIndex(0);    	non-compiled	[CE]  cannot  find  symbol  c	22	None	replace
210	[BUG]  [BUGGY]  if(pos.getIndex()  >  0)  {  pos.setIndex(0);  pos.setIndex(0);  }  [CE]  cannot  find  symbol  c  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(pos.getIndex()  >  0)  {  pos.setIndex(0);  pos.setIndex(0);  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(pos.getIndex()  >  0)  {  pos.setIndex(0);  pos.setIndex(0);  }	          pos.setIndex(0);    pos.setIndex(0);    	non-compiled	[CE]  cannot  find  symbol  c	22	None	replace
211	[BUG]  [BUGGY]          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  -  1,  pos);  pos.setIndex(foundDescriptions.size()  -  1);  [CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  -  1,  pos);  pos.setIndex(foundDescriptions.size()  -  1);  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	                pos.setIndex(foundDescriptions.size()        -        1);        pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()  -  1,  pos);  pos.setIndex(foundDescriptions.size()  -  1);	  	non-compiled	[CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;	4	None	add
212	[BUG]  [BUGGY]  pos.setIndex(data.size());  int  fmtCount  =  foundDescriptions.size();  [CE]  cannot  find  symbol  data  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  pos.setIndex(data.size());  int  fmtCount  =  foundDescriptions.size();  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	pos.setIndex(data.size());  int  fmtCount  =  foundDescriptions.size();	          pos.setIndex(foundDescriptions.size()    -    1);    int    fmtCount    =    findDescriptions.size()    -    1;    	non-compiled	[CE]  cannot  find  symbol  data	45	None	replace
213	[BUG]  [BUGGY]  char[]  c  =  it.formatDescription.toCharArray(pos);  [CE]  package  it  does  not  exist  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char[]  c  =  it.formatDescription.toCharArray(pos);  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char[]  c  =  it.formatDescription.toCharArray(pos);	  char[]    c    =    it.formatDescription.toCharArray();    	non-compiled	[CE]  package  it  does  not  exist	62	None	replace
214	[BUG]  [BUGGY]  String[]  c  =  foundDescriptions  ==  null?  toPattern  :  foundDescriptions.toCharArray();  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  String[]  c  =  foundDescriptions  ==  null?  toPattern  :  foundDescriptions.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	String[]  c  =  foundDescriptions  ==  null?  toPattern  :  foundDescriptions.toCharArray();	  String[]    c    =    foundDescriptions.toCharArray();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
215	[BUG]  [BUGGY]  int  c  =  pattern.toCharArray();  Character[]  c  =  toPattern.toCharArray();  [CE]  incompatible  types  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  int  c  =  pattern.toCharArray();  Character[]  c  =  toPattern.toCharArray();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	int  c  =  pattern.toCharArray();  Character[]  c  =  toPattern.toCharArray();	  char[]    c    =    toPattern.toCharArray();    Character[]    c    =    toPattern.toCharArray();    	non-compiled	[CE]  incompatible  types	18	None	replace
216	[BUG]  [BUGGY]  if(pos.getIndex()  <  foundDescriptions.size())  {  pos.setIndex(foundDescriptions.size()  -  1);  }  [CE]  cannot  find  symbol  c  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(pos.getIndex()  <  foundDescriptions.size())  {  pos.setIndex(foundDescriptions.size()  -  1);  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(pos.getIndex()  <  foundDescriptions.size())  {  pos.setIndex(foundDescriptions.size()  -  1);  }	          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()    -    1);    }    	non-compiled	[CE]  cannot  find  symbol  c	46	None	replace
217	[BUG]  [BUGGY]  if(pos.getIndex()  <  foundDescriptions.size())  {  pos.setIndex(foundDescriptions.size());  }  else  {  pos.setIndex(foundDescriptions.size());  }  [CE]  cannot  find  symbol  c  [FE]          junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(pos.getIndex()  <  foundDescriptions.size())  {  pos.setIndex(foundDescriptions.size());  }  else  {  pos.setIndex(foundDescriptions.size());  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(pos.getIndex()  <  foundDescriptions.size())  {  pos.setIndex(foundDescriptions.size());  }  else  {  pos.setIndex(foundDescriptions.size());  }	          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());    }    else    {    pos.setIndex(foundDescriptions.size());    	non-compiled	[CE]  cannot  find  symbol  c	12	None	replace
218	[BUG]  [BUGGY]  if(pos.getIndex()  <  foundDescriptions.size())  {  pos.setIndex(foundDescriptions.size());  }  else  {  pos.setIndex(foundDescriptions.size()  +  1);  }  [CE]  cannot  find  symbol  c  [FE]            junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(pos.getIndex()  <  foundDescriptions.size())  {  pos.setIndex(foundDescriptions.size());  }  else  {  pos.setIndex(foundDescriptions.size()  +  1);  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(pos.getIndex()  <  foundDescriptions.size())  {  pos.setIndex(foundDescriptions.size());  }  else  {  pos.setIndex(foundDescriptions.size()  +  1);  }	          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());    }    else    {    pos.setIndex(foundDescriptions.size());    	non-compiled	[CE]  cannot  find  symbol  c	12	None	replace
219	[BUG]  [BUGGY]  if(pos.getIndex()  <  foundDescriptions.size())  {  pos.setIndex(foundDescriptions.size());  }  else  {  pos.setIndex(0);  }  [CE]  cannot  find  symbol  c  [FE]              junit.framework.AssertionFailedError:  registry      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(pos.getIndex()  <  foundDescriptions.size())  {  pos.setIndex(foundDescriptions.size());  }  else  {  pos.setIndex(0);  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(pos.getIndex()  <  foundDescriptions.size())  {  pos.setIndex(foundDescriptions.size());  }  else  {  pos.setIndex(0);  }	          pos.setIndex(foundDescriptions.size());    pos.setIndex(foundDescriptions.size());    }    else    {    pos.setIndex(foundDescriptions.size());    	non-compiled	[CE]  cannot  find  symbol  c	12	None	replace
220	[BUG]  [BUGGY]  if(start  ==  0)  {  pos.setIndex(foundDescriptions.size()  -  1);  }  else  {  pos.setIndex(foundDescriptions.size()  -  1);  }  [CE]  cannot  find  symbol  start  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(start  ==  0)  {  pos.setIndex(foundDescriptions.size()  -  1);  }  else  {  pos.setIndex(foundDescriptions.size()  -  1);  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(start  ==  0)  {  pos.setIndex(foundDescriptions.size()  -  1);  }  else  {  pos.setIndex(foundDescriptions.size()  -  1);  }	          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()    -    1);    }    else    {    pos.setIndex(foundDescriptions.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  start	8	None	replace
221	[BUG]  [BUGGY]  if(start  ==  0)  {  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  -  1);  }  else  {  pos.setIndex(foundDescriptions.size());  }  [CE]  cannot  find  symbol  start  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(start  ==  0)  {  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  -  1);  }  else  {  pos.setIndex(foundDescriptions.size());  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(start  ==  0)  {  pos.setIndex(foundDescriptions.size()  -  1);  pos.setIndex(foundDescriptions.size()  -  1);  }  else  {  pos.setIndex(foundDescriptions.size());  }	          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()    -    1);    }    else    {    pos.setIndex(foundDescriptions.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  start	8	None	replace
222	[BUG]  [BUGGY]  if(start  ==  0)  {  pos.setIndex(foundDescriptions.size()  -  1);  }  else  {  pos.setIndex(foundDescriptions.size());  }  [CE]  cannot  find  symbol  start  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  if(start  ==  0)  {  pos.setIndex(foundDescriptions.size()  -  1);  }  else  {  pos.setIndex(foundDescriptions.size());  }  [BUGGY]      char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	if(start  ==  0)  {  pos.setIndex(foundDescriptions.size()  -  1);  }  else  {  pos.setIndex(foundDescriptions.size());  }	          pos.setIndex(foundDescriptions.size()    -    1);    pos.setIndex(foundDescriptions.size()    -    1);    }    else    {    pos.setIndex(foundDescriptions.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  start	8	None	replace
223	[BUG]  [BUGGY]  char[]  c  =  pattern.toString();  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  return;  }  ArrayList<Format>  foundFormats  =  new  ArrayList<Format>();  ArrayList<String>  foundDescriptions  =  new  ArrayList<String>();  StringBuilder  stripCustom  =  new  StringBuilder(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);      [BUGGY]  char[]  c  =  pattern.toString();  [BUGGY]      int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	156	156	1	replace	char[]  c  =  pattern.toString();	  char[]    c    =    toPattern.toString();    	non-compiled	[CE]  incompatible  types	20	None	replace
