bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [CE]  cannot  find  symbol  formatDescription  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	appendQuotedString(pattern,  pos,  stripCustom,  true);  break;	      if(c[pos.getIndex()]    ==    START_FE)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  cannot  find  symbol  formatDescription	9	None	replace
2	[BUG]  [BUGGY]  if(c[pos.getIndex()  -  1]  ==  START_FE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(c[pos.getIndex()  -  1]  ==  START_FE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(c[pos.getIndex()  -  1]  ==  START_FE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }	      if(c[pos.getIndex()]    ==    START_FE)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	9	None	replace
3	[BUG]  [BUGGY]  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	appendQuotedString(pattern,  start,  stripCustom,  true);  break;	      if(c[pos.getIndex()]    ==    START_FE)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	9	None	replace
4	[BUG]  [BUGGY]  if(c[pos.getIndex()  ]  ==  START_FE)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  cannot  find  symbol  formatDescription  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(c[pos.getIndex()  ]  ==  START_FE)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(c[pos.getIndex()  ]  ==  START_FE)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	      if(c[pos.getIndex()]    ==    START_FE)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  cannot  find  symbol  formatDescription	9	None	replace
5	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  char[]  c  =  pattern.toCharArray();  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	char[]  c  =  pattern.toCharArray();	      	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	6	None	replace
6	[BUG]  [BUGGY]  char  c  =  pattern.charAt(start);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  char  c  =  pattern.charAt(start);  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	char  c  =  pattern.charAt(start);	      	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	6	None	replace
7	[BUG]  [BUGGY]  char[]  c  =  pattern.getQuotedString();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  char[]  c  =  pattern.getQuotedString();  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	char[]  c  =  pattern.getQuotedString();	      	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	6	None	replace
8	[BUG]  [BUGGY]  char[]  c  =  pattern.getChars(start,  index);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  char[]  c  =  pattern.getChars(start,  index);  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	char[]  c  =  pattern.getChars(start,  index);	      	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	6	None	replace
9	[BUG]  [BUGGY]  String  formatDescription  =  getFormat(DUMMY_PATTERN,  start);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  getFormat(DUMMY_PATTERN,  start);  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String  formatDescription  =  getFormat(DUMMY_PATTERN,  start);	  String    formatDescription    =    getFormat(DUMMY_PATTERN);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	5	None	replace
10	[BUG]  [BUGGY]  String  formatDescription  =  getFormat(END_FE);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  getFormat(END_FE);  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String  formatDescription  =  getFormat(END_FE);	  String    formatDescription    =    getFormat(DUMMY_PATTERN);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	5	None	replace
11	[BUG]  [BUGGY]  String  formatDescription  =  getFormat(DEFAULT_QUOTE);  [CE]  cannot  find  symbol  DEFAULT_QUOTE  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  getFormat(DEFAULT_QUOTE);  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String  formatDescription  =  getFormat(DEFAULT_QUOTE);	  String    formatDescription    =    getFormat(DUMMY_PATTERN);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_QUOTE	5	None	replace
12	[BUG]  [BUGGY]  String  formatDescription  =  getFormat(DEFAULT_PATTERN);  [CE]  cannot  find  symbol  DEFAULT_PATTERN  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  getFormat(DEFAULT_PATTERN);  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String  formatDescription  =  getFormat(DEFAULT_PATTERN);	  String    formatDescription    =    getFormat(DUMMY_PATTERN);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_PATTERN	5	None	replace
13	[BUG]  [BUGGY]  if(start  ==  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(start  ==  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(start  ==  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    if(c[pos.getIndex()]    ==    START_FE)    {    format    =    getFormat(formatDescription);    }    	non-compiled	[CE]  orphaned  default	20	None	replace
14	[BUG]  [BUGGY]  if(pos.getIndex()  >=  start)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(pos.getIndex()  >=  start)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(pos.getIndex()  >=  start)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    if(c[pos.getIndex()]    ==    START_FE)    {    format    =    getFormat(formatDescription);    }    	non-compiled	[CE]  orphaned  default	20	None	replace
15	[BUG]  [BUGGY]  if(pos.getIndex()  <  =  index)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(pos.getIndex()  <  =  index)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(pos.getIndex()  <  =  index)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    if(c[pos.getIndex()]    ==    START_FE)    {    format    =    getFormat(formatDescription);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
16	[BUG]  [BUGGY]  if(pos.getIndex()  <  =  START_FE)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(pos.getIndex()  <  =  START_FE)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(pos.getIndex()  <  =  START_FE)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    if(c[pos.getIndex()]    ==    START_FE)    {    format    =    getFormat(formatDescription);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
17	[BUG]  [BUGGY]  if(start  ==  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  parseFormatDescription(pattern,  next(pos));  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(start  ==  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  parseFormatDescription(pattern,  next(pos));  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(start  ==  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  parseFormatDescription(pattern,  next(pos));  }	      if(c[pos.getIndex()]    ==    START_FE)    {    if(c[pos.getIndex()]    ==    START_FMT)    {    format    =    parseFormatDescription(pattern,    next(pos));    }    	non-compiled	[CE]  orphaned  default	17	None	replace
18	[BUG]  [BUGGY]  if(pos.getIndex()  >=  start)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  parseFormatDescription(pattern,  next(pos));  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(pos.getIndex()  >=  start)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  parseFormatDescription(pattern,  next(pos));  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(pos.getIndex()  >=  start)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  parseFormatDescription(pattern,  next(pos));  }	      if(c[pos.getIndex()]    ==    START_FE)    {    if(c[pos.getIndex()]    ==    START_FMT)    {    format    =    parseFormatDescription(pattern,    next(pos));    }    	non-compiled	[CE]  orphaned  default	17	None	replace
19	[BUG]  [BUGGY]  Format  format  =  parseFormatDescription(pattern,  next(pos));  [CE]  variable  format  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  Format  format  =  parseFormatDescription(pattern,  next(pos));  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	Format  format  =  parseFormatDescription(pattern,  next(pos));	      if(c[pos.getIndex()]    ==    START_FE)    {    if(c[pos.getIndex()]    ==    START_FMT)    {    format    =    parseFormatDescription(pattern,    next(pos));    }    	non-compiled	[CE]  variable  format  is  already  defined  in  method  applyPattern(String)	17	None	replace
20	[BUG]  [BUGGY]  if(pos.getIndex()  <  start)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  parseFormatDescription(pattern,  next(pos));  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(pos.getIndex()  <  start)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  parseFormatDescription(pattern,  next(pos));  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(pos.getIndex()  <  start)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  parseFormatDescription(pattern,  next(pos));  }	      if(c[pos.getIndex()]    ==    START_FE)    {    if(c[pos.getIndex()]    ==    START_FMT)    {    format    =    parseFormatDescription(pattern,    next(pos));    }    	non-compiled	[CE]  orphaned  default	17	None	replace
21	[BUG]  [BUGGY]  char  c  =  readArgumentIndex(pattern,  next(pos));  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  char  c  =  readArgumentIndex(pattern,  next(pos));  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	char  c  =  readArgumentIndex(pattern,  next(pos));	      int    c    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	21	None	replace
22	[BUG]  [BUGGY]  int  c  =  readArgumentIndex(start,  next(pos));  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  int  c  =  readArgumentIndex(start,  next(pos));  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	int  c  =  readArgumentIndex(start,  next(pos));	      int    c    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	21	None	replace
23	[BUG]  [BUGGY]  int  c  =  readArgumentIndex(pattern,  start,  next(pos));  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                    junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  int  c  =  readArgumentIndex(pattern,  start,  next(pos));  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	int  c  =  readArgumentIndex(pattern,  start,  next(pos));	      int    c    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	21	None	replace
24	[BUG]  [BUGGY]  int  c  =  readArgumentIndex(pattern,  next(pos),  start);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                      junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  int  c  =  readArgumentIndex(pattern,  next(pos),  start);  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	int  c  =  readArgumentIndex(pattern,  next(pos),  start);	      int    c    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	21	None	replace
25	[BUG]  [BUGGY]  if(start  >=  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }  [CE]  ']'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(start  >=  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(start  >=  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }	      if(index    >=    0)    {    if(c[pos.getIndex()    -    1)    {    stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ']'  expected	13	None	replace
26	[BUG]  [BUGGY]  if(start  ==  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }  [CE]  ']'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(start  ==  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(start  ==  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }	      if(index    >=    0)    {    if(c[pos.getIndex()    -    1)    {    stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ']'  expected	13	None	replace
27	[BUG]  [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }  [CE]  ']'  expected  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(index  >=  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }	      if(index    >=    0)    {    if(c[pos.getIndex()    -    1)    {    stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ']'  expected	13	None	replace
28	[BUG]  [BUGGY]  if(c[pos.getIndex()  -  1]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(c[pos.getIndex()  -  1]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(c[pos.getIndex()  -  1]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	11	None	replace
29	[BUG]  [BUGGY]  if(pos.getIndex()  >=  index)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(pos.getIndex()  >=  index)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(pos.getIndex()  >=  index)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	11	None	replace
30	[BUG]  [BUGGY]  if(c[pos.getIndex()  ]  ==  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                    junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(c[pos.getIndex()  ]  ==  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(c[pos.getIndex()  ]  ==  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	11	None	replace
31	[BUG]  [BUGGY]  if(pos.getIndex()  <  index)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                      junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(pos.getIndex()  <  index)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(pos.getIndex()  <  index)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	11	None	replace
32	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  ESCAPED_QUOTE;  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	add	String  formatDescription  =  ESCAPED_QUOTE;	  String    formatDescription    =    DUMMY_PATTERN;    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	2	1	replace
33	[BUG]  [BUGGY]  String  formatDescription  =  ESCAPED_QUOTE;  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  ESCAPED_QUOTE;  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String  formatDescription  =  ESCAPED_QUOTE;	  String    formatDescription    =    DUMMY_PATTERN;    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	2	1	replace
34	[BUG]  [BUGGY]  String  formatDescription  =  DEFAULT_QUOTE;  [CE]  cannot  find  symbol  DEFAULT_QUOTE  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  DEFAULT_QUOTE;  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String  formatDescription  =  DEFAULT_QUOTE;	  String    formatDescription    =    DUMMY_PATTERN;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_QUOTE	2	None	replace
35	[BUG]  [BUGGY]  String  formatDescription  =  START_FE;  [CE]  incompatible  types  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  START_FE;  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String  formatDescription  =  START_FE;	  String    formatDescription    =    DUMMY_PATTERN;    	non-compiled	[CE]  incompatible  types	2	None	replace
36	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  ESCAPED_QUOTE.toString();  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	add	String  formatDescription  =  ESCAPED_QUOTE.toString();	  String    formatDescription    =    DUMMY_PATTERN;    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	2	1	replace
37	[BUG]  [BUGGY]  String  formatDescription  =  ESCAPED_QUOTE.toString();  [FE]  junit.framework.AssertionFailedError:  registry  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  ESCAPED_QUOTE.toString();  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String  formatDescription  =  ESCAPED_QUOTE.toString();	  String    formatDescription    =    DUMMY_PATTERN;    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	2	1	replace
38	[BUG]  [BUGGY]  if(c[pos.getIndex()  -  1]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(c[pos.getIndex()  -  1]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(c[pos.getIndex()  -  1]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	7	None	replace
39	[BUG]  [BUGGY]  if(c[pos.getIndex()  ]  ==  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(c[pos.getIndex()  ]  ==  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(c[pos.getIndex()  ]  ==  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	7	None	replace
40	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  cannot  find  symbol  formatDescription  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  cannot  find  symbol  formatDescription	7	None	replace
41	[BUG]  [BUGGY]  if(pos.getIndex()  >=  index)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(pos.getIndex()  >=  index)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(pos.getIndex()  >=  index)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	7	None	replace
42	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  format.toString();  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	add	String  formatDescription  =  format.toString();	  String    formatDescription    =    DUMMY_PATTERN.toString();    	compilable	  [FE]  NullPointerException  	4	5	replace
43	[BUG]  [BUGGY]  String  formatDescription  =  format.toString();  [FE]  NullPointerException  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  format.toString();  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String  formatDescription  =  format.toString();	  String    formatDescription    =    DUMMY_PATTERN.toString();    	compilable	  [FE]  NullPointerException  	4	5	replace
44	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  pattern.toString();  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	add	String  formatDescription  =  pattern.toString();	  String    formatDescription    =    DUMMY_PATTERN.toString();    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	4	1	replace
45	[BUG]  [BUGGY]  String  formatDescription  =  pattern.toString();  [FE]  junit.framework.AssertionFailedError:  registry  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  pattern.toString();  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String  formatDescription  =  pattern.toString();	  String    formatDescription    =    DUMMY_PATTERN.toString();    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	4	1	replace
46	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  c.toString();  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	add	String  formatDescription  =  c.toString();	  String    formatDescription    =    DUMMY_PATTERN.toString();    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	4	1	replace
47	[BUG]  [BUGGY]  String  formatDescription  =  c.toString();  [FE]  junit.framework.AssertionFailedError:  registry  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  c.toString();  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String  formatDescription  =  c.toString();	  String    formatDescription    =    DUMMY_PATTERN.toString();    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	4	1	replace
48	[BUG]  [BUGGY]  String  formatDescription  =  this.format.toString();  [CE]  cannot  find  symbol  format  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  this.format.toString();  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String  formatDescription  =  this.format.toString();	  String    formatDescription    =    DUMMY_PATTERN.toString();    	non-compiled	[CE]  cannot  find  symbol  format	4	None	replace
49	[BUG]  [BUGGY]  if(c[pos.getIndex()  ]  ==  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(c[pos.getIndex()  ]  ==  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(c[pos.getIndex()  ]  ==  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	8	None	replace
50	[BUG]  [BUGGY]  if(c[pos.getIndex()  -  1]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(c[pos.getIndex()  -  1]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(c[pos.getIndex()  -  1]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	8	None	replace
51	[BUG]  [BUGGY]  if(pos.getIndex()  <  index)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(pos.getIndex()  <  index)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(pos.getIndex()  <  index)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	8	None	replace
52	[BUG]  [BUGGY]  if(pos.getIndex()  <  index)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(pos.getIndex()  <  index)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(pos.getIndex()  <  index)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
53	[BUG]  [BUGGY]  if(c[pos.getIndex()  ]  ==  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(c[pos.getIndex()  ]  ==  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(c[pos.getIndex()  ]  ==  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	10	None	replace
54	[BUG]  [BUGGY]  if(c[pos.getIndex()  -  1]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(c[pos.getIndex()  -  1]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(c[pos.getIndex()  -  1]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	10	None	replace
55	[BUG]  [BUGGY]  if(pos.getIndex()  >=  index)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(pos.getIndex()  >=  index)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(pos.getIndex()  >=  index)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	10	None	replace
56	[BUG]  [BUGGY]  if(start  >=  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(start  >=  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(DUMMY_PATTERN);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(start  >=  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(DUMMY_PATTERN);  }	      if(index    >=    0)    {    if(c[pos.getIndex()]    ==    START_FE)    {    format    =    getFormat(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	12	None	replace
57	[BUG]  [BUGGY]  if(start  ==  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(start  ==  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(DUMMY_PATTERN);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(start  ==  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(DUMMY_PATTERN);  }	      if(index    >=    0)    {    if(c[pos.getIndex()]    ==    START_FE)    {    format    =    getFormat(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	12	None	replace
58	[BUG]  [BUGGY]  if(start!=  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(start!=  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(DUMMY_PATTERN);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(start!=  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(DUMMY_PATTERN);  }	      if(index    >=    0)    {    if(c[pos.getIndex()]    ==    START_FE)    {    format    =    getFormat(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	12	None	replace
59	[BUG]  [BUGGY]  if(start  >=  0  ||  index  >=  c.length)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(start  >=  0  ||  index  >=  c.length)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(DUMMY_PATTERN);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(start  >=  0  ||  index  >=  c.length)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(DUMMY_PATTERN);  }	      if(index    >=    0)    {    if(c[pos.getIndex()]    ==    START_FE)    {    format    =    getFormat(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	12	None	replace
60	[BUG]  [BUGGY]  String  formatDescription  =  DUMMY_PATTERN.toString();  String  formatDescription  =  DUMMY_PATTERN.toString();  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  DUMMY_PATTERN.toString();  String  formatDescription  =  DUMMY_PATTERN.toString();  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String    formatDescription    =    DUMMY_PATTERN.toString();    String  formatDescription  =  DUMMY_PATTERN.toString();	  	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	3	None	add
61	[BUG]  [BUGGY]  String  formatDescription  =  DUMMY_PATTERN.toString();  Format  format  =  DUMMY_PATTERN.toString();  [CE]  variable  format  is  already  defined  in  method  applyPattern(String)  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  DUMMY_PATTERN.toString();  Format  format  =  DUMMY_PATTERN.toString();  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String    formatDescription    =    DUMMY_PATTERN.toString();    Format  format  =  DUMMY_PATTERN.toString();	  	non-compiled	[CE]  variable  format  is  already  defined  in  method  applyPattern(String)	3	None	add
62	[BUG]  [BUGGY]  String  formatDescription  =  DUMMY_PATTERN.toString();  char[]  c  =  pattern.toPattern();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  DUMMY_PATTERN.toString();  char[]  c  =  pattern.toPattern();  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String    formatDescription    =    DUMMY_PATTERN.toString();    char[]  c  =  pattern.toPattern();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	3	None	add
63	[BUG]  [BUGGY]  String  formatDescription  =  DUMMY_PATTERN.toString();  char[]  c  =  pattern.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  DUMMY_PATTERN.toString();  char[]  c  =  pattern.toCharArray();  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String    formatDescription    =    DUMMY_PATTERN.toString();    char[]  c  =  pattern.toCharArray();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	3	None	add
64	[BUG]  [BUGGY]  String  formatDescription  =  DUMMY_PATTERN.toString();  char[]  c  =  getFormat(DUMMY_PATTERN);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  DUMMY_PATTERN.toString();  char[]  c  =  getFormat(DUMMY_PATTERN);  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String    formatDescription    =    DUMMY_PATTERN.toString();    char[]  c  =  getFormat(DUMMY_PATTERN);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	3	None	add
65	[BUG]  [BUGGY]  String  formatDescription  =  END_FE;  [CE]  incompatible  types  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  END_FE;  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String  formatDescription  =  END_FE;	  String    formatDescription    =    DUMMY_QUOTE;    	non-compiled	[CE]  incompatible  types	16	None	replace
66	[BUG]  [BUGGY]  if(start  >=  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ']'  expected  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(start  >=  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(start  >=  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(DUMMY_PATTERN);  }	      if(index    >=    0)    {    if(c[pos.getIndex()    -    1)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ']'  expected	15	None	replace
67	[BUG]  [BUGGY]  if(start  ==  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ']'  expected  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(start  ==  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(start  ==  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(DUMMY_PATTERN);  }	      if(index    >=    0)    {    if(c[pos.getIndex()    -    1)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ']'  expected	15	None	replace
68	[BUG]  [BUGGY]  if(index  <  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ']'  expected  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(index  <  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(index  <  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(DUMMY_PATTERN);  }	      if(index    >=    0)    {    if(c[pos.getIndex()    -    1)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ']'  expected	15	None	replace
69	[BUG]  [BUGGY]  String  formatDescription  =  DUMMY_PATTERN;  String  formatDescription  =  DUMMY_PATTERN;  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  DUMMY_PATTERN;  String  formatDescription  =  DUMMY_PATTERN;  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String    formatDescription    =    DUMMY_PATTERN;    String  formatDescription  =  DUMMY_PATTERN;	  	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	1	None	add
70	[BUG]  [BUGGY]  String  formatDescription  =  DUMMY_PATTERN;  Format  format  =  DUMMY_PATTERN;  [CE]  variable  format  is  already  defined  in  method  applyPattern(String)  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  DUMMY_PATTERN;  Format  format  =  DUMMY_PATTERN;  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String    formatDescription    =    DUMMY_PATTERN;    Format  format  =  DUMMY_PATTERN;	  	non-compiled	[CE]  variable  format  is  already  defined  in  method  applyPattern(String)	1	None	add
71	[BUG]  [BUGGY]  String  formatDescription  =  DUMMY_PATTERN;  char[]  c  =  pattern.toCharArray();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  DUMMY_PATTERN;  char[]  c  =  pattern.toCharArray();  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String    formatDescription    =    DUMMY_PATTERN;    char[]  c  =  pattern.toCharArray();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	1	None	add
72	[BUG]  [BUGGY]  String  formatDescription  =  DUMMY_PATTERN;  char[]  c  =  pattern.toPattern();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  DUMMY_PATTERN;  char[]  c  =  pattern.toPattern();  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String    formatDescription    =    DUMMY_PATTERN;    char[]  c  =  pattern.toPattern();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	1	None	add
73	[BUG]  [BUGGY]  String  formatDescription  =  DUMMY_PATTERN;  char[]  c  =  pattern.toPattern(start);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  DUMMY_PATTERN;  char[]  c  =  pattern.toPattern(start);  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String    formatDescription    =    DUMMY_PATTERN;    char[]  c  =  pattern.toPattern(start);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	1	None	add
74	[BUG]  [BUGGY]  if(start  >=  0)  {  if(c[pos.getIndex()  -  1]  ==  START_FE)  {  format  =  getFormat(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(start  >=  0)  {  if(c[pos.getIndex()  -  1]  ==  START_FE)  {  format  =  getFormat(DUMMY_PATTERN);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(start  >=  0)  {  if(c[pos.getIndex()  -  1]  ==  START_FE)  {  format  =  getFormat(DUMMY_PATTERN);  }	      if(index    >=    0)    {    if(c[pos.getIndex()    -    1]    ==    START_FE)    {    format    =    getFormat(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	14	None	replace
75	[BUG]  [BUGGY]  if(start  ==  0)  {  if(c[pos.getIndex()  -  1]  ==  START_FE)  {  format  =  getFormat(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(start  ==  0)  {  if(c[pos.getIndex()  -  1]  ==  START_FE)  {  format  =  getFormat(DUMMY_PATTERN);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(start  ==  0)  {  if(c[pos.getIndex()  -  1]  ==  START_FE)  {  format  =  getFormat(DUMMY_PATTERN);  }	      if(index    >=    0)    {    if(c[pos.getIndex()    -    1]    ==    START_FE)    {    format    =    getFormat(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	14	None	replace
76	[BUG]  [BUGGY]  if(pos.getIndex()  <  END_FE)  {  if(c[pos.getIndex()]  ==  END_FE)  {  format  =  getFormat(formatDescription);  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(pos.getIndex()  <  END_FE)  {  if(c[pos.getIndex()]  ==  END_FE)  {  format  =  getFormat(formatDescription);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(pos.getIndex()  <  END_FE)  {  if(c[pos.getIndex()]  ==  END_FE)  {  format  =  getFormat(formatDescription);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    if(c[pos.getIndex()]    ==    START_FMT)    {    format    =    getFormat(formatDescription);    }    	non-compiled	[CE]  orphaned  default	19	None	replace
77	[BUG]  [BUGGY]  if(pos.getIndex()  <  END_FE)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(pos.getIndex()  <  END_FE)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(pos.getIndex()  <  END_FE)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    if(c[pos.getIndex()]    ==    START_FMT)    {    format    =    getFormat(formatDescription);    }    	non-compiled	[CE]  orphaned  default	19	None	replace
78	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  toPattern.toString();  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	add	String  formatDescription  =  toPattern.toString();	  String    formatDescription    =    DUMMY_PATTERN.toString();    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	4	1	replace
79	[BUG]  [BUGGY]  String  formatDescription  =  toPattern.toString();  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  toPattern.toString();  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String  formatDescription  =  toPattern.toString();	  String    formatDescription    =    DUMMY_PATTERN.toString();    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	4	1	replace
80	[BUG]  [BUGGY]  String  formatDescription  =  it.toString();  [CE]  cannot  find  symbol  it  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  it.toString();  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String  formatDescription  =  it.toString();	  String    formatDescription    =    DUMMY_PATTERN.toString();    	non-compiled	[CE]  cannot  find  symbol  it	4	None	replace
81	[BUG]  [BUGGY]  String  formatDescription  =  FormatUtils.toString(end);  [CE]  cannot  find  symbol  end  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  FormatUtils.toString(end);  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String  formatDescription  =  FormatUtils.toString(end);	  String    formatDescription    =    DUMMY_PATTERN.toString();    	non-compiled	[CE]  cannot  find  symbol  end	4	None	replace
82	[BUG]  [BUGGY]  if(start  >  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }  [CE]  ']'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(start  >  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(start  >  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }	      if(index    >=    0)    {    if(c[pos.getIndex()    -    1)    {    stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ']'  expected	13	None	replace
83	[BUG]  [BUGGY]  if(start  >=  -1)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }  [CE]  ']'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(start  >=  -1)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(start  >=  -1)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);  }	      if(index    >=    0)    {    if(c[pos.getIndex()    -    1)    {    stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ']'  expected	13	None	replace
84	[BUG]  [BUGGY]  if(index  >=  -1)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(index  >=  -1)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(index  >=  -1)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	11	None	replace
85	[BUG]  [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(index  >=  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	11	None	replace
86	[BUG]  [BUGGY]  if(index  ==  -1)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                    junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(index  ==  -1)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(index  ==  -1)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	11	None	replace
87	[BUG]  [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  }  [CE]  orphaned  default  [FE]                      junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(index  >=  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	11	None	replace
88	[BUG]  [BUGGY]  if(start  >=  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(start  >=  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(start  >=  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    if(c[pos.getIndex()]    ==    START_FMT)    {    format    =    getFormat(formatDescription);    }    	non-compiled	[CE]  orphaned  default	19	None	replace
89	[BUG]  [BUGGY]  if(start  ==  -1)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(start  ==  -1)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(start  ==  -1)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    if(c[pos.getIndex()]    ==    START_FMT)    {    format    =    getFormat(formatDescription);    }    	non-compiled	[CE]  orphaned  default	19	None	replace
90	[BUG]  [BUGGY]  if(end  <  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(end  <  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(end  <  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    if(c[pos.getIndex()]    ==    START_FMT)    {    format    =    getFormat(formatDescription);    }    	non-compiled	[CE]  orphaned  default	19	None	replace
91	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  ESCAPED_QUOTE  +  DUMMY_PATTERN;  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	add	String  formatDescription  =  ESCAPED_QUOTE  +  DUMMY_PATTERN;	  String    formatDescription    =    DUMMY_PATTERN;    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	2	1	replace
92	[BUG]  [BUGGY]  String  formatDescription  =  ESCAPED_QUOTE  +  DUMMY_PATTERN;  [FE]  junit.framework.AssertionFailedError:  registry  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  ESCAPED_QUOTE  +  DUMMY_PATTERN;  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String  formatDescription  =  ESCAPED_QUOTE  +  DUMMY_PATTERN;	  String    formatDescription    =    DUMMY_PATTERN;    	compilable	  [FE]  junit.framework.AssertionFailedError:  registry  	2	1	replace
93	[BUG]  [BUGGY]  if(start  >  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  parseFormatDescription(pattern,  next(pos));  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(start  >  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  parseFormatDescription(pattern,  next(pos));  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(start  >  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  parseFormatDescription(pattern,  next(pos));  }	      if(c[pos.getIndex()]    ==    START_FE)    {    if(c[pos.getIndex()]    ==    START_FMT)    {    format    =    parseFormatDescription(pattern,    next(pos));    }    	non-compiled	[CE]  orphaned  default	17	None	replace
94	[BUG]  [BUGGY]  if(start  >=  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  parseFormatDescription(pattern,  next(pos));  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(start  >=  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  parseFormatDescription(pattern,  next(pos));  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(start  >=  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  parseFormatDescription(pattern,  next(pos));  }	      if(c[pos.getIndex()]    ==    START_FE)    {    if(c[pos.getIndex()]    ==    START_FMT)    {    format    =    parseFormatDescription(pattern,    next(pos));    }    	non-compiled	[CE]  orphaned  default	17	None	replace
95	[BUG]  [BUGGY]  if(end  <  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  parseFormatDescription(pattern,  next(pos));  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(end  <  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  parseFormatDescription(pattern,  next(pos));  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(end  <  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  parseFormatDescription(pattern,  next(pos));  }	      if(c[pos.getIndex()]    ==    START_FE)    {    if(c[pos.getIndex()]    ==    START_FMT)    {    format    =    parseFormatDescription(pattern,    next(pos));    }    	non-compiled	[CE]  orphaned  default	17	None	replace
96	[BUG]  [BUGGY]  if(index  >=  -1)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(index  >=  -1)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(index  >=  -1)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	8	None	replace
97	[BUG]  [BUGGY]  if(index  ==  -1)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(index  ==  -1)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(index  ==  -1)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	8	None	replace
98	[BUG]  [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(index  >=  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	8	None	replace
99	[BUG]  [BUGGY]  if(c.length  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(c.length  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(c.length  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	8	None	replace
100	[BUG]  [BUGGY]  String  formatDescription  =  DUMMY_PATTERN.toString();  char  formatDescription  =  DUMMY_PATTERN.toString();  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  DUMMY_PATTERN.toString();  char  formatDescription  =  DUMMY_PATTERN.toString();  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String    formatDescription    =    DUMMY_PATTERN.toString();    char  formatDescription  =  DUMMY_PATTERN.toString();	  	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	3	None	add
101	[BUG]  [BUGGY]  String  formatDescription  =  DUMMY_PATTERN.toString();  char  END_FE  =  DUMMY_PATTERN.toString();  [CE]  incompatible  types  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  DUMMY_PATTERN.toString();  char  END_FE  =  DUMMY_PATTERN.toString();  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String    formatDescription    =    DUMMY_PATTERN.toString();    char  END_FE  =  DUMMY_PATTERN.toString();	  	non-compiled	[CE]  incompatible  types	3	None	add
102	[BUG]  [BUGGY]  String  formatDescription  =  DUMMY_PATTERN.toString();  char[]  c  =  it.getValues();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  DUMMY_PATTERN.toString();  char[]  c  =  it.getValues();  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String    formatDescription    =    DUMMY_PATTERN.toString();    char[]  c  =  it.getValues();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	3	None	add
103	[BUG]  [BUGGY]  Format  formatDescription  =  getFormat(DUMMY_PATTERN);  [CE]  incompatible  types  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  Format  formatDescription  =  getFormat(DUMMY_PATTERN);  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	Format  formatDescription  =  getFormat(DUMMY_PATTERN);	  String    formatDescription    =    getFormat(DUMMY_PATTERN);    	non-compiled	[CE]  incompatible  types	5	None	replace
104	[BUG]  [BUGGY]  String  formatDescription  =  getFormat(DUMMY_PATTERN,  ESCAPED_QUOTE);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  getFormat(DUMMY_PATTERN,  ESCAPED_QUOTE);  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String  formatDescription  =  getFormat(DUMMY_PATTERN,  ESCAPED_QUOTE);	  String    formatDescription    =    getFormat(DUMMY_PATTERN);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	5	None	replace
105	[BUG]  [BUGGY]  char  formatDescription  =  getFormat(DUMMY_PATTERN);  [CE]  incompatible  types  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  char  formatDescription  =  getFormat(DUMMY_PATTERN);  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	char  formatDescription  =  getFormat(DUMMY_PATTERN);	  String    formatDescription    =    getFormat(DUMMY_PATTERN);    	non-compiled	[CE]  incompatible  types	5	None	replace
106	[BUG]  [BUGGY]  if(index  >=  -1)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(index  >=  -1)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(index  >=  -1)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	7	None	replace
107	[BUG]  [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(index  >=  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	7	None	replace
108	[BUG]  [BUGGY]  if(index  ==  -1)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(index  ==  -1)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(index  ==  -1)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	7	None	replace
109	[BUG]  [BUGGY]  if(c.length  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(c.length  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(c.length  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	7	None	replace
110	[BUG]  [BUGGY]  String  formatDescription  =  DUMMY_PATTERN;  char  formatDescription  =  DUMMY_PATTERN;  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  DUMMY_PATTERN;  char  formatDescription  =  DUMMY_PATTERN;  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String    formatDescription    =    DUMMY_PATTERN;    char  formatDescription  =  DUMMY_PATTERN;	  	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	1	None	add
111	[BUG]  [BUGGY]  String  formatDescription  =  DUMMY_PATTERN;  char[]  c  =  it.getValues();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]      junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  DUMMY_PATTERN;  char[]  c  =  it.getValues();  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String    formatDescription    =    DUMMY_PATTERN;    char[]  c  =  it.getValues();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	1	None	add
112	[BUG]  [BUGGY]  String  formatDescription  =  DUMMY_PATTERN;  char[]  c  =  it.next();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  DUMMY_PATTERN;  char[]  c  =  it.next();  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String    formatDescription    =    DUMMY_PATTERN;    char[]  c  =  it.next();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	1	None	add
113	[BUG]  [BUGGY]  if(start  >  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(start  >  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(DUMMY_PATTERN);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(start  >  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(DUMMY_PATTERN);  }	      if(index    >=    0)    {    if(c[pos.getIndex()]    ==    START_FE)    {    format    =    getFormat(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	12	None	replace
114	[BUG]  [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()  ]  ==  ESCAPED_QUOTE)  {  format  =  getFormat(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()  ]  ==  ESCAPED_QUOTE)  {  format  =  getFormat(DUMMY_PATTERN);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(index  >=  0)  {  if(c[pos.getIndex()  ]  ==  ESCAPED_QUOTE)  {  format  =  getFormat(DUMMY_PATTERN);  }	      if(index    >=    0)    {    if(c[pos.getIndex()]    ==    START_FE)    {    format    =    getFormat(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	12	None	replace
115	[BUG]  [BUGGY]  char  c  =  format.charAt(start);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  char  c  =  format.charAt(start);  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	char  c  =  format.charAt(start);	      	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	6	None	replace
116	[BUG]  [BUGGY]  char  c  =  stripCustom.charAt(start);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  char  c  =  stripCustom.charAt(start);  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	char  c  =  stripCustom.charAt(start);	      	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	6	None	replace
117	[BUG]  [BUGGY]  char  c  =  format.charAt(index);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  char  c  =  format.charAt(index);  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	char  c  =  format.charAt(index);	      	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	6	None	replace
118	[BUG]  [BUGGY]  if(start  >  0)  {  if(c[pos.getIndex()  -  1]  ==  START_FE)  {  format  =  getFormat(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(start  >  0)  {  if(c[pos.getIndex()  -  1]  ==  START_FE)  {  format  =  getFormat(DUMMY_PATTERN);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(start  >  0)  {  if(c[pos.getIndex()  -  1]  ==  START_FE)  {  format  =  getFormat(DUMMY_PATTERN);  }	      if(index    >=    0)    {    if(c[pos.getIndex()    -    1]    ==    START_FE)    {    format    =    getFormat(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	14	None	replace
119	[BUG]  [BUGGY]  if(start!=  0)  {  if(c[pos.getIndex()  -  1]  ==  START_FE)  {  format  =  getFormat(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(start!=  0)  {  if(c[pos.getIndex()  -  1]  ==  START_FE)  {  format  =  getFormat(DUMMY_PATTERN);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(start!=  0)  {  if(c[pos.getIndex()  -  1]  ==  START_FE)  {  format  =  getFormat(DUMMY_PATTERN);  }	      if(index    >=    0)    {    if(c[pos.getIndex()    -    1]    ==    START_FE)    {    format    =    getFormat(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	14	None	replace
120	[BUG]  [BUGGY]  if(start  >  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ']'  expected  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(start  >  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(start  >  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(DUMMY_PATTERN);  }	      if(index    >=    0)    {    if(c[pos.getIndex()    -    1)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ']'  expected	15	None	replace
121	[BUG]  [BUGGY]  if(c[pos.getIndex()  ]  ==  END_FE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(c[pos.getIndex()  ]  ==  END_FE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(c[pos.getIndex()  ]  ==  END_FE)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }	      if(c[pos.getIndex()]    ==    START_FE)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	9	None	replace
122	[BUG]  [BUGGY]  if(c[pos.getIndex()  ]  ==  START_FE)  {  appendQuotedString(pattern,  start,  fmtCount,  stripCustom,  true);  break;  }  [CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(c[pos.getIndex()  ]  ==  START_FE)  {  appendQuotedString(pattern,  start,  fmtCount,  stripCustom,  true);  break;  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(c[pos.getIndex()  ]  ==  START_FE)  {  appendQuotedString(pattern,  start,  fmtCount,  stripCustom,  true);  break;  }	      if(c[pos.getIndex()]    ==    START_FE)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  method  appendQuotedString  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	9	None	replace
123	[BUG]  [BUGGY]  if(start  ==  -1)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  parseFormatDescription(pattern,  next(pos));  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(start  ==  -1)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  parseFormatDescription(pattern,  next(pos));  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(start  ==  -1)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  parseFormatDescription(pattern,  next(pos));  }	      if(c[pos.getIndex()]    ==    START_FE)    {    if(c[pos.getIndex()]    ==    START_FE)    {    format    =    parseFormatDescription(pattern,    next(pos));    }    	non-compiled	[CE]  orphaned  default	18	None	replace
124	[BUG]  [BUGGY]  if(index  >=  -1)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(index  >=  -1)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(index  >=  -1)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	10	None	replace
125	[BUG]  [BUGGY]  if(index  ==  -1)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(index  ==  -1)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(index  ==  -1)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	10	None	replace
126	[BUG]  [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  orphaned  default  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(index  >=  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	10	None	replace
127	[BUG]  [BUGGY]  if(c.length  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  orphaned  default  [FE]                    junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(c.length  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(c.length  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	10	None	replace
128	[BUG]  [BUGGY]  String  formatDescription  =  FormatUtils.EMPTY_STRING;  [CE]  cannot  find  symbol  FormatUtils  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  FormatUtils.EMPTY_STRING;  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String  formatDescription  =  FormatUtils.EMPTY_STRING;	  String    formatDescription    =    DUMMY_QUOTE;    	non-compiled	[CE]  cannot  find  symbol  FormatUtils	16	None	replace
129	[BUG]  [BUGGY]  String  formatDescription  =  DEFAULT_FORMAT;  [CE]  cannot  find  symbol  DEFAULT_FORMAT  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  DEFAULT_FORMAT;  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String  formatDescription  =  DEFAULT_FORMAT;	  String    formatDescription    =    DUMMY_QUOTE;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_FORMAT	16	None	replace
130	[BUG]  [BUGGY]  if(c[pos.getIndex()  ]  ==  QUOTE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(c[pos.getIndex()  ]  ==  QUOTE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(c[pos.getIndex()  ]  ==  QUOTE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	11	None	replace
131	[BUG]  [BUGGY]  if(c[pos.getIndex()  -  1)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  ']'  expected  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(c[pos.getIndex()  -  1)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(c[pos.getIndex()  -  1)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  ']'  expected	11	None	replace
132	[BUG]  [BUGGY]  if(c[pos.getIndex()  ]!=  QUOTE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [CE]  orphaned  default  [FE]                    junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(c[pos.getIndex()  ]!=  QUOTE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(c[pos.getIndex()  ]!=  QUOTE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(END_FE);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(END_FE);    }    	non-compiled	[CE]  orphaned  default	11	None	replace
133	[BUG]  [BUGGY]  Format  format  =  getFormat(DUMMY_PATTERN);  [CE]  variable  format  is  already  defined  in  method  applyPattern(String)  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  Format  format  =  getFormat(DUMMY_PATTERN);  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	Format  format  =  getFormat(DUMMY_PATTERN);	  String    formatDescription    =    getFormat(DUMMY_PATTERN);    	non-compiled	[CE]  variable  format  is  already  defined  in  method  applyPattern(String)	5	None	replace
134	[BUG]  [BUGGY]  String  formatDescription  =  getFormat(DUMMY_PATTERN,  fmtCount);  [CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  getFormat(DUMMY_PATTERN,  fmtCount);  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String  formatDescription  =  getFormat(DUMMY_PATTERN,  fmtCount);	  String    formatDescription    =    getFormat(DUMMY_PATTERN);    	non-compiled	[CE]  method  getFormat  in  class  ExtendedMessageFormat  cannot  be  applied  to  given  types;	5	None	replace
135	[BUG]  [BUGGY]  if(format  ==  null)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }  [CE]  orphaned  default  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(format  ==  null)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(format  ==  null)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    if(c[pos.getIndex()]    ==    START_FE)    {    format    =    getFormat(formatDescription);    }    	non-compiled	[CE]  orphaned  default	20	None	replace
136	[BUG]  [BUGGY]  if(format!=  null)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(format!=  null)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(format!=  null)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    if(c[pos.getIndex()]    ==    START_FE)    {    format    =    getFormat(formatDescription);    }    	non-compiled	[CE]  orphaned  default	20	None	replace
137	[BUG]  [BUGGY]  if(start  <  =  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(start  <  =  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(start  <  =  0)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  getFormat(formatDescription);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    if(c[pos.getIndex()]    ==    START_FE)    {    format    =    getFormat(formatDescription);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
138	[BUG]  [BUGGY]  if(pos.getIndex()  <  0)  {  if(c[pos.getIndex()]  ==  END_FE)  {  format  =  getFormat(formatDescription);  }  [CE]  orphaned  default  [FE]                    junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(pos.getIndex()  <  0)  {  if(c[pos.getIndex()]  ==  END_FE)  {  format  =  getFormat(formatDescription);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(pos.getIndex()  <  0)  {  if(c[pos.getIndex()]  ==  END_FE)  {  format  =  getFormat(formatDescription);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    if(c[pos.getIndex()]    ==    START_FE)    {    format    =    getFormat(formatDescription);    }    	non-compiled	[CE]  orphaned  default	20	None	replace
139	[BUG]  [BUGGY]  if(c[pos.getIndex()  -  1)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  ']'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(c[pos.getIndex()  -  1)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(c[pos.getIndex()  -  1)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ']'  expected	7	None	replace
140	[BUG]  [BUGGY]  if(c[pos.getIndex()  ]!=  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(c[pos.getIndex()  ]!=  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(c[pos.getIndex()  ]!=  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  stripCustom.append(DUMMY_PATTERN);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  orphaned  default	7	None	replace
141	[BUG]  [BUGGY]  int  c  =  readArgumentIndex(pattern,  start,  pos);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  int  c  =  readArgumentIndex(pattern,  start,  pos);  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	int  c  =  readArgumentIndex(pattern,  start,  pos);	      int    c    =    readArgumentIndex(pattern,    next(pos));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	21	None	replace
142	[BUG]  [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(END_FE);  }  [CE]  ']'  expected  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(END_FE);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(index  >=  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(END_FE);  }	      if(index    >=    0)    {    if(c[pos.getIndex()    -    1)    {    stripCustom.append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ']'  expected	15	None	replace
143	[BUG]  [BUGGY]  if(index  <  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }  [CE]  ']'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(index  <  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(index  <  0)  {  if(c[pos.getIndex()  -  1)  {  stripCustom.append(END_FE).append(DUMMY_PATTERN);  }	      if(index    >=    0)    {    if(c[pos.getIndex()    -    1)    {    stripCustom.append(DUMMY_PATTERN).append(DUMMY_PATTERN);    }    	non-compiled	[CE]  ']'  expected	13	None	replace
144	[BUG]  [BUGGY]  if(c[pos.getIndex()  -  1)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  ']'  expected  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(c[pos.getIndex()  -  1)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(c[pos.getIndex()  -  1)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  ']'  expected	8	None	replace
145	[BUG]  [BUGGY]  if(c[pos.getIndex()  ]!=  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  orphaned  default  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(c[pos.getIndex()  ]!=  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(c[pos.getIndex()  ]!=  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    break;    }    	non-compiled	[CE]  orphaned  default	8	None	replace
146	[BUG]  [BUGGY]  String  formatDescription  =  DUMMY_PATTERN;  Format  formatDescription  =  DUMMY_PATTERN;  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  DUMMY_PATTERN;  Format  formatDescription  =  DUMMY_PATTERN;  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String    formatDescription    =    DUMMY_PATTERN;    Format  formatDescription  =  DUMMY_PATTERN;	  	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	1	None	add
147	[BUG]  [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()  -  1)  {  format  =  getFormat(DUMMY_PATTERN);  }  [CE]  ']'  expected  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(index  >=  0)  {  if(c[pos.getIndex()  -  1)  {  format  =  getFormat(DUMMY_PATTERN);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(index  >=  0)  {  if(c[pos.getIndex()  -  1)  {  format  =  getFormat(DUMMY_PATTERN);  }	      if(index    >=    0)    {    if(c[pos.getIndex()]    ==    START_FE)    {    format    =    getFormat(DUMMY_PATTERN);    }    	non-compiled	[CE]  ']'  expected	12	None	replace
148	[BUG]  [BUGGY]  char[]  c  =  pattern.toPattern();  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  char[]  c  =  pattern.toPattern();  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	char[]  c  =  pattern.toPattern();	      	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	6	None	replace
149	[BUG]  [BUGGY]  int  c  =  readArgumentIndex(pattern,  start,  index);  [CE]  variable  c  is  already  defined  in  method  applyPattern(String)  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  int  c  =  readArgumentIndex(pattern,  start,  index);  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	int  c  =  readArgumentIndex(pattern,  start,  index);	      	non-compiled	[CE]  variable  c  is  already  defined  in  method  applyPattern(String)	6	None	replace
150	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  fmtCount)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  parseFormatDescription(pattern,  next(pos));  }  [CE]  orphaned  default  [FE]          junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(start  <  0  ||  start  >  fmtCount)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  parseFormatDescription(pattern,  next(pos));  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(start  <  0  ||  start  >  fmtCount)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  parseFormatDescription(pattern,  next(pos));  }	      if(c[pos.getIndex()]    ==    START_FE)    {    if(c[pos.getIndex()]    ==    START_FE)    {    format    =    parseFormatDescription(pattern,    next(pos));    }    	non-compiled	[CE]  orphaned  default	18	None	replace
151	[BUG]  [BUGGY]  if(c[pos.getIndex()  -  1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [CE]  ']'  expected  [FE]            junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(c[pos.getIndex()  -  1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(c[pos.getIndex()  -  1)  {  appendQuotedString(pattern,  start,  stripCustom,  true);  break;  }	      if(c[pos.getIndex()]    ==    START_FE)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  ']'  expected	9	None	replace
152	[BUG]  [BUGGY]  if(c[pos.getIndex()  ]  ==  END_FE)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [CE]  cannot  find  symbol  formatDescription  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(c[pos.getIndex()  ]  ==  END_FE)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(c[pos.getIndex()  ]  ==  END_FE)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  }	      if(c[pos.getIndex()]    ==    START_FE)    {    appendQuotedString(pattern,    start,    stripCustom,    true);    break;    }    	non-compiled	[CE]  cannot  find  symbol  formatDescription	9	None	replace
153	[BUG]  [BUGGY]  String  formatDescription  =  DUMMY_PATTERN.toString();  Format  formatDescription  =  DUMMY_PATTERN.toString();  [CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)  [FE]    junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  String  formatDescription  =  DUMMY_PATTERN.toString();  Format  formatDescription  =  DUMMY_PATTERN.toString();  [BUGGY]    if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	String    formatDescription    =    DUMMY_PATTERN.toString();    Format  formatDescription  =  DUMMY_PATTERN.toString();	  	non-compiled	[CE]  variable  formatDescription  is  already  defined  in  method  applyPattern(String)	3	None	add
154	[BUG]  [BUGGY]  if(c[pos.getIndex()  -  1)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  ']'  expected  [FE]              junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(c[pos.getIndex()  -  1)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(c[pos.getIndex()  -  1)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  ']'  expected	10	None	replace
155	[BUG]  [BUGGY]  if(c[pos.getIndex()  ]!=  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [CE]  orphaned  default  [FE]                junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(c[pos.getIndex()  ]!=  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(c[pos.getIndex()  ]!=  END_FE)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  appendQuotedString(pattern,  pos,  stripCustom,  true);  }	      if(c[pos.getIndex()]    ==    START_FE)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    appendQuotedString(pattern,    pos,    stripCustom,    true);    }    	non-compiled	[CE]  orphaned  default	10	None	replace
156	[BUG]  [BUGGY]  if(format  ==  null)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  parseFormatDescription(pattern,  next(pos));  }  [CE]  orphaned  default  [FE]        junit.framework.AssertionFailedError:  registry    [CONTEXT]    appendQuotedString(pattern,  pos,  stripCustom,  true);  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;    [BUGGY]  if(format  ==  null)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  parseFormatDescription(pattern,  next(pos));  }  [BUGGY]    String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  formatDescription  =  parseFormatDescription(pattern,  next(pos));  format  =  getFormat(formatDescription);  if  (format  ==  null)  {  stripCustom.append(START_FMT).append(formatDescription);  }  }  foundFormats.add(format);  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  StringBuilder  stripCustom  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java	0.4472135954999579	171	171	1	replace	if(format  ==  null)  {  if(c[pos.getIndex()]  ==  START_FE)  {  format  =  parseFormatDescription(pattern,  next(pos));  }	      if(c[pos.getIndex()]    ==    START_FE)    {    if(c[pos.getIndex()]    ==    START_FMT)    {    format    =    parseFormatDescription(pattern,    next(pos));    }    	non-compiled	[CE]  orphaned  default	17	None	replace
